[{"path":[]},{"path":"https://docs.ropensci.org/taxize/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page - sure include R session information reproducible example. Prefer email? Please don’t. benefits everyone discussions happen public ’re indexed search engines, enabling users find solutions problems previous public discussions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/CONTRIBUTING.html","id":"broad-overview-of-contributing-workflow","dir":"","previous_headings":"Code contributions","what":"Broad overview of contributing workflow","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/taxize.git Make sure track progress upstream (.e., version taxize ropensci/taxize) git remote add upstream https://github.com/ropensci/taxize.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Please write test(s) changes affect code just docs (see Tests ) Push account Submit pull request home base ropensci/taxize","code":""},{"path":"https://docs.ropensci.org/taxize/CONTRIBUTING.html","id":"tests","dir":"","previous_headings":"Code contributions","what":"Tests","title":"CONTRIBUTING","text":"add tests, go folder tests/testthat/. Tests generally organized individual files exported function package (, listed export NAMESPACE file). adding new exported function, add new test file. changing existing function, work tests file function, unless doesn’t tests, case make new test file. book R packages book provides chapter testing general. consult first aren’t familiar testing R. easiest set run tests within R session: test individual test file run tests running tests skip_on_cran() , set Sys.setenv(NOT_CRAN = \"true\") prior running tests.","code":"library(devtools) library(testthat) # loads the package load_all() test_file(\"tests/testthat/test-foobar.R\") devtools::test()"},{"path":"https://docs.ropensci.org/taxize/CONTRIBUTING.html","id":"making-changes","dir":"","previous_headings":"Code contributions","what":"Making changes","title":"CONTRIBUTING","text":"addition changing code, make sure udpate documentation applicable. R packages book book chapter documentation read aren’t familiar. code documentation changed, update documentation running either devtools::document() roxygen2::roxygenise(). Make sure change packages even functions within packages imported, likely add package Imports DESCRIPTION file list functions imported taxize-package.R file. conservative adding new dependencies.","code":""},{"path":"https://docs.ropensci.org/taxize/CONTRIBUTING.html","id":"style","dir":"","previous_headings":"Code contributions","what":"Style","title":"CONTRIBUTING","text":"Make sure code, documentation, comments 80 characters width. Use <- instead = assignment Always use snake_case (lowercase) instead camelCase","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Scott Chamberlain Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/taxize/articles/infotable.html","id":"acronyms","dir":"Articles","previous_headings":"","what":"Acronyms","title":"Key functions in taxize","text":"NCBI: National Center Biotechnology Information ITIS: Integrated Taxonomic Information Service EOL: Encylopedia Life GBIF: Global Biodiversity Information Facility NBN: National Biodiversity Network (UK) iPlant: iPlant Name Resolution Service GNR: Global Names Resolver TOL: Open Tree Life MSW3: Mammal Species World, 3rd Edition TPL: Plant List BOLD: Barcode Life NATSERV: Natureserve TROPICOS: Tropicos plant database WORMS: World Register Marine Species","code":""},{"path":"https://docs.ropensci.org/taxize/articles/name_cleaning.html","id":"get_-functions","dir":"Articles","previous_headings":"","what":"get_* functions","title":"Strategies for programmatic name cleaning","text":"using get_*() functions programatically, options.","code":""},{"path":"https://docs.ropensci.org/taxize/articles/name_cleaning.html","id":"rows-parameter","dir":"Articles","previous_headings":"get_* functions","what":"rows parameter","title":"Strategies for programmatic name cleaning","text":"Normally, get one result, get prompt asking select taxon want. Instead, can use rows parameter specify records want number (name ). , want first 3 records: However, still get prompt one result. Thus, full programmatic usage, can specify single row, happen know one want: reality unlikely ’ll know row want, unless perhaps just want one result query, regardless .","code":"get_tsn(\"Quercus b\") #>       tsn                       target             commonnames    nameusage #> 1   19298             Quercus beebiana                         not accepted #> 2  507263       Quercus berberidifolia               scrub oak     accepted #> 3   19300              Quercus bicolor         swamp white oak     accepted #> 4   19303             Quercus borealis                         not accepted #> 5  195131 Quercus borealis var. maxima                         not accepted #> 6  195166            Quercus boyntonii Boynton's sand post oak     accepted #> 7  506533              Quercus brantii             Brant's oak     accepted #> 8  195150            Quercus breviloba                         not accepted #> 9  195099              Quercus breweri                         not accepted #> 10 195168             Quercus buckleyi               Texas oak     accepted #> #> More than one TSN found for taxon 'Quercus b'! #> #>             Enter rownumber of taxon (other inputs will return 'NA'): #> #> 1: get_tsn('Quercus b', rows = 1:3) #>     tsn           target     commonnames    nameusage #> 1 19298 Quercus beebiana                 not accepted #> 2 19300  Quercus bicolor swamp white oak     accepted #> 3 19303 Quercus borealis                 not accepted #> #> More than one TSN found for taxon 'Quercus b'! #> #>             Enter rownumber of taxon (other inputs will return 'NA'): #> #> 1: get_tsn('Quercus b', rows = 3) #> ══  1 queries  ═══════════════ #> ✔  Found:  Quercus b #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 #> [1] \"19303\" #> attr(,\"class\") #> [1] \"tsn\" #> attr(,\"match\") #> [1] \"found\" #> attr(,\"multiple_matches\") #> [1] TRUE #> attr(,\"pattern_match\") #> [1] FALSE #> attr(,\"uri\") #> [1] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=19303\""},{"path":"https://docs.ropensci.org/taxize/articles/name_cleaning.html","id":"underscore-methods","dir":"Articles","previous_headings":"get_* functions","what":"underscore methods","title":"Strategies for programmatic name cleaning","text":"better fit programmatic use underscore methods. get_*() function sister method trailing underscore, e.g., get_tsn() get_tsn_(). result single data.frame taxon queried, can processed downstream whatever logic required workflow. can also combine rows parameter underscore functions, single number range numbers:","code":"get_tsn_(\"Quercus b\") #> $`Quercus b` #> # A tibble: 5 x 4 #>   tsn    scientificName         commonNames                           nameUsage #>   <chr>  <chr>                  <chr>                                 <chr>     #> 1 19300  Quercus bicolor        swamp white oak,chêne bicolore        accepted  #> 2 195166 Quercus boyntonii      Boynton's sand post oak,Boynton's oak accepted  #> 3 195168 Quercus buckleyi       Texas oak,Buckley's oak               accepted  #> 4 506533 Quercus brantii        Brant's oak                           accepted  #> 5 507263 Quercus berberidifolia scrub oak                             accepted get_tsn_(\"Quercus b\", rows = 1) #> $`Quercus b` #> # A tibble: 1 x 4 #>   tsn   scientificName  commonNames                    nameUsage #>   <chr> <chr>           <chr>                          <chr>     #> 1 19300 Quercus bicolor swamp white oak,chêne bicolore accepted get_tsn_(\"Quercus b\", rows = 1:2) #> $`Quercus b` #> # A tibble: 2 x 4 #>   tsn    scientificName    commonNames                           nameUsage #>   <chr>  <chr>             <chr>                                 <chr>     #> 1 19300  Quercus bicolor   swamp white oak,chêne bicolore        accepted  #> 2 195166 Quercus boyntonii Boynton's sand post oak,Boynton's oak accepted"},{"path":"https://docs.ropensci.org/taxize/articles/name_cleaning.html","id":"as--methods","dir":"Articles","previous_headings":"","what":"as.* methods","title":"Strategies for programmatic name cleaning","text":"get_*() functions associated .*() functions (e.g., get_tsn() .tsn()). Many taxize functions use taxonomic identifier classes (S3 objects) output get_*() functions. .*() methods make easy make required S3 taxonomic identifier classes already know identifier. example: Already tsn, returns numeric can character, list inputs - depending data source. .tsn() examples parameter check = TRUE, meaning ping data source web service make sure identifier exists. can skip check like setting check = FALSE, result returned much faster: output .*() methods, can proceed taxize functions.","code":"as.tsn(get_tsn(\"Quercus douglasii\")) #> ══  1 queries  ═══════════════ #> ✔  Found:  Quercus douglasii #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 #> [1] \"19322\" #> attr(,\"class\") #> [1] \"tsn\" #> attr(,\"match\") #> [1] \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE #> attr(,\"pattern_match\") #> [1] FALSE #> attr(,\"uri\") #> [1] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=19322\" as.tsn(c(19322, 129313, 506198)) #> [1] \"19322\"  \"129313\" \"506198\" #> attr(,\"class\") #> [1] \"tsn\" #> attr(,\"match\") #> [1] \"found\" \"found\" \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE FALSE FALSE #> attr(,\"pattern_match\") #> [1] FALSE FALSE FALSE #> attr(,\"uri\") #> [1] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=19322\"  #> [2] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=129313\" #> [3] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=506198\" as.tsn(c(\"19322\",\"129313\",\"506198\"), check = FALSE) #> [1] \"19322\"  \"129313\" \"506198\" #> attr(,\"class\") #> [1] \"tsn\" #> attr(,\"match\") #> [1] \"found\" \"found\" \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE FALSE FALSE #> attr(,\"pattern_match\") #> [1] FALSE FALSE FALSE #> attr(,\"uri\") #> [1] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=19322\"  #> [2] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=129313\" #> [3] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=506198\""},{"path":"https://docs.ropensci.org/taxize/articles/name_cleaning.html","id":"gnr_resolve","dir":"Articles","previous_headings":"","what":"gnr_resolve","title":"Strategies for programmatic name cleaning","text":"functions taxize meant specifically name cleaning. One gnr_resolve(). gnr_resolve() doesn’t provide prompts get_*() functions, instead return data.frame’s. don’t face problem, can use gnr_resolve() programmatic workflow straight away.","code":"spp <- names_list(rank = \"species\", size = 10) gnr_resolve(spp, preferred_data_sources = 11) #> # A tibble: 13 x 5 #>    user_supplied_na… submitted_name   matched_name        data_source_tit… score #>  * <chr>             <chr>            <chr>               <chr>            <dbl> #>  1 Astragalus radka… Astragalus radk… Astragalus radkane… GBIF Backbone T… 0.988 #>  2 Montanoa gigas    Montanoa gigas   Montanoa gigas Rze… GBIF Backbone T… 0.988 #>  3 Serratula semise… Serratula semis… Serratula semiserr… GBIF Backbone T… 0.988 #>  4 Serratula semise… Serratula semis… Serratula semiserr… GBIF Backbone T… 0.988 #>  5 Delosperma pagea… Delosperma page… Delosperma pageanu… GBIF Backbone T… 0.988 #>  6 Delosperma pagea… Delosperma page… Delosperma pageanu… GBIF Backbone T… 0.988 #>  7 Zieria hydroscop… Zieria hydrosco… Zieria hydroscopic… GBIF Backbone T… 0.988 #>  8 Baccharis flabel… Baccharis flabe… Baccharis flabella… GBIF Backbone T… 0.988 #>  9 Piper gonocarpum  Piper gonocarpum Piper gonocarpum T… GBIF Backbone T… 0.988 #> 10 Lathraea japonica Lathraea japoni… Lathraea japonica … GBIF Backbone T… 0.988 #> 11 Lathraea japonica Lathraea japoni… Lathraea japonica … GBIF Backbone T… 0.988 #> 12 Lathraea japonica Lathraea japoni… Lathraea japonica … GBIF Backbone T… 0.988 #> 13 Verbesina tachir… Verbesina tachi… Verbesina tachiren… GBIF Backbone T… 0.988"},{"path":"https://docs.ropensci.org/taxize/articles/name_cleaning.html","id":"other-functions","dir":"Articles","previous_headings":"","what":"Other functions","title":"Strategies for programmatic name cleaning","text":"functions taxize use get_*() functions internally (e.g., classification()), can can generally pass parameters get_*() functions internally.","code":""},{"path":"https://docs.ropensci.org/taxize/articles/name_cleaning.html","id":"feedback","dir":"Articles","previous_headings":"","what":"Feedback?","title":"Strategies for programmatic name cleaning","text":"Let us know ideas better ways programmatic name cleaning https://github.com/ropensci/taxize/issues https://discuss.ropensci.org/ !","code":""},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to taxize","text":"First, install load taxize R session. Advanced users can also download install latest development copy GitHub (https://github.com/ropensci/taxize)","code":"install.packages(\"taxize\") library(\"taxize\")"},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"resolve-taxonomic-name","dir":"Articles","previous_headings":"","what":"Resolve taxonomic name","title":"Introduction to taxize","text":"common task biology. often list species names want know ) date names, b) names spelled correctly, c) scientific name common name. One way resolve names via Global Names Resolver (GNR) service provided Encyclopedia Life. , searching two misspelled names: correct spellings Helianthus annuus Homo sapiens. taxize takes approach user able make decisions resource trust, rather making decision. GNR service provides data variety data sources. user may trust specific data source, thus may want use names data source. future, may provide ability taxize suggest best match variety sources. Another common use case many synonyms species. example, three synonyms currently accepted name species.","code":"temp <- gnr_resolve(c(\"Helianthos annus\", \"Homo saapiens\")) head(temp) #> # A tibble: 6 x 5 #>   user_supplied_name submitted_name  matched_name     data_source_title    score #>   <chr>              <chr>           <chr>            <chr>                <dbl> #> 1 Helianthos annus   Helianthos ann… Helianthus annus uBio NameBank         0.75 #> 2 Helianthos annus   Helianthos ann… Helianthus annu… Catalogue of Life     0.75 #> 3 Helianthos annus   Helianthos ann… Helianthus annu… ITIS                  0.75 #> 4 Helianthos annus   Helianthos ann… Helianthus annu… NCBI                  0.75 #> 5 Helianthos annus   Helianthos ann… Helianthus annu… GRIN Taxonomy for P…  0.75 #> 6 Helianthos annus   Helianthos ann… Helianthus annu… Union 4               0.75 mynames <- c(\"Helianthus annuus ssp. jaegeri\", \"Helianthus annuus ssp. lenticularis\", \"Helianthus annuus ssp. texanus\") (tsn <- get_tsn(mynames, accepted = FALSE)) ══  3 queries  ═══════════════ ✔  Found:  Helianthus annuus ssp. jaegeri ✔  Found:  Helianthus annuus ssp. lenticularis ✔  Found:  Helianthus annuus ssp. texanus ══  Results  ═════════════════  ● Total: 3  ● Found: 3  ● Not Found: 0 [1] \"525928\" \"525929\" \"525930\" attr(,\"class\") [1] \"tsn\" attr(,\"match\") [1] \"found\" \"found\" \"found\" attr(,\"multiple_matches\") [1] FALSE FALSE FALSE attr(,\"pattern_match\") [1] FALSE FALSE FALSE attr(,\"uri\") [1] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=525928\" [2] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=525929\" [3] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=525930\" lapply(tsn, itis_acceptname) [[1]]   submittedtsn      acceptedname acceptedtsn author 1       525928 Helianthus annuus       36616     L.  [[2]]   submittedtsn      acceptedname acceptedtsn author 1       525929 Helianthus annuus       36616     L.  [[3]]   submittedtsn      acceptedname acceptedtsn author 1       525930 Helianthus annuus       36616     L."},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"retrieve-higher-taxonomic-names","dir":"Articles","previous_headings":"","what":"Retrieve higher taxonomic names","title":"Introduction to taxize","text":"Another task biologists often face getting higher taxonomic names taxa list. higher taxonomy allows put context relationships species list. example, may find species species B Family C, may lead interesting insight, opposed knowing Species B closely related. also makes easy aggregate/standardize data specific taxonomic level (e.g., family level) match data databases different taxonomic resolution (e.g., trait databases). number data sources taxize provide capability retrieve higher taxonomic names, highlight two useful ones: Integrated Taxonomic Information System (ITIS) National Center Biotechnology Information (NCBI). First, ’ll search two species, Abies procera} Pinus contorta* within ITIS. turns species family Pinaceae. can also get type information NCBI classification(specieslist, db = 'ncbi'). Instead full classification, may want single name, say family name species interest. function tax_name built just purpose. classification function can specify data source db argument, either ITIS NCBI. may happen data source provide information queried species, one take result another source union results different sources.","code":"specieslist <- c(\"Abies procera\",\"Pinus contorta\") classification(specieslist, db = 'itis') #> ══  2 queries  ═══════════════ #> ✔  Found:  Abies procera #> ✔  Found:  Pinus contorta #> ══  Results  ═════════════════ #>  #> ● Total: 2  #> ● Found: 2  #> ● Not Found: 0 #> $`Abies procera` #>               name          rank     id #> 1          Plantae       kingdom 202422 #> 2    Viridiplantae    subkingdom 954898 #> 3     Streptophyta  infrakingdom 846494 #> 4      Embryophyta superdivision 954900 #> 5     Tracheophyta      division 846496 #> 6  Spermatophytina   subdivision 846504 #> 7        Pinopsida         class 500009 #> 8          Pinidae      subclass 954916 #> 9          Pinales         order 500028 #> 10        Pinaceae        family  18030 #> 11           Abies         genus  18031 #> 12   Abies procera       species 181835 #>  #> $`Pinus contorta` #>               name          rank     id #> 1          Plantae       kingdom 202422 #> 2    Viridiplantae    subkingdom 954898 #> 3     Streptophyta  infrakingdom 846494 #> 4      Embryophyta superdivision 954900 #> 5     Tracheophyta      division 846496 #> 6  Spermatophytina   subdivision 846504 #> 7        Pinopsida         class 500009 #> 8          Pinidae      subclass 954916 #> 9          Pinales         order 500028 #> 10        Pinaceae        family  18030 #> 11           Pinus         genus  18035 #> 12  Pinus contorta       species 183327 #>  #> attr(,\"class\") #> [1] \"classification\" #> attr(,\"db\") #> [1] \"itis\" tax_name(\"Helianthus annuus\", get = \"family\", db = \"ncbi\") #> ══  1 queries  ═══════════════ #> ✔  Found:  Helianthus+annuus #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 #>     db             query     family #> 1 ncbi Helianthus annuus Asteraceae"},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"interactive-name-selection","dir":"Articles","previous_headings":"","what":"Interactive name selection","title":"Introduction to taxize","text":"mentioned databases use numeric code reference species. general workflow taxize : Retrieve Code queried species use code query data/information. examples. run examples R, presented command prompt asking row contains name like back; output printed brevity. example, search term many matches. function returns data frame matches, asks user input row number accept. another example, can pass long character vector taxonomic names (although one rather short demo purposes): functions many sources get_boldid() get_eolid() get_gbifid() get_nbnid() get_tpsid() Sometimes functions get lot data back. cases may want limit choices. Soon incorporate ability filter using regex limit matches, now, new parameter, rows, lets select certain rows. example, can select first row given name, means interactive component: can select range rows addition, case don’t want interactive name selection case lot names, can get data back functions form, e.g., get_tsn_(), likewise data sources. example: ’s lot data, can get certain rows back","code":"get_uid(\"Pinus\") #> ══  1 queries  ═══════════════ #> ✔  Found:  Pinus #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 #> [1] \"3337\" #> attr(,\"class\") #> [1] \"uid\" #> attr(,\"match\") #> [1] \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE #> attr(,\"pattern_match\") #> [1] FALSE #> attr(,\"uri\") #> [1] \"https://www.ncbi.nlm.nih.gov/taxonomy/3337\" splist <- c(\"annona cherimola\", 'annona muricata', \"quercus robur\") get_tsn(splist, searchtype = \"scientific\") #> ══  3 queries  ═══════════════ #> ✔  Found:  annona cherimola #> ✔  Found:  annona muricata #> ✔  Found:  quercus robur #> ══  Results  ═════════════════ #>  #> ● Total: 3  #> ● Found: 3  #> ● Not Found: 0 #> [1] \"506198\" \"18098\"  \"19405\"  #> attr(,\"class\") #> [1] \"tsn\" #> attr(,\"match\") #> [1] \"found\" \"found\" \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE FALSE  TRUE #> attr(,\"pattern_match\") #> [1] FALSE FALSE  TRUE #> attr(,\"uri\") #> [1] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=506198\" #> [2] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=18098\"  #> [3] \"https://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=19405\" get_nbnid(c(\"Zootoca vivipara\",\"Pinus contorta\"), rows = 1) #> ══  2 queries  ═══════════════ #> ✔  Found:  Zootoca vivipara #> ✔  Found:  Pinus contorta #> ══  Results  ═════════════════ #>  #> ● Total: 2  #> ● Found: 2  #> ● Not Found: 0 #> [1] \"NHMSYS0001706186\" \"NBNSYS0000004786\" #> attr(,\"class\") #> [1] \"nbnid\" #> attr(,\"match\") #> [1] \"found\" \"found\" #> attr(,\"multiple_matches\") #> [1] TRUE TRUE #> attr(,\"pattern_match\") #> [1] FALSE FALSE #> attr(,\"uri\") #> [1] \"https://species.nbnatlas.org/species/NHMSYS0001706186\" #> [2] \"https://species.nbnatlas.org/species/NBNSYS0000004786\" get_nbnid(c(\"Zootoca vivipara\",\"Pinus contorta\"), rows = 1:3) #> ══  2 queries  ═══════════════ #> ✔  Found:  Zootoca vivipara #> ✔  Found:  Pinus contorta #> ══  Results  ═════════════════ #>  #> ● Total: 2  #> ● Found: 2  #> ● Not Found: 0 #> [1] \"NHMSYS0001706186\" \"NBNSYS0000004786\" #> attr(,\"class\") #> [1] \"nbnid\" #> attr(,\"match\") #> [1] \"found\" \"found\" #> attr(,\"multiple_matches\") #> [1] TRUE TRUE #> attr(,\"pattern_match\") #> [1] TRUE TRUE #> attr(,\"uri\") #> [1] \"https://species.nbnatlas.org/species/NHMSYS0001706186\" #> [2] \"https://species.nbnatlas.org/species/NBNSYS0000004786\" out <- get_nbnid_(\"Poa annua\") NROW(out$`Poa annua`) #> [1] 25 get_nbnid_(\"Poa annua\", rows = 1:10) #> $`Poa annua` #>                guid     scientificName    rank taxonomicStatus #> 1  NBNSYS0000002544          Poa annua species        accepted #> 2  NBNSYS0200001901       Bellis annua species        accepted #> 3  NBNSYS0200003392   Triumfetta annua species        accepted #> 4  NBNSYS0200002555        Lonas annua species        accepted #> 5  NHMSYS0000456951  Carrichtera annua species        accepted #> 6  NHMSYS0000461807 Poa labillardierei species        accepted #> 7  NHMSYS0000461808      Poa ligularis species        accepted #> 8  NHMSYS0000461817     Poa sieberiana species        accepted #> 9  NHMSYS0000461805         Poa gunnii species        accepted #> 10 NHMSYS0000461801     Poa costiniana species        accepted"},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"coerce-numericsalphanumerics-to-taxon-ids","dir":"Articles","previous_headings":"","what":"Coerce numerics/alphanumerics to taxon IDs","title":"Introduction to taxize","text":"’ve also introduced v0.5 ability coerce numerics alphanumerics taxonomic ID classes usually retrieved via get_*() functions. example, adfafd .*() functions quick check web resource make sure ’s real ID. However, can turn check , making coercion much faster:","code":"as.gbifid(get_gbifid(\"Poa annua\")) # already a uid, returns the same #> ══  1 queries  ═══════════════ #>    gbifid             scientificname    rank   status matchtype #> 1 2704179               Poa annua L. species ACCEPTED     EXACT #> 2 8422205 Poa annua Cham. & Schltdl. species  SYNONYM     EXACT #> 3 7730008           Poa annua Steud. species DOUBTFUL     EXACT #> ✖  Not Found:  Poa annua #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 0  #> ● Not Found: 1 #> [1] NA #> attr(,\"class\") #> [1] \"gbifid\" #> attr(,\"match\") #> [1] \"not found\" #> attr(,\"multiple_matches\") #> [1] TRUE #> attr(,\"pattern_match\") #> [1] FALSE as.gbifid(2704179) # numeric #> [1] \"2704179\" #> attr(,\"class\") #> [1] \"gbifid\" #> attr(,\"match\") #> [1] \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE #> attr(,\"pattern_match\") #> [1] FALSE #> attr(,\"uri\") #> [1] \"https://www.gbif.org/species/2704179\" as.gbifid(\"2704179\") # character #> [1] \"2704179\" #> attr(,\"class\") #> [1] \"gbifid\" #> attr(,\"match\") #> [1] \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE #> attr(,\"pattern_match\") #> [1] FALSE #> attr(,\"uri\") #> [1] \"https://www.gbif.org/species/2704179\" as.gbifid(list(\"2704179\",\"2435099\",\"3171445\")) # list, either numeric or character #> [1] \"2704179\" \"2435099\" \"3171445\" #> attr(,\"class\") #> [1] \"gbifid\" #> attr(,\"match\") #> [1] \"found\" \"found\" \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE FALSE FALSE #> attr(,\"pattern_match\") #> [1] FALSE FALSE FALSE #> attr(,\"uri\") #> [1] \"https://www.gbif.org/species/2704179\" #> [2] \"https://www.gbif.org/species/2435099\" #> [3] \"https://www.gbif.org/species/3171445\" system.time( replicate(3, as.gbifid(c(\"2704179\",\"2435099\",\"3171445\"), check=TRUE)) ) #>    user  system elapsed  #>   0.092   0.003   4.850 system.time( replicate(3, as.gbifid(c(\"2704179\",\"2435099\",\"3171445\"), check=FALSE)) ) #>    user  system elapsed  #>   0.002   0.000   0.002"},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"what-taxa-are-downstream-of-my-taxon-of-interest","dir":"Articles","previous_headings":"","what":"What taxa are downstream of my taxon of interest?","title":"Introduction to taxize","text":"someone taxonomic specialist particular taxon likely know children taxa within family, within genus. task becomes especially unwieldy large number taxa downstream. can course go website like Wikispecies Encyclopedia Life get downstream names. However, taxize provides easy way programatically search downstream taxa Integrated Taxonomic Information System.","code":"apis_itis_id <- 154395 # id for Apis, fetched beforehand to save time here downstream(apis_itis_id, downto = \"species\", db = \"itis\") #> $`154395` #>       tsn parentname parenttsn rankname          taxonname rankid #> 1 1128092       Apis    154395  species     Apis laboriosa    220 #> 2  154396       Apis    154395  species     Apis mellifera    220 #> 3  763550       Apis    154395  species Apis andreniformis    220 #> 4  763551       Apis    154395  species        Apis cerana    220 #> 5  763552       Apis    154395  species       Apis dorsata    220 #> 6  763553       Apis    154395  species        Apis florea    220 #> 7  763554       Apis    154395  species Apis koschevnikovi    220 #> 8  763555       Apis    154395  species   Apis nigrocincta    220 #>  #> attr(,\"class\") #> [1] \"downstream\" #> attr(,\"db\") #> [1] \"itis\""},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"direct-children","dir":"Articles","previous_headings":"","what":"Direct children","title":"Introduction to taxize","text":"may sometimes want direct children. got covered front, methods ITIS NCBI. direct children (genera case) Pinaceae using NCBI data:","code":"children(\"Pinaceae\", db = \"ncbi\") #> $Pinaceae #>    childtaxa_id childtaxa_name childtaxa_rank #> 1        123600     Nothotsuga          genus #> 2         64685        Cathaya          genus #> 3          3358          Tsuga          genus #> 4          3356    Pseudotsuga          genus #> 5          3354    Pseudolarix          genus #> 6          3337          Pinus          genus #> 7          3328          Picea          genus #> 8          3325          Larix          genus #> 9          3323     Keteleeria          genus #> 10         3321         Cedrus          genus #> 11         3319          Abies          genus #>  #> attr(,\"class\") #> [1] \"children\" #> attr(,\"db\") #> [1] \"ncbi\""},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"get-ncbi-id-from-genbank-ids","dir":"Articles","previous_headings":"","what":"Get NCBI ID from GenBank Ids","title":"Introduction to taxize","text":"accession numbers gi numbers","code":"genbank2uid(id = 'AJ748748') #> [[1]] #> [1] \"282199\" #> attr(,\"class\") #> [1] \"uid\" #> attr(,\"match\") #> [1] \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE #> attr(,\"pattern_match\") #> [1] FALSE #> attr(,\"uri\") #> [1] \"https://www.ncbi.nlm.nih.gov/taxonomy/282199\" #> attr(,\"name\") #> [1] \"Nereida ignava 16S rRNA gene, type strain 2SM4T\" genbank2uid(id = 62689767) #> [[1]] #> [1] \"282199\" #> attr(,\"class\") #> [1] \"uid\" #> attr(,\"match\") #> [1] \"found\" #> attr(,\"multiple_matches\") #> [1] FALSE #> attr(,\"pattern_match\") #> [1] FALSE #> attr(,\"uri\") #> [1] \"https://www.ncbi.nlm.nih.gov/taxonomy/282199\" #> attr(,\"name\") #> [1] \"Nereida ignava 16S rRNA gene, type strain 2SM4T\""},{"path":"https://docs.ropensci.org/taxize/articles/taxize.html","id":"matching-species-tables-with-different-taxonomic-resolution","dir":"Articles","previous_headings":"","what":"Matching species tables with different taxonomic resolution","title":"Introduction to taxize","text":"Biologist often need match different sets data tied species. example, trait-based approaches promising tool ecology. One problem abundance data must matched trait databases. two data tables may contain species information different taxonomic levels possibly data must aggregated joint taxonomic level, data can merged. taxize can help data-cleaning step, providing reproducible workflow: can use mentioned classification-function retrieve taxonomic hierarchy search hierarchies - downwards matches. example match species names three different taxonomic levels. find direct match (Gammarus roeseli), lucky. can also match Gammaridae Gammarus roeseli, lower taxonomic level. comprehensive realistic example (matching trait table abundance table) given vignette matching.","code":"A <- \"gammarus roeseli\"  B1 <- \"gammarus roeseli\" B2 <- \"gammarus\" B3 <- \"gammaridae\"  A_clas <- classification(A, db = 'ncbi') #> ══  1 queries  ═══════════════ #> ✔  Found:  gammarus+roeseli #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 B1_clas <- classification(B1, db = 'ncbi') #> ══  1 queries  ═══════════════ #> ✔  Found:  gammarus+roeseli #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 B2_clas <- classification(B2, db = 'ncbi') #> ══  1 queries  ═══════════════ #> ✔  Found:  gammarus #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 B3_clas <- classification(B3, db = 'ncbi') #> ══  1 queries  ═══════════════ #> ✔  Found:  gammaridae #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0  B1[match(A, B1)] #> [1] \"gammarus roeseli\" A_clas[[1]]$rank[tolower(A_clas[[1]]$name) %in% B2] #> [1] \"genus\" A_clas[[1]]$rank[tolower(A_clas[[1]]$name) %in% B3] #> [1] \"family\""},{"path":"https://docs.ropensci.org/taxize/articles/taxonomic_ranks.html","id":"ncbi-is-weird","dir":"Articles","previous_headings":"","what":"NCBI is weird","title":"taxonomic ranks","text":"NCBI taxonomy (https://www.ncbi.nlm.nih.gov/taxonomy) outlier among taxonomic data sources. use lot rank names hold information placement taxon within taxonomic hierarchy. common rank. ’ve retrieved taxonomic information NCBI may noticed supposed rank name. get data NCBI taxize certainly run rank; just know doesn’t tell falls within taxonomic hierarchy. can however use classification() hopefully get rank names hold actual information. Another one holds information started become common NCBI clade. ’s started replace rank least cases. far can tell rank name also holds information ’s placement within taxonomic hierarchy.","code":""},{"path":"https://docs.ropensci.org/taxize/articles/taxonomic_ranks.html","id":"downstream","dir":"Articles","previous_headings":"","what":"Downstream","title":"taxonomic ranks","text":"downstream() related functions taxize require rank given downto parameter, says want taxonomic names particular rank. ranks useful downto parameter. include “rank”, “unspecified”, “unranked”, “clade”; possibly . can’t used rank placement hierarchy - can anywhere hierarchy. work around, try looking taxonomic hierarchy taxa interest using classification() data providers website see ’s taxonomic rank rank want, use rank combination setting intermediate=TRUE downstream() function call. intermediate data can fetch data need.","code":""},{"path":"https://docs.ropensci.org/taxize/articles/taxonomic_ranks.html","id":"rank-information-within-taxize","dir":"Articles","previous_headings":"","what":"Rank information within taxize","title":"taxonomic ranks","text":"taxize maintains taxonomic hierarchy reference within package. two: rank_ref: data.frame two columns around 45 rows (may increase decrease time incorporate take away ranks). ?rank_ref information rank_ref_zoo: specifically zoological rank systems; writing used WoRMS; rank_ref used data sources. ?rank_ref_zoo information reference rank information classification(), tax_name(), exported downstream functions. use rankid numeric column able filter data using <\/>/etc. often reference rank information inside helper functions which_rank() prune_too_low(), utility functions help filter results data providers rank information. manage two datasets using script inst/ignore/rank_ref_script.R package, ends updating dataset data/ folder package.","code":"head(rank_ref) #>   rankid                    ranks #> 1     01                   domain #> 2     05             superkingdom #> 3     10                  kingdom #> 4     20               subkingdom #> 5     25 infrakingdom,superphylum #> 6     30          phylum,division"},{"path":"https://docs.ropensci.org/taxize/articles/taxonomic_ranks.html","id":"let-us-know","dir":"Articles","previous_headings":"Rank information within taxize","what":"Let us know","title":"taxonomic ranks","text":"Let us know opening issue (https://github.com/ropensci/taxize/issues) think run issues rank information. common issues see ranks downstream() function data source specific functions support .","code":""},{"path":"https://docs.ropensci.org/taxize/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author. Eduard Szoecs. Author. Zachary Foster. Author, maintainer. Zebulun Arendsee. Author. Carl Boettiger. Contributor. Karthik Ram. Contributor. Ignasi Bartomeus. Contributor. John Baumgartner. Contributor. James O'Donnell. Contributor. Jari Oksanen. Contributor. Bastian Greshake Tzovaras. Contributor. Philippe Marchand. Contributor. Vinh Tran. Contributor. Maëlle Salmon. Contributor. Gaopeng Li. Contributor. Matthias Grenié. Contributor. . Funder.            https://ropensci.org/","code":""},{"path":"https://docs.ropensci.org/taxize/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scott Chamberlain Eduard Szocs (2013). taxize - taxonomic search retrieval R. F1000Research, 2:191. URL: https://f1000research.com/articles/2-191/v2 Scott Chamberlain, Eduard Szoecs, Zachary Foster, Zebulun Arendsee, Carl Boettiger, Karthik Ram, Ignasi Bartomeus, John Baumgartner, James O'Donnell, Jari Oksanen, Bastian Greshake Tzovaras, Philippe Marchand, Vinh Tran, Maëlle Salmon, Gaopeng Li, Matthias Grenié. (2020) taxize: Taxonomic information around web. R package version 0.9.98. https://github.com/ropensci/taxize","code":"@Article{,   title = {taxize - taxonomic search and retrieval in R},   journal = {F1000Research},   author = {{Scott Chamberlain} and {Eduard Szocs}},   year = {2013},   url = {https://f1000research.com/articles/2-191/v2}, } @Manual{,   title = {taxize: Taxonomic information from around the web},   author = {Scott Chamberlain and Eduard Szoecs and Zachary Foster and Zebulun Arendsee and Carl Boettiger and Karthik Ram and Ignasi Bartomeus and John Baumgartner and James O'Donnell and Jari Oksanen and Bastian Greshake Tzovaras and Philippe Marchand and Vinh Tran and Maëlle Salmon and Gaopeng Li and Matthias Grenié},   year = {2020},   note = {R package version 0.9.98},   url = {https://github.com/ropensci/taxize}, }"},{"path":"https://docs.ropensci.org/taxize/index.html","id":"taxize","dir":"","previous_headings":"","what":"Taxonomic Information from Around the Web","title":"Taxonomic Information from Around the Web","text":"taxize allows users search many taxonomic data sources species names (scientific common) download downstream taxonomic hierarchical information - among things. Package documentation: https://docs.ropensci.org/taxize/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/index.html","id":"stable-version-from-cran","dir":"","previous_headings":"Installation","what":"Stable version from CRAN","title":"Taxonomic Information from Around the Web","text":"","code":"install.packages(\"taxize\")"},{"path":"https://docs.ropensci.org/taxize/index.html","id":"development-version-from-github","dir":"","previous_headings":"Installation","what":"Development version from GitHub","title":"Taxonomic Information from Around the Web","text":"Windows users install Rtools first.","code":"install.packages(\"remotes\") remotes::install_github(\"ropensci/taxize\") library('taxize')"},{"path":[]},{"path":"https://docs.ropensci.org/taxize/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Taxonomic Information from Around the Web","text":"See CONTRIBUTING document.","code":""},{"path":"https://docs.ropensci.org/taxize/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Taxonomic Information from Around the Web","text":"Collected via GitHub Issues: honors contributors alphabetical order. Code contributors bold. afkoeppel - ahhurlbert - albnd - Alectoria - andzandz11 - anirvan - antagomir - arendsee - ArielGreiner - arw36 - ashenkin - ashiklom - benjaminschwetz - benmarwick - bienflorencia - binkySallly - bomeara - BridgettCollis - bw4sz - cboettig - cdeterman - ChrKoenig - chuckrp - clarson2191 - claudenozeres - cmzambranat - cparsania - daattali - DanielGMead - DarrenObbard - davharris - davidvilanova - diogoprov - dlebauer - dlenz1 - dougwyu - dschlaep - EDiLD - edwbaker - emhart - eregenyi - fdschneider - fgabriel1891 - fischhoff - fmichonneau - fozy81 - gedankenstuecke - gimoya - git-og - glaroc - gpli - gustavobio - hlapp - ibartomeus - Ironholds - jabard89 - jangorecki - jarioksa - jebyrnes - jeroen - jimmyodonnell - joelnitta - johnbaums - jonmcalder - jordancasey - josephwb - jsgosnell - JulietteLgls - jwilk - kamapu - karthik - katrinleinweber - KevCaz - kgturner - kmeverson - Koalha - ljvillanueva - maelle - Markus2015 - matutosi - mcsiple - MikkoVihtakari - millerjef - miriamgrace - mpnelsen - MUSEZOOLVERT - nate-d-olson - nmatzke - npch - ocstringham - p-neves - p-schaefer - padpadpadpad - paternogbc - patperu - pederengelstad - philippi - Phylloxera - pmarchand1 - pozsgaig - pssguy - raredd - rec3141 - Rekyt - RodgerG - rossmounce - sariya - sastoudt - scelmendorf - sckott - SimonGoring - snsheth - snubian - Squiercg - sunray1 - taddallas - tdjames1 - tmkurobe - toczydlowski - tpaulson1 - tpoisot - TrashBirdEcology - trvinh - vijaybarve - wcornwell - willpearse - wpetry - yhg926 - zachary-foster","code":""},{"path":"https://docs.ropensci.org/taxize/index.html","id":"road-map","dir":"","previous_headings":"","what":"Road map","title":"Taxonomic Information from Around the Web","text":"Check milestones see plan get done version.","code":""},{"path":"https://docs.ropensci.org/taxize/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Taxonomic Information from Around the Web","text":"Please report issues bugs. License: MIT Get citation information taxize R citation(package = 'taxize') Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/apg.html","id":null,"dir":"Reference","previous_headings":"","what":"Get APG names — apg","title":"Get APG names — apg","text":"Generic names replacements Angiosperm Phylogeny Group III system flowering plant classification.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get APG names — apg","text":"","code":"apgOrders(...)  apgFamilies(...)"},{"path":"https://docs.ropensci.org/taxize/reference/apg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get APG names — apg","text":"... Curl args passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get APG names — apg","text":"http://www.mobot.org/MOBOT/research/APweb/","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get APG names — apg","text":"","code":"if (FALSE) { head(apgOrders()) head(apgFamilies()) }"},{"path":"https://docs.ropensci.org/taxize/reference/apg_families.html","id":null,"dir":"Reference","previous_headings":"","what":"MOBOT family names — apg_families","title":"MOBOT family names — apg_families","text":"Family names replacements Angiosperm Phylogeny Website system flowering plant classification.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_families.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MOBOT family names — apg_families","text":"data frame 1705 rows 6 variables: family: family name synonym: accepted=FALSE, accepted name; accepted=TRUE, NA, name family accepted order: order name family accepted: logical, name family column accepted original: original data record APG website, mapping name family column new name, one accepted_name: accepted name. accepted names, combining accepted family column, new name synonym applicable","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_families.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MOBOT family names — apg_families","text":"http://www.mobot.org/MOBOT/research/APweb/","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_families.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MOBOT family names — apg_families","text":"dataset Version 14, incorporated 2020-06-03, generated using apgFamilies() (update script inst/ignore/apg_script.R)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup in the APGIII taxonomy and replace family names — apg_lookup","title":"Lookup in the APGIII taxonomy and replace family names — apg_lookup","text":"Lookup APGIII taxonomy replace family names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup in the APGIII taxonomy and replace family names — apg_lookup","text":"","code":"apg_lookup(taxa, rank = \"family\")"},{"path":"https://docs.ropensci.org/taxize/reference/apg_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup in the APGIII taxonomy and replace family names — apg_lookup","text":"taxa (character) Taxonomic name lookup synonym APGIII taxonomy. rank (character) Taxonomic rank lookup synonym . One family order.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup in the APGIII taxonomy and replace family names — apg_lookup","text":"APGIII family order name, original name name APG , NA match found","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup in the APGIII taxonomy and replace family names — apg_lookup","text":"Internally function, use datasets apg_families apg_orders - see descriptions data . functions apgOrders() apgFamilies() scraping current content http://www.mobot.org/MOBOT/research/APweb/ website datasets used function recent version APGIII, Version 14 (http://www.mobot.org/MOBOT/research/APweb/)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup in the APGIII taxonomy and replace family names — apg_lookup","text":"","code":"# New name found apg_lookup(taxa = \"Hyacinthaceae\", rank = \"family\") #> new name... #> [1] \"Asparagaceae\" # Name is the same apg_lookup(taxa = \"Poaceae\", rank = \"family\") #> name is the same... #> [1] \"Poaceae\" apg_lookup(taxa = \"Asteraceae\", rank = \"family\") #> name is the same... #> [1] \"Asteraceae\" # Name not found apg_lookup(taxa = \"Foobar\", rank = \"family\") #> no match found... #> [1] NA  # New name found apg_lookup(taxa = \"Acerales\", rank = \"order\") #> new name... #> [1] \"Sapindales\" # Name is the same apg_lookup(taxa = \"Acorales\", rank = \"order\") #> name is the same... #> [1] \"Acorales\" # Name not found apg_lookup(taxa = \"Foobar\", rank = \"order\") #> no match found... #> [1] NA"},{"path":"https://docs.ropensci.org/taxize/reference/apg_orders.html","id":null,"dir":"Reference","previous_headings":"","what":"MOBOT order names — apg_orders","title":"MOBOT order names — apg_orders","text":"Order names replacements Angiosperm Phylogeny Website system flowering plant classification.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_orders.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MOBOT order names — apg_orders","text":"data frame 576 rows 5 variables: order: order name synonym: accepted=FALSE, accepted name; accepted=TRUE, NA, name order accepted accepted: logical, name order column accepted original: original data record APG website, mapping name order column new name, one accepted_name: accepted name. accepted names, combining accepted order column, new name synonym applicable","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_orders.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MOBOT order names — apg_orders","text":"http://www.mobot.org/MOBOT/research/APweb/","code":""},{"path":"https://docs.ropensci.org/taxize/reference/apg_orders.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MOBOT order names — apg_orders","text":"dataset Version 14, incorporated 2020-06-03, generated using apgOrders() (update script inst/ignore/apg_script.R)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcode of Life taxonomic children — bold_children","title":"Barcode of Life taxonomic children — bold_children","text":"BEWARE: function scrapes data BOLD website, may unstable. , one day may work, next may fail. Open issue encounter error: https://github.com/ropensci/taxize/issues","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcode of Life taxonomic children — bold_children","text":"","code":"bold_children(id, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/bold_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcode of Life taxonomic children — bold_children","text":"id (integer) BOLD taxonomic identifier. length=1. required ... named curl options passed crul::verb-GET debugging","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcode of Life taxonomic children — bold_children","text":"list data.frame's","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcode of Life taxonomic children — bold_children","text":"","code":"if (FALSE) { # Osmia (genus): 253 children bold_children(id = 4940) # Momotus (genus): 3 children bold_children(id = 88899) # Momotus aequatorialis (species): no children bold_children(id = 115130) # Osmia sp1 (species): no children bold_children(id = 293378) # Arthropoda (phylum): 27 children bold_children(id = 82) # Psocodea (order): 51 children bold_children(id = 737139) # Megachilinae (subfamily): 2 groups (tribes: 3, genera: 60) bold_children(id = 4962) # Stelis (species): 78 taxa bold_children(id = 4952) }"},{"path":"https://docs.ropensci.org/taxize/reference/bold_downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all taxa names downstream in hierarchy for BOLD — bold_downstream","title":"Retrieve all taxa names downstream in hierarchy for BOLD — bold_downstream","text":"Retrieve taxa names downstream hierarchy BOLD","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all taxa names downstream in hierarchy for BOLD — bold_downstream","text":"","code":"bold_downstream(id, downto, intermediate = FALSE, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/bold_downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all taxa names downstream in hierarchy for BOLD — bold_downstream","text":"id (integer) One BOLD taxonomic identifiers downto (character) taxonomic level want go . See examples . taxonomic level case sensitive, spell correctly. See data(rank_ref) spelling. intermediate (logical) TRUE, return list length two target taxon rank names, additional list data.frame's intermediate taxonomic groups. Default: FALSE ... crul options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_downstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all taxa names downstream in hierarchy for BOLD — bold_downstream","text":"data.frame taxonomic information downstream family e.g., Order, Class, etc., intermediated=TRUE, list length two, target taxon rank names, intermediate names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_downstream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve all taxa names downstream in hierarchy for BOLD — bold_downstream","text":"BEWARE: function scrapes BOLD website, may unstable. , one day may work, next may fail. Open issue encounter error: https://github.com/ropensci/taxize/issues","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_downstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all taxa names downstream in hierarchy for BOLD — bold_downstream","text":"","code":"if (FALSE) { ## the genus Gadus bold_downstream(id = 3451, downto=\"species\")  bold_downstream(id = 443, downto=\"genus\") bold_downstream(id = 443, downto=\"genus\", intermediate=TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/bold_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Barcode of Life for taxonomic IDs — bold_search","title":"Search Barcode of Life for taxonomic IDs — bold_search","text":"Search Barcode Life taxonomic IDs","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Barcode of Life for taxonomic IDs — bold_search","text":"","code":"bold_search(   sci = NULL,   id = NULL,   fuzzy = FALSE,   dataTypes = \"basic\",   includeTree = FALSE,   response = FALSE,   name = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/bold_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Barcode of Life for taxonomic IDs — bold_search","text":"sci (character) One scientific names. id (integer) One BOLD taxonomic identifiers. fuzzy (logical) Whether use fuzzy search (default: FALSE). used name passed. dataTypes (character) Specifies datatypes returned. See Details options. variable ignored name parameter passed, used id parameter passed. includeTree (logical) TRUE (default: FALSE), returns list containing information parent taxa well specified taxon. used id passed. response (logical) Note response object returns curl call, useful debugging, getting detailed info API call. name Deprecated, see sci ... named curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Barcode of Life for taxonomic IDs — bold_search","text":"list data.frame's.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search Barcode of Life for taxonomic IDs — bold_search","text":"must provide one sci id function. parameters optional. Note passing sci, fuzzy can used well, id passed, fuzzy ignored, dataTypes includeTree can used. Options dataTypes parameter: returns data basic returns basic taxon information images returns specimen image. Includes copyright information, image URL, image metadata. stats Returns specimen sequence statistics. Includes public species count, public BIN count, public marker counts, public record count, specimen count, sequenced specimen count, barcode specimen count, species count, barcode species count. geo Returns collection site information. Includes country, collection site map. sequencinglabs Returns sequencing labs. Includes lab name, record count. depository Returns specimen depositories. Includes depository name, record count. thirdparty Returns information third parties. Includes wikipedia summary, wikipedia URL, GBIF map.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search Barcode of Life for taxonomic IDs — bold_search","text":"http://www.boldsystems.org/index.php/resources/api","code":""},{"path":"https://docs.ropensci.org/taxize/reference/bold_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Barcode of Life for taxonomic IDs — bold_search","text":"","code":"if (FALSE) { # A basic example bold_search(sci=\"Apis\") bold_search(sci=\"Agapostemon\") bold_search(sci=\"Poa\")  # Fuzzy search head(bold_search(sci=\"Po\", fuzzy=TRUE)) head(bold_search(sci=\"Aga\", fuzzy=TRUE))  # Many names bold_search(sci=c(\"Apis\",\"Puma concolor\")) nms <- names_list('species') bold_search(sci=nms)  # Searching by ID - dataTypes can be used, and includeTree can be used bold_search(id=88899) bold_search(id=88899, dataTypes=\"stats\") bold_search(id=88899, dataTypes=\"geo\") bold_search(id=88899, dataTypes=\"basic\") bold_search(id=88899, includeTree=TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/children.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve immediate children taxa for a given taxon name or ID. — children","title":"Retrieve immediate children taxa for a given taxon name or ID. — children","text":"function different downstream() collects immediate taxonomic children, downstream() collects taxonomic names specified taxonomic rank, e.g., getting species family.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve immediate children taxa for a given taxon name or ID. — children","text":"","code":"children(...)  # S3 method for default children(sci_id, db = NULL, rows = NA, x = NULL, ...)  # S3 method for tsn children(sci_id, db = NULL, ...)  # S3 method for wormsid children(sci_id, db = NULL, ...)  # S3 method for ids children(sci_id, db = NULL, ...)  # S3 method for uid children(sci_id, db = NULL, ...)  # S3 method for boldid children(sci_id, db = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve immediate children taxa for a given taxon name or ID. — children","text":"... args passed ritis::hierarchy_down(), ncbi_children(), worrms::wm_children(), bold_children() See functions parameters can passed . sci_id Vector taxa names (character) IDs (character numeric) query. db character; database query. One itis, ncbi, worms, bold. Note taxonomic data source identifiers, provide wrong db value identifier get result, likely wrong (expecting). using ncbi, recommend getting API key; see taxize-authentication rows (numeric) number 1 infinity. default NA, rows considered. Note parameter ignored pass taxonomic id acceptable classes: tsn. NCBI method function rows work. x Deprecated, see sci_id","code":""},{"path":"https://docs.ropensci.org/taxize/reference/children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve immediate children taxa for a given taxon name or ID. — children","text":"named list data.frames children names every supplied taxa. get NA match database.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/children.html","id":"ncbi","dir":"Reference","previous_headings":"","what":"ncbi","title":"Retrieve immediate children taxa for a given taxon name or ID. — children","text":"note db = \"ncbi\", set ambiguous = TRUE; , children taxa words like \"unclassified\", \"unknown\", \"uncultured\", \"sp.\" removed","code":""},{"path":"https://docs.ropensci.org/taxize/reference/children.html","id":"bold","dir":"Reference","previous_headings":"","what":"bold","title":"Retrieve immediate children taxa for a given taxon name or ID. — children","text":"BEWARE: db=\"bold\" scrapes BOLD website, may unstable. , one day may work, next may fail. Open issue encounter error: https://github.com/ropensci/taxize/issues","code":""},{"path":"https://docs.ropensci.org/taxize/reference/children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve immediate children taxa for a given taxon name or ID. — children","text":"","code":"if (FALSE) { # Plug in taxonomic IDs children(161994, db = \"itis\") children(8028, db = \"ncbi\") ## works with numeric if as character as well children(161994, db = \"itis\") children(88899, db = \"bold\") children(as.boldid(88899))  # Plug in taxon names children(\"Salmo\", db = 'itis') children(\"Salmo\", db = 'ncbi') children(\"Salmo\", db = 'worms') children(\"Salmo\", db = 'bold')  # Plug in IDs (id <- get_wormsid(\"Gadus\")) children(id)  # Many taxa sp <- c(\"Tragia\", \"Schistocarpha\", \"Encalypta\") children(sp, db = 'itis')  # Two data sources (ids <- get_ids(\"Apis\", db = c('ncbi','itis'))) children(ids) ## same result children(get_ids(\"Apis\", db = c('ncbi','itis')))  # Use the rows parameter children(\"Poa\", db = 'itis') children(\"Poa\", db = 'itis', rows=1)  # use curl options res <- children(\"Poa\", db = 'itis', rows=1, verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/class2tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list of classifications to a tree. — class2tree","title":"Convert a list of classifications to a tree. — class2tree","text":"function converts list hierarchies individual species single species taxonomic level matrix, calculates distance matrix based taxonomy alone, outputs either phylo dist object. See details information.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/class2tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list of classifications to a tree. — class2tree","text":"","code":"class2tree(input, varstep = TRUE, check = TRUE, ...)  # S3 method for classtree plot(x, ...)  # S3 method for classtree print(x, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/class2tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list of classifications to a tree. — class2tree","text":"input List classification data.frame's function classification() varstep Vary step lengths successive levels relative proportional loss number distinct classes. check TRUE, remove redundant levels different rows constant rows regard row different basal taxon (species). FALSE levels retained basal taxa (species) also must coded variables (columns). get warning species coded, can ignore intention. ... arguments passed hclust. x Input object print plot - output class2tree function.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/class2tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list of classifications to a tree. — class2tree","text":"object class \"classtree\" slots: phylo - resulting object, phylo object classification - classification data.frame, taxa rows, different classification levels columns distmat - Distance matrix names - names tips phylogeny Note execute resulting object, get phylo object. can get 3 slots calling directly, like output$names, etc.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/class2tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a list of classifications to a tree. — class2tree","text":"See vegan::taxa2dist(). Thanks Jari Oksanen making taxa2dist function pointing , Clarke & Warwick (1998, 2001), taxa2dist based . taxonomy tree created based clustering taxonomy ranks (e.g. strain, species, genus, ...), also utilizes actual taxon clades (e.g. mammals, plants reptiles, etc.). process function following: First, possible taxonomy ranks corresponding IDs given taxon collected input. , rank vectors taxa aligned, together become matrix columns ordered taxonomy ranks taxa rows rank vectors taxa. , rank matrix converted taxonomy ID matrix, missing rank pseudo ID previous rank. Finally, taxonomy ID matrix used cluster taxa similar taxonomy hierarchy together.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/class2tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a list of classifications to a tree. — class2tree","text":"","code":"if (FALSE) { spnames <- c('Quercus robur', 'Iris oratoria', 'Arachis paraguariensis',  'Helianthus annuus','Madia elegans','Lupinus albicaulis',  'Pinus lambertiana') out <- classification(spnames, db='itis') tr <- class2tree(out) plot(tr)  spnames <- c('Klattia flava', 'Trollius sibiricus',  'Arachis paraguariensis',  'Tanacetum boreale', 'Gentiana yakushimensis','Sesamum schinzianum',  'Pilea verrucosa','Tibouchina striphnocalyx','Lycium dasystemum',  'Berkheya echinacea','Androcymbium villosum',  'Helianthus annuus','Madia elegans','Lupinus albicaulis',  'Pinus lambertiana') out <- classification(spnames, db='ncbi') tr <- class2tree(out) plot(tr) }"},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"Retrieve taxonomic hierarchy given taxon ID.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"","code":"classification(...)  # S3 method for default classification(   sci_id,   db = NULL,   callopts = list(),   return_id = TRUE,   rows = NA,   x = NULL,   ... )  # S3 method for tsn classification(id, return_id = TRUE, ...)  # S3 method for uid classification(   id,   callopts = list(),   return_id = TRUE,   batch_size = 50,   max_tries = 3,   ... )  # S3 method for eolid classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for tpsid classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for gbifid classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for nbnid classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for tolid classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for wormsid classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for natservid classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for boldid classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for wiki classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for pow classification(id, callopts = list(), return_id = TRUE, ...)  # S3 method for ids classification(id, ...)  # S3 method for classification cbind(...)  # S3 method for classification rbind(...)  # S3 method for classification_ids cbind(...)  # S3 method for classification_ids rbind(...)"},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"... classification: arguments passed get_tsn(), get_uid(), get_eolid(), get_tpsid(), get_gbifid(), get_wormsid(), get_natservid(), get_wormsid(), get_wiki(), get_pow(). rbind.classification cbind.classification: one objects class classification sci_id Vector taxa names (character) IDs (character numeric) query. db = \"eol\", EOL expects pass taxon id, called eolid output get_eolid(). db character; database query. either ncbi, itis, eol, tropicos, gbif, nbn, worms, natserv, bold, wiki, pow. Note taxonomic data source , identifiers, provide wrong db value identifier get result, likely wrong (expecting). using ncbi, /tropicos, recommend getting API key; see taxize-authentication callopts Curl options passed crul::verb-GET return_id (logical) TRUE (default), return taxon id well name rank taxa lineage returned. Ignored natserv return IDs taxonomic classification data. rows (numeric) number 1 infinity. default NA, rows considered. Note parameter ignored pass taxonomic id instead name class character. x Deprecated, see sci_id id character; identifiers, returned get_tsn(), get_uid(), get_eolid(), get_tpsid(), get_gbifid(), get_tolid(), get_wormsid(), get_natservid(), get_wormsid(), get_wiki(), get_pow() batch_size (numeric) NCBI queries, specify number IDs lookup query. max_tries (numeric) NCBI queries, number times particular query attempted, assuming first work.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"named list data.frames taxonomic classification every supplied taxa.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"IDs supplied directly (get_* functions) must specify type ID. timeout 1/3 seconds queries NCBI. BEWARE: Right now, NBN return queried taxon classification. can attach quite easily course. behavior different data sources.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"lots-of-results","dir":"Reference","previous_headings":"","what":"Lots of results","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"may happen sometimes get results back query show data.frame screen. advice refine query cases. data source basis can attempt help make easier refine queries, whether data provider (unlikely happen), code package (likely) - let us know run many results problem see can .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"See taxize-authentication","code":""},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"eol","dir":"Reference","previous_headings":"","what":"EOL","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"EOL good failure behavior. example, submit ID exist return 500 HTTP error, appropriate error; probably ID exist database, know sure. fun?","code":""},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"ncbi-rate-limits","dir":"Reference","previous_headings":"","what":"NCBI Rate limits","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"case run NCBI errors due rate limit exceeded, see taxize_options(), can set ncbi_sleep.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"http-version-for-ncbi-requests","dir":"Reference","previous_headings":"","what":"HTTP version for NCBI requests","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the taxonomic hierarchy for a given taxon ID. — classification","text":"","code":"if (FALSE) { # Plug in taxon IDs classification(9606, db = 'ncbi') classification(c(9606, 55062), db = 'ncbi') classification(129313, db = 'itis') classification(6985636, db = 'eol') classification(126436, db = 'worms') classification('Helianthus annuus', db = 'pow') classification('Helianthus', db = 'pow') classification('Asteraceae', db = 'pow') classification(\"134717\", db = 'natserv') classification(c(2704179, 6162875, 8286319, 2441175, 731), db = 'gbif') classification(25509881, db = 'tropicos') classification(\"NBNSYS0000004786\", db = 'nbn') classification(as.nbnid(\"NBNSYS0000004786\"), db = 'nbn') classification(3930798, db = 'tol')  ## works the same if IDs are in class character classification(c(\"2704179\", \"2441176\"), db = 'gbif') classification(\"Agapostemon\", db = \"bold\")  # wikispecies classification(\"Malus domestica\", db = \"wiki\") classification(\"Pinus contorta\", db = \"wiki\") classification(\"Pinus contorta\", db = \"wiki\", wiki_site = \"commons\") classification(\"Pinus contorta\", db = \"wiki\", wiki_site = \"pedia\") classification(\"Pinus contorta\", db = \"wiki\", wiki_site = \"pedia\",   wiki = \"fr\")  classification(get_wiki(\"Malus domestica\", \"commons\")) classification(get_wiki(\"Malus domestica\", \"species\")) classification(c(\"Pinus contorta\", \"Malus domestica\"), db = \"wiki\")  # Plug in taxon names ## in this case, we use get_*() fxns internally to first get taxon IDs classification(\"Oncorhynchus mykiss\", db = \"eol\") classification(c(\"Chironomus riparius\", \"aaa vva\"), db = 'ncbi') classification(c(\"Chironomus riparius\", \"aaa vva\"), db = 'ncbi',   messages=FALSE) classification(c(\"Chironomus riparius\", \"aaa vva\"), db = 'itis') classification(c(\"Chironomus riparius\", \"aaa vva\"), db = 'itis',   messages=FALSE) classification(c(\"Chironomus riparius\", \"aaa vva\"), db = 'eol') classification(\"Alopias vulpinus\", db = 'nbn') classification('Gadus morhua', db = 'worms') classification('Aquila chrysaetos', db = 'natserv') classification('Gadus morhua', db = 'natserv') classification('Pomatomus saltatrix', db = 'natserv') classification('Aquila chrysaetos', db = 'natserv') classification(c(\"Chironomus riparius\", \"asdfasdfsfdfsd\"), db = 'gbif') classification(\"Chironomus\", db = 'tol') classification(\"Poa annua\", db = 'tropicos')  # Use methods for get_uid, get_tsn, get_eolid, get_tpsid classification(get_uid(c(\"Chironomus riparius\", \"Puma concolor\")))  classification(get_uid(c(\"Chironomus riparius\", \"aaa vva\"))) classification(get_tsn(c(\"Chironomus riparius\", \"aaa vva\"))) classification(get_tsn(c(\"Chironomus riparius\", \"aaa vva\"),   messages = FALSE)) classification(get_eolid(c(\"Chironomus riparius\", \"aaa vva\"))) classification(get_tpsid(c(\"Poa annua\", \"aaa vva\"))) classification(get_gbifid(c(\"Poa annua\", \"Bison bison\")))  # Pass many ids from class \"ids\" (out <- get_ids(\"Puma concolor\", db = c('ncbi','gbif'))) (cl <- classification(out))  # Bind width-wise from class classification_ids cbind(cl)  # Bind length-wise rbind(cl)  # Many names to get_ids (out <- get_ids(c(\"Puma concolor\",\"Accipiter striatus\"),   db = c('ncbi','itis'))) (cl <- classification(out)) rbind(cl) ## cbind with so many names results in some messy data cbind(cl) ## so you can turn off return_id cbind( classification(out, return_id=FALSE) )  (cl_uid <- classification(get_uid(c(\"Puma concolor\",   \"Accipiter striatus\")), return_id=FALSE)) rbind(cl_uid) cbind(cl_uid) ## cbind works a bit odd when there are lots of ranks without names (cl_uid <- classification(get_uid(c(\"Puma concolor\",\"Accipiter striatus\")),   return_id=TRUE)) cbind(cl_uid)  (cl_tsn <- classification(get_tsn(c(\"Puma concolor\",\"Accipiter striatus\")))) rbind(cl_tsn) cbind(cl_tsn)  (tsns <- get_tsn(c(\"Puma concolor\",\"Accipiter striatus\"))) (cl_tsns <- classification(tsns)) cbind(cl_tsns)  # NBN data (res <- classification(c(\"Alopias vulpinus\",\"Pinus sylvestris\"),   db = 'nbn')) rbind(res) cbind(res)  # Return taxonomic IDs ## the return_id parameter is logical, and you can turn it on or off. ## It's TRUE by default classification(c(\"Alopias vulpinus\",\"Pinus sylvestris\"), db = 'ncbi',   return_id = TRUE) classification(c(\"Alopias vulpinus\",\"Pinus sylvestris\"), db = 'ncbi',   return_id = FALSE)  # Use rows parameter to select certain classification('Poa annua', db = 'tropicos') classification('Poa annua', db = 'tropicos', rows=1:4) classification('Poa annua', db = 'tropicos', rows=1) classification('Poa annua', db = 'tropicos', rows=6)  # Queries of many IDs are processed in batches for NCBI ids <- c(\"13083\", \"2650392\", \"1547764\", \"230054\", \"353934\", \"656984\",  \"271789\", \"126272\", \"184644\", \"73213\", \"662816\", \"1161803\", \"1239353\",  \"59420\", \"665675\", \"866969\", \"1091219\", \"1431218\", \"1471898\",  \"864321\", \"251768\", \"2486276\", \"2068772\", \"1825808\", \"2006532\",  \"128287\", \"1195738\", \"1084683\", \"1886461\", \"508296\", \"377247\",  \"1489665\", \"329325\", \"219243\", \"1176946\", \"339893\", \"197933\",  \"174510\", \"1704048\", \"212897\", \"154842\", \"1239280\", \"260135\",  \"405735\", \"1566412\", \"2083462\", \"651348\", \"983204\", \"165380\",  \"2338856\", \"2068760\", \"167262\", \"34229\", \"1213340\", \"478939\",  \"1933585\", \"49951\", \"1277794\", \"1671089\", \"1502538\", \"362355\",  \"746473\", \"242879\", \"158219\", \"313664\", \"2093188\", \"1541232\",  \"584742\", \"1331091\", \"147639\", \"284492\", \"75642\", \"1412882\",  \"391782\", \"1406855\", \"434506\", \"2053357\", \"217315\", \"1444328\",  \"329249\", \"2294004\", \"84942\", \"324458\", \"538247\", \"69452\", \"49170\",  \"1993845\", \"261646\", \"127633\", \"228146\", \"1420004\", \"1629772\",  \"577055\", \"697062\", \"231660\", \"648380\", \"554953\", \"746496\", \"2602969\") result <- classification(ids, db = 'ncbi') }  if (FALSE) { # Fails without db param set # classification(315576) }"},{"path":"https://docs.ropensci.org/taxize/reference/col-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"COL defunct functions — col-defunct","title":"COL defunct functions — col-defunct","text":"COL introduced rate limiting recently 2019 - made API essentially unusable - COL+ coming soon incorporate stable","code":""},{"path":"https://docs.ropensci.org/taxize/reference/col-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COL defunct functions — col-defunct","text":"","code":"as.colid(...)  col_children(...)  col_classification(...)  col_downstream(...)  col_search(...)  get_colid(...)  get_colid_(...)"},{"path":"https://docs.ropensci.org/taxize/reference/col-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"COL defunct functions — col-defunct","text":"... ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":null,"dir":"Reference","previous_headings":"","what":"Get scientific names from common names. — comm2sci","title":"Get scientific names from common names. — comm2sci","text":"Get scientific names common names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get scientific names from common names. — comm2sci","text":"","code":"comm2sci(...)  # S3 method for default comm2sci(   com,   db = \"ncbi\",   itisby = \"search\",   simplify = TRUE,   commnames = NULL,   ... )  # S3 method for tsn comm2sci(id, db = \"ncbi\", itisby = \"search\", simplify = TRUE, ...)  # S3 method for uid comm2sci(id, db = \"ncbi\", itisby = \"search\", simplify = TRUE, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get scientific names from common names. — comm2sci","text":"... arguments passed internal methods. com One common names partial names. db Data source, one \"ncbi\" (default), \"itis\", \"tropicos\", \"eol\", \"worms\". using ncbi, recommend getting API key; see taxize-authentication itisby Search common names across entire names (search, default), beginning names (begin), end names (end). simplify (logical) TRUE, simplify output vector names. FALSE, return variable formats different sources, usually data.frame. commnames Deprecated, see com id taxon identifiers, returned get_tsn() get_uid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get scientific names from common names. — comm2sci","text":"simplify=TRUE, list scientific names, list labeled input names. simplify=FALSE, data.frame columns vary data source. character(0) match","code":""},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get scientific names from common names. — comm2sci","text":"data sources ITIS NCBI can pass common names directly, use get_uid() get_tsn() get ids first, pass fxn. data sources, can pass common names directly.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Get scientific names from common names. — comm2sci","text":"See taxize-authentication help authentication","code":""},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"http-version-for-ncbi-requests","dir":"Reference","previous_headings":"","what":"HTTP version for NCBI requests","title":"Get scientific names from common names. — comm2sci","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"rate-limits","dir":"Reference","previous_headings":"","what":"Rate limits","title":"Get scientific names from common names. — comm2sci","text":"case run errors due rate limit exceeded, see taxize_options(), can set ncbi_sleep.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get scientific names from common names. — comm2sci","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/comm2sci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get scientific names from common names. — comm2sci","text":"","code":"if (FALSE) { comm2sci(com='american black bear') comm2sci(com='american black bear', simplify = FALSE) comm2sci(com='black bear', db='itis') comm2sci(com='american black bear', db='itis') comm2sci(com='annual blue grass', db='tropicos') comm2sci(com=c('annual blue grass','tree of heaven'), db='tropicos') comm2sci('blue whale', db = \"worms\") comm2sci(c('blue whale', 'dwarf surfclam'), db = \"worms\")  # ncbi: pass in uid's from get_uid() directly x <- get_uid(\"western capercaillie\", modifier = \"Common Name\") comm2sci(x) # itis: pass in tsn's from get_tsn() directly x <- get_tsn(c(\"Louisiana black bear\", \"american crow\"),   searchtype = \"common\") comm2sci(x) }"},{"path":"https://docs.ropensci.org/taxize/reference/downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the downstream taxa for a given taxon name or ID. — downstream","title":"Retrieve the downstream taxa for a given taxon name or ID. — downstream","text":"function uses loop continually collect children taxa taxonomic rank specify downto parameter. can get data ITIS (itis), GBIF (gbif), NCBI (ncbi), WORMS (worms), BOLD (bold). method exposed four services getting taxa specific taxonomic rank, .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the downstream taxa for a given taxon name or ID. — downstream","text":"","code":"downstream(...)  # S3 method for default downstream(   sci_id,   db = NULL,   downto = NULL,   intermediate = FALSE,   rows = NA,   x = NULL,   ... )  # S3 method for tsn downstream(sci_id, db = NULL, downto = NULL, intermediate = FALSE, ...)  # S3 method for gbifid downstream(   sci_id,   db = NULL,   downto = NULL,   intermediate = FALSE,   limit = 100,   start = NULL,   ... )  # S3 method for uid downstream(sci_id, db = NULL, downto = NULL, intermediate = FALSE, ...)  # S3 method for wormsid downstream(sci_id, db = NULL, downto = NULL, intermediate = FALSE, ...)  # S3 method for boldid downstream(sci_id, db = NULL, downto = NULL, intermediate = FALSE, ...)  # S3 method for ids downstream(sci_id, db = NULL, downto = NULL, intermediate = FALSE, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the downstream taxa for a given taxon name or ID. — downstream","text":"... args passed itis_downstream(), gbif_downstream(), ncbi_downstream(), worms_downstream(), bold_downstream() sci_id Vector taxa names (character) IDs (character numeric) query. db character; database query. One itis, gbif, ncbi, worms, bold. Note taxonomic  data source identifiers, provide wrong db value identifier get result, likely wrong (expecting). using ncbi, recommend getting API key; see taxize-authentication downto taxonomic rank go . One : 'superkingdom', 'kingdom', 'subkingdom','infrakingdom','phylum','division','subphylum', 'subdivision','infradivision', 'superclass','class','subclass','infraclass', 'superorder','order','suborder','infraorder','superfamily','family', 'subfamily','tribe','subtribe','genus','subgenus','section','subsection', 'species group','species','subspecies','variety','form','subvariety','race', 'stirp', 'morph','aberration','subform', 'unspecified', 'rank' intermediate (logical) TRUE, return list length two target taxon rank names, additional list data.frame's intermediate taxonomic groups. Default: FALSE rows (numeric) number 1 infinity. default NA, rows considered. Note parameter ignored pass taxonomic id acceptable classes: tsn. x Deprecated, see sci_id limit Number records return. Applies gbif . default: 100. max: 1000. use combination start parameter start Record number start . Applies gbif . default: 0. use combination limit parameter","code":""},{"path":"https://docs.ropensci.org/taxize/reference/downstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the downstream taxa for a given taxon name or ID. — downstream","text":"named list data.frames downstream names every supplied taxa. get NA match database.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/downstream.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Retrieve the downstream taxa for a given taxon name or ID. — downstream","text":"See taxize-authentication help authentication","code":""},{"path":"https://docs.ropensci.org/taxize/reference/downstream.html","id":"bold","dir":"Reference","previous_headings":"","what":"bold","title":"Retrieve the downstream taxa for a given taxon name or ID. — downstream","text":"BEWARE: db=\"bold\" scrapes BOLD website, may unstable. , one day may work, next may fail. Open issue encounter error: https://github.com/ropensci/taxize/issues","code":""},{"path":"https://docs.ropensci.org/taxize/reference/downstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the downstream taxa for a given taxon name or ID. — downstream","text":"","code":"if (FALSE) { # Plug in taxon IDs downstream(125732, db = 'worms', downto = 'species') downstream(3451, db = 'bold', downto = 'species')  if (interactive()) {  # Plug in taxon names downstream(\"Apis\", db = 'ncbi', downto = 'species') downstream(\"Apis\", db = 'itis', downto = 'species') downstream(\"Apis\", db = 'bold', downto = 'species') downstream(\"Gadus\", db = 'worms', downto = 'species') downstream(c(\"Apis\",\"Epeoloides\"), db = 'itis', downto = 'species') downstream(\"Ursus\", db = 'gbif', downto = 'species') downstream(get_gbifid(\"Ursus\"), db = 'gbif', downto = 'species')  # Many taxa sp <- names_list(\"genus\", 3) downstream(sp, db = 'itis', downto = 'species') downstream(sp, db = 'gbif', downto = 'species')  # Both data sources ids <- get_ids(\"Apis\", db = c('gbif','itis')) downstream(ids, downto = 'species') ## same result downstream(get_ids(\"Apis\", db = c('gbif','itis')), downto = 'species')  # Collect intermediate names ## itis downstream('Bangiophyceae', db=\"itis\", downto=\"genus\") downstream('Bangiophyceae', db=\"itis\", downto=\"genus\", intermediate=TRUE) downstream(get_tsn('Bangiophyceae'), downto=\"genus\") downstream(get_tsn('Bangiophyceae'), downto=\"genus\", intermediate=TRUE)  # Use the rows parameter ## note how in the second function call you don't get the prompt downstream(\"Poa\", db = 'gbif', downto=\"species\") downstream(\"Poa\", db = 'gbif', downto=\"species\", rows=1)  # use curl options res <- downstream(\"Apis\", db = 'gbif', downto = 'species', verbose = TRUE)  # Pagination # GBIF limits queries to a maximum of 1000 records per request, so if # there's more than 1000, use the start parameter # Piper, taxonKey = 3075433 z1 <- downstream(3075433, db = 'gbif', downto = \"species\", limit=1000) z2 <- downstream(3075433, db = 'gbif', downto = \"species\", limit=1000,   start=1000) z3 <- downstream(3075433, db = 'gbif', downto = \"species\", limit=1000,   start=2000) z4 <- downstream(3075433, db = 'gbif', downto = \"species\", limit=1000,   start=3000) NROW(rbind(z1[[1]], z2[[1]], z3[[1]], z4[[1]])) }}"},{"path":"https://docs.ropensci.org/taxize/reference/eol_dataobjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Given the identifier for a data object, return all metadata about the object — eol_dataobjects","title":"Given the identifier for a data object, return all metadata about the object — eol_dataobjects","text":"Given identifier data object, return metadata object","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_dataobjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given the identifier for a data object, return all metadata about the object — eol_dataobjects","text":"","code":"eol_dataobjects(id, taxonomy = TRUE, language = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/eol_dataobjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given the identifier for a data object, return all metadata about the object — eol_dataobjects","text":"id (character) EOL data object identifier taxonomy (logical) Whether return taxonomy details different taxon hierarchy providers, array named taxonconcepts language (character) provides results specified language. one ms, de, en, es, fr, gl, , nl, nb, oc, pt-BR, sv, tl, mk, sr, uk, ar, zh-Hans, zh-Hant, ko ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_dataobjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given the identifier for a data object, return all metadata about the object — eol_dataobjects","text":"list, optionally data.frame taxonomy=TRUE","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_dataobjects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Given the identifier for a data object, return all metadata about the object — eol_dataobjects","text":"possible return JSON XML EOL API. However, function returns JSON now.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_dataobjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Given the identifier for a data object, return all metadata about the object — eol_dataobjects","text":"","code":"if (FALSE) { eol_dataobjects(id = 7561533)  # curl options eol_dataobjects(id = 7561533, verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/eol_hierarchy-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the taxonomic hierarchy from given EOL taxonID. — eol_hierarchy","title":"Retrieve the taxonomic hierarchy from given EOL taxonID. — eol_hierarchy","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_hierarchy-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the taxonomic hierarchy from given EOL taxonID. — eol_hierarchy","text":"","code":"eol_hierarchy(...)"},{"path":"https://docs.ropensci.org/taxize/reference/eol_invasive-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for presence of taxonomic names in EOL invasive species databases. — eol_invasive","title":"Search for presence of taxonomic names in EOL invasive species databases. — eol_invasive","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_invasive-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for presence of taxonomic names in EOL invasive species databases. — eol_invasive","text":"","code":"eol_invasive(...)"},{"path":"https://docs.ropensci.org/taxize/reference/eol_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for pages in EOL database using a taxonconceptID. — eol_pages","title":"Search for pages in EOL database using a taxonconceptID. — eol_pages","text":"Search pages EOL database using taxonconceptID.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for pages in EOL database using a taxonconceptID. — eol_pages","text":"","code":"eol_pages(   taxonconceptID,   images_per_page = NULL,   images_page = NULL,   videos_per_page = NULL,   videos_page = NULL,   sounds_per_page = NULL,   sounds_page = NULL,   maps_per_page = NULL,   maps_page = NULL,   texts_per_page = NULL,   texts_page = NULL,   subjects = \"overview\",   licenses = \"all\",   details = FALSE,   common_names = FALSE,   synonyms = FALSE,   references = FALSE,   taxonomy = TRUE,   vetted = 0,   cache_ttl = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/eol_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for pages in EOL database using a taxonconceptID. — eol_pages","text":"taxonconceptID (numeric) taxonconceptID, also page number images_per_page (integer) number returned image objects (0-75) images_page (integer) images page videos_per_page (integer) number returned video objects (0-75) videos_page (integer) videos page sounds_per_page (integer) number returned sound objects (0-75) sounds_page (integer) sounds page maps_per_page (integer) number returned map objects (0-75) maps_page (integer) maps page texts_per_page (integer) number returned text objects (0-75) texts_page (integer) texts page subjects 'overview' (default) return overview text (exists), pipe | delimited list subject names list EOL accepted subjects (e.g. TaxonBiology, FossilHistory), '' get text subject. Always returns overview text first result (one exists given context). licenses pipe | delimited list licenses '' (default) get objects license. Licenses abbreviated cc- Creative Commons licenses. Visit site information various licenses offer. details Include metadata data objects. (Default: FALSE) common_names Return common names page's taxon (Default: FALSE) synonyms Return synonyms page's taxon (Default: FALSE) references Return references page's taxon (Default: FALSE) taxonomy (logical) Whether return taxonomy details different taxon hierarchy providers, array named taxonconcepts (Default: TRUE) vetted 'vetted' given value '1', trusted content returned. 'vetted' '2', trusted unreviewed content returned (untrusted content returned). default return content. (Default: FALSE) cache_ttl number seconds wish response cached. ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for pages in EOL database using a taxonconceptID. — eol_pages","text":"JSON list object, data.frame.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_pages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for pages in EOL database using a taxonconceptID. — eol_pages","text":"possible return JSON XML EOL API. However, function returns JSON now.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_pages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for pages in EOL database using a taxonconceptID. — eol_pages","text":"","code":"if (FALSE) { (pageid <- eol_search('Pomatomus')$pageid[1]) x <- eol_pages(taxonconceptID = pageid) x x$scinames  z <- eol_pages(taxonconceptID = pageid, synonyms = TRUE) z$synonyms  z <- eol_pages(taxonconceptID = pageid, common_names = TRUE) z$vernacular }"},{"path":"https://docs.ropensci.org/taxize/reference/eol_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for terms in EOL database. — eol_search","title":"Search for terms in EOL database. — eol_search","text":"Search terms EOL database.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for terms in EOL database. — eol_search","text":"","code":"eol_search(   sci,   page = 1,   exact = NULL,   filter_tid = NULL,   filter_heid = NULL,   filter_by_string = NULL,   cache_ttl = NULL,   terms = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/eol_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for terms in EOL database. — eol_search","text":"sci (character) scientific name page maximum 30 results returned per page. parameter allows fetch pages results 30 matches (Default 1) exact find taxon pages preferred name synonym common name exactly matches search term. filter_tid Given EOL page ID, search results limited members taxonomic group filter_heid Given Hierarchy Entry ID, search results limited members taxonomic group filter_by_string Given search term, exact search made matching page used taxonomic group filter search results cache_ttl number seconds wish response cached. terms Deprecated, see sci ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for terms in EOL database. — eol_search","text":"data frame four columns: pageid: pageid, eolid can get get_eolid() name: taxonomic name, may may contain taxonomic authority link: URL taxon question content: string semi-colon separated names. clear us represent exactly, figured give users case may find useful","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for terms in EOL database. — eol_search","text":"possible return JSON XML EOL API. However, function returns JSON now.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eol_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for terms in EOL database. — eol_search","text":"","code":"if (FALSE) { eol_search(sci='Homo') eol_search(sci='Salix', verbose = TRUE) eol_search(sci='Ursus americanus') eol_search('Pinus contorta') }"},{"path":"https://docs.ropensci.org/taxize/reference/eubon-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"DEFUNCT — eubon","title":"DEFUNCT — eubon","text":"DEFUNCT","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DEFUNCT — eubon","text":"","code":"eubon(...)"},{"path":"https://docs.ropensci.org/taxize/reference/eubon_capabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"EUBON capabilities — eubon_capabilities","title":"EUBON capabilities — eubon_capabilities","text":"EUBON capabilities","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_capabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EUBON capabilities — eubon_capabilities","text":"","code":"eubon_capabilities(...)"},{"path":"https://docs.ropensci.org/taxize/reference/eubon_capabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EUBON capabilities — eubon_capabilities","text":"... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_capabilities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EUBON capabilities — eubon_capabilities","text":"https://cybertaxonomy.eu/eu-bon/utis/1.3/doc.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/eubon_capabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EUBON capabilities — eubon_capabilities","text":"","code":"if (FALSE) { eubon_capabilities() }"},{"path":"https://docs.ropensci.org/taxize/reference/eubon_children.html","id":null,"dir":"Reference","previous_headings":"","what":"EUBON children — eubon_children","title":"EUBON children — eubon_children","text":"EUBON children","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EUBON children — eubon_children","text":"","code":"eubon_children(id, providers = NULL, timeout = 0, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/eubon_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EUBON children — eubon_children","text":"id (character) identifier taxon. (LSID, DOI, URI, identifier used checklist provider) providers (character) list provider id strings concatenated comma characters. default : \"pesi,bgbm-cdm-server[col] used parameter set. list available provider ids can obtained '/capabilities' service end point. Providers can nested, parent provider can sub providers. id parent provider supplied subproviders queried. query can also restricted one subproviders using following syntax: parent-id[sub-id-1,sub-id2,...] timeout (numeric) maximum milliseconds wait responses providers. timeout exceeded service just return responses received far. default timeout 0 ms (wait ever) ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EUBON children — eubon_children","text":"data.frame empty list results found","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_children.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"EUBON children — eubon_children","text":"pagination method, may may getting results search. Sorry, control","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_children.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EUBON children — eubon_children","text":"https://cybertaxonomy.eu/eu-bon/utis/1.3/doc.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/eubon_children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EUBON children — eubon_children","text":"","code":"if (FALSE) { x <- eubon_children(id = \"urn:lsid:marinespecies.org:taxname:126141\",   providers = 'worms') head(x) }"},{"path":"https://docs.ropensci.org/taxize/reference/eubon_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"EUBON hierarchy — eubon_hierarchy","title":"EUBON hierarchy — eubon_hierarchy","text":"EUBON hierarchy","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EUBON hierarchy — eubon_hierarchy","text":"","code":"eubon_hierarchy(id, providers = \"pesi\", timeout = 0, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/eubon_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EUBON hierarchy — eubon_hierarchy","text":"id (character) identifier taxon. (LSID, DOI, URI, identifier used checklist provider) providers (character) list provider id strings concatenated comma characters. default : \"pesi,bgbm-cdm-server[col]\" used parameter set. list available provider ids can obtained '/capabilities' service end point. Providers can nested, parent provider can sub providers. id parent provider supplied subproviders queried. query can also restricted one subproviders using following syntax: parent-id[sub-id-1,sub-id2,...] timeout (numeric) maximum milliseconds wait responses providers. timeout exceeded service just return responses received far. default timeout 0 ms (wait ever) ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_hierarchy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"EUBON hierarchy — eubon_hierarchy","text":"pagination method, may may getting results search. Sorry, control","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_hierarchy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EUBON hierarchy — eubon_hierarchy","text":"https://cybertaxonomy.eu/eu-bon/utis/1.3/doc.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/eubon_hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EUBON hierarchy — eubon_hierarchy","text":"","code":"if (FALSE) { eubon_hierarchy(id = \"urn:lsid:marinespecies.org:taxname:126141\", 'worms') eubon_hierarchy(id = \"urn:lsid:marinespecies.org:taxname:274350\", 'worms') }"},{"path":"https://docs.ropensci.org/taxize/reference/eubon_search.html","id":null,"dir":"Reference","previous_headings":"","what":"EUBON taxonomy search — eubon_search","title":"EUBON taxonomy search — eubon_search","text":"EUBON taxonomy search","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EUBON taxonomy search — eubon_search","text":"","code":"eubon_search(   query,   providers = \"pesi\",   searchMode = \"scientificNameExact\",   addSynonymy = FALSE,   addParentTaxon = FALSE,   timeout = 0,   dedup = NULL,   limit = 20,   page = 1,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/eubon_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EUBON taxonomy search — eubon_search","text":"query (character) scientific name search . example: \"Bellis perennis\", \"Prionus\" \"Bolinus brandaris\". exact search wildcard characters supported providers (character) list provider id strings concatenated comma characters. default : \"pesi,bgbm-cdm-server[col]\" used parameter set. list available provider ids can obtained '/capabilities' service end point. Providers can nested, parent provider can sub providers. id parent provider supplied subproviders queried. query can also restricted one subproviders using following syntax: parent-id[sub-id-1,sub-id2,...] searchMode (character) Specifies searchMode. Possible search modes : scientificNameExact, scientificNameLike (begins ), vernacularNameExact, vernacularNameLike (contains), findByIdentifier. provider support chosen searchMode skipped status message tnrClientStatus set 'unsupported search mode' case. addSynonymy (logical) Indicates whether synonymy accepted taxon included response. Turning option may cause increased response time. Default: FALSE addParentTaxon (logical) Indicates whether parent taxon accepted taxon included response. Turning option may cause slightly increased response time. Default: FALSE timeout (numeric) maximum milliseconds wait responses providers. timeout exceeded service just return responses received far. default timeout 0 ms (wait ever) dedup (character) Allows deduplicate results making use deduplication strategy. deduplication done comparing specific properties taxon: id: compares 'taxon.identifier' id_name: compares 'taxon.identifier' 'taxon.taxonName.scientificName' name: compares 'taxon.taxonName.scientificName' Using pure 'name' strategy recommended. limit (numeric/integer) number records retrieve. default: 20. affects search mode scientificNameLike vernacularNameLike; search modes expected return one record per check list page (numeric/integer) page retrieve. default: 1. affects search mode scientificNameLike vernacularNameLike; search modes expected return one record per check list ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/eubon_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EUBON taxonomy search — eubon_search","text":"https://cybertaxonomy.eu/eu-bon/utis/1.3/doc.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/eubon_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EUBON taxonomy search — eubon_search","text":"","code":"if (FALSE) { eubon_search(\"Prionus\") eubon_search(\"Salmo\", \"pesi\") eubon_search(\"Salmo\", c(\"pesi\", \"worms\")) eubon_search(\"Salmo\", \"worms\", \"scientificNameLike\") eubon_search(\"Salmo\", \"worms\", \"scientificNameLike\", limit = 3) eubon_search(\"Salmo\", \"worms\", \"scientificNameLike\", limit = 20, page = 2) eubon_search(\"Salmo\", \"worms\", addSynonymy = TRUE) eubon_search(\"Salmo\", \"worms\", addParentTaxon = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/fungorum.html","id":null,"dir":"Reference","previous_headings":"","what":"Index Fungorum — fungorum","title":"Index Fungorum — fungorum","text":"Search taxonomic names Index Fungorum","code":""},{"path":"https://docs.ropensci.org/taxize/reference/fungorum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index Fungorum — fungorum","text":"","code":"fg_name_search(q, anywhere = TRUE, limit = 10, ...)  fg_author_search(q, anywhere = TRUE, limit = 10, ...)  fg_epithet_search(q, anywhere = TRUE, limit = 10, ...)  fg_name_by_key(key, ...)  fg_name_full_by_lsid(lsid, ...)  fg_all_updated_names(date, ...)  fg_deprecated_names(date, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/fungorum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index Fungorum — fungorum","text":"q (character) Query term anywhere (logical) Default: TRUE limit (integer) Number results return. max limit value appears 6000, positive though ... Curl options passed crul::verb-GET key (character) IndexFungorum taxon key lsid (character) LSID, e.,g. \"urn:lsid:indexfungorum.org:names:81085\" date (character) Date, form YYYMMDD","code":""},{"path":"https://docs.ropensci.org/taxize/reference/fungorum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index Fungorum — fungorum","text":"data.frame, NULL results","code":""},{"path":"https://docs.ropensci.org/taxize/reference/fungorum.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Index Fungorum — fungorum","text":"http://www.indexfungorum.org/, API docs: http://www.indexfungorum.org/ixfwebservice/fungus.asmx","code":""},{"path":"https://docs.ropensci.org/taxize/reference/fungorum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index Fungorum — fungorum","text":"","code":"if (FALSE) { # NameSearch fg_name_search(q = \"Gymnopus\", limit = 2, verbose = TRUE) fg_name_search(q = \"Gymnopus\")  # EpithetSearch fg_epithet_search(q = \"phalloides\")  # NameByKey fg_name_by_key(17703)  # NameFullByKey fg_name_full_by_lsid(\"urn:lsid:indexfungorum.org:names:81085\")  # AllUpdatedNames fg_all_updated_names(date = gsub(\"-\", \"\", Sys.Date() - 2))  # DeprecatedNames fg_deprecated_names(date=20151001)  # AuthorSearch fg_author_search(q = \"Fayod\", limit = 2) }"},{"path":"https://docs.ropensci.org/taxize/reference/gbif_downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all taxonomic names downstream in hierarchy for GBIF — gbif_downstream","title":"Retrieve all taxonomic names downstream in hierarchy for GBIF — gbif_downstream","text":"Retrieve taxonomic names downstream hierarchy GBIF","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all taxonomic names downstream in hierarchy for GBIF — gbif_downstream","text":"","code":"gbif_downstream(   id,   downto,   intermediate = FALSE,   limit = 100,   start = NULL,   key = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/gbif_downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all taxonomic names downstream in hierarchy for GBIF — gbif_downstream","text":"id taxonomic serial number. downto taxonomic level want go . See examples . taxonomic level case sensitive, spell correctly. See data(rank_ref) spelling. intermediate (logical) TRUE, return list length two target taxon rank names, additional list data.frame's intermediate taxonomic groups. Default: FALSE limit Number records return. default: 100. max: 1000. use combination start parameter start Record number start . default: 0. use combination limit parameter key Deprecated, see id ... args passed gbif_name_usage()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_downstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all taxonomic names downstream in hierarchy for GBIF — gbif_downstream","text":"data.frame taxonomic information downstream family e.g., Order, Class, etc., intermediated=TRUE, list length two, target taxon rank names, intermediate names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_downstream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve all taxonomic names downstream in hierarchy for GBIF — gbif_downstream","text":"Sometimes records canonicalName entry look . case grab scientificName entry. can see type name colleceted column name_type","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_downstream.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve all taxonomic names downstream in hierarchy for GBIF — gbif_downstream","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_downstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all taxonomic names downstream in hierarchy for GBIF — gbif_downstream","text":"","code":"if (FALSE) { ## the plant class Bangiophyceae gbif_downstream(id = 198, downto=\"genus\") gbif_downstream(id = 198, downto=\"genus\", intermediate=TRUE)  # families downstream from the family Strepsiptera (twisted wing parasites) gbif_downstream(id = 1227, \"family\") ## here, intermediate leads to the same result as the target gbif_downstream(id = 1227, \"family\", intermediate=TRUE)  if (interactive()) { # Lepidoptera gbif_downstream(id = 797, \"family\")  # get species downstream from the genus Ursus gbif_downstream(id = 2433406, \"species\")  # get tribes down from the family Apidae gbif_downstream(id = 7799978, downto=\"species\") gbif_downstream(id = 7799978, downto=\"species\", intermediate=TRUE)  # names that don't have canonicalname entries for some results # Myosotis: key 2925668 key <- 2925668 res <- gbif_downstream(key, downto = \"species\") res2 <- downstream(key, db = \"gbif\", downto = \"species\")  # Pagination # GBIF limits queries to a maximum of 1000 records per request, so if # there's more than 1000, use the start parameter # Piper, taxonKey = 3075433 x1 <- gbif_downstream(id = 3075433, downto = \"species\", limit=1000) x2 <- gbif_downstream(id = 3075433, downto = \"species\", limit=1000,   start=1000) x3 <- gbif_downstream(id = 3075433, downto = \"species\", limit=1000,   start=2000) x4 <- gbif_downstream(id = 3075433, downto = \"species\", limit=1000,   start=3000) rbind(x1, x2, x3, x4) } }"},{"path":"https://docs.ropensci.org/taxize/reference/gbif_name_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup details for specific names in all taxonomies in GBIF. — gbif_name_usage","title":"Lookup details for specific names in all taxonomies in GBIF. — gbif_name_usage","text":"taxize version function rgbif package import rgbif thus require GDAL binary installation.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_name_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup details for specific names in all taxonomies in GBIF. — gbif_name_usage","text":"","code":"gbif_name_usage(   key = NULL,   name = NULL,   data = \"all\",   language = NULL,   datasetKey = NULL,   uuid = NULL,   sourceId = NULL,   rank = NULL,   shortname = NULL,   start = NULL,   limit = 20,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/gbif_name_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup details for specific names in all taxonomies in GBIF. — gbif_name_usage","text":"key (numeric) GBIF key taxon name (character) Filters case insensitive, canonical namestring, e.g. 'Puma concolor' data (character) Specify option select data returned. See Description . language (character) Language, default english datasetKey (character) Filters dataset's key (uuid) uuid (character) uuid dataset. give exact results datasetKey. sourceId (numeric) Filters source identifier. used right now. rank (character) Taxonomic rank. Filters taxonomic rank one : CLASS, CULTIVAR, CULTIVAR_GROUP, DOMAIN, FAMILY, FORM, GENUS, INFORMAL, INFRAGENERIC_NAME, INFRAORDER, INFRASPECIFIC_NAME, INFRASUBSPECIFIC_NAME, KINGDOM, ORDER, PHYLUM, SECTION, SERIES, SPECIES, STRAIN, SUBCLASS, SUBFAMILY, SUBFORM, SUBGENUS, SUBKINGDOM, SUBORDER, SUBPHYLUM, SUBSECTION, SUBSERIES, SUBSPECIES, SUBTRIBE, SUBVARIETY, SUPERCLASS, SUPERFAMILY, SUPERORDER, SUPERPHYLUM, SUPRAGENERIC_NAME, TRIBE, UNRANKED, VARIETY shortname (character) short name..need info ? start Record number start limit Number records return ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_name_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup details for specific names in all taxonomies in GBIF. — gbif_name_usage","text":"list length two. first element metadata. second either data.frame (verbose=FALSE, default) list (verbose=TRUE)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_name_usage.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lookup details for specific names in all taxonomies in GBIF. — gbif_name_usage","text":"https://www.gbif.org/developer/summary","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse taxon names using the GBIF name parser. — gbif_parse","title":"Parse taxon names using the GBIF name parser. — gbif_parse","text":"Parse taxon names using GBIF name parser.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse taxon names using the GBIF name parser. — gbif_parse","text":"","code":"gbif_parse(scientificname, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/gbif_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse taxon names using the GBIF name parser. — gbif_parse","text":"scientificname (character) scientific names ... args passed crul::verb-POST","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse taxon names using the GBIF name parser. — gbif_parse","text":"data.frame containing fields extracted parsed taxon names. Fields returned union fields extracted species names scientificname.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_parse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse taxon names using the GBIF name parser. — gbif_parse","text":"https://www.gbif.org/tools/name-parser/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/gbif_parse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse taxon names using the GBIF name parser. — gbif_parse","text":"John Baumgartner johnbb@student.unimelb.edu.au","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gbif_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse taxon names using the GBIF name parser. — gbif_parse","text":"","code":"if (FALSE) { gbif_parse(scientificname='x Agropogon littoralis') gbif_parse(c('Arrhenatherum elatius var. elatius',              'Secale cereale subsp. cereale', 'Secale cereale ssp. cereale',              'Vanessa atalanta (Linnaeus, 1758)')) }"},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NCBI taxonomy UID from GenBankID — genbank2uid","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"Get NCBI taxonomy UID GenBankID","code":""},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"","code":"genbank2uid(id, batch_size = 100, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"id GenBank accession alphanumeric string, gi numeric string. batch_size number queries submit time. key (character) NCBI Entrez API key. optional. See Details. ... Curl args passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"one NCBI taxonomic IDs","code":""},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"See https://www.ncbi.nlm.nih.gov/Sitemap/sequenceIDs.html help two identifiers, difference .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"See taxize-authentication help authentication. recommend getting API key.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":"http-version","dir":"Reference","previous_headings":"","what":"HTTP version","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":"rate-limits","dir":"Reference","previous_headings":"","what":"Rate limits","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"case run errors due rate limit exceeded, see taxize_options(), can set ncbi_sleep.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/genbank2uid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NCBI taxonomy UID from GenBankID — genbank2uid","text":"","code":"if (FALSE) { # with accession numbers genbank2uid(id = 'AJ748748') genbank2uid(id = 'Y13155') genbank2uid(id = 'X78312') genbank2uid(id = 'KM495596')  # with gi numbers genbank2uid(id = 62689767) genbank2uid(id = 22775511) genbank2uid(id = 156446673)  # pass in many accession or gi numbers genbank2uid(c(62689767,156446673)) genbank2uid(c('X78312','KM495596')) genbank2uid(list('X78312',156446673))  # curl options res <- genbank2uid(id = 156446673, verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_boldid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the BOLD (Barcode of Life) code for a search term. — get_boldid","title":"Get the BOLD (Barcode of Life) code for a search term. — get_boldid","text":"Get BOLD (Barcode Life) code search term.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_boldid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the BOLD (Barcode of Life) code for a search term. — get_boldid","text":"","code":"get_boldid(   sci,   fuzzy = FALSE,   dataTypes = \"basic\",   includeTree = FALSE,   ask = TRUE,   messages = TRUE,   rows = NA,   rank = NULL,   division = NULL,   parent = NULL,   searchterm = NULL,   ... )  as.boldid(x, check = TRUE)  # S3 method for boldid as.boldid(x, check = TRUE)  # S3 method for character as.boldid(x, check = TRUE)  # S3 method for list as.boldid(x, check = TRUE)  # S3 method for numeric as.boldid(x, check = TRUE)  # S3 method for data.frame as.boldid(x, check = TRUE)  # S3 method for boldid as.data.frame(x, ...)  get_boldid_(   sci,   messages = TRUE,   fuzzy = FALSE,   dataTypes = \"basic\",   includeTree = FALSE,   rows = NA,   searchterm = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/get_boldid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the BOLD (Barcode of Life) code for a search term. — get_boldid","text":"sci character; vector scientific names. , taxon_state object (see taxon-state) fuzzy (logical) Whether use fuzzy search (default: FALSE). dataTypes (character) Specifies datatypes returned. See bold_search() options. includeTree (logical) TRUE (default: FALSE), returns list containing information parent taxa well specified taxon. ask logical; get_tsn run interactive mode? TRUE one TSN found teh species, user asked input. FALSE NA returned multiple matches. messages logical; progress printed? rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back boldid class object one many identifiers. See get_boldid_() get back , subset, raw data presented ask process. rank (character) taxonomic rank name. See rank_ref possible options. Though note data sources use atypical ranks, inspect data options. Optional. See Filtering . division (character) division (aka phylum) name. Optional. See Filtering . parent (character) parent name (.e., parent target search taxon). Optional. See Filtering . searchterm Deprecated, see sci ... Curl options passed crul::verb-GET x Input .boldid() check logical; Check ID matches existing DB, used .boldid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_boldid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the BOLD (Barcode of Life) code for a search term. — get_boldid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_boldid.html","id":"filtering","dir":"Reference","previous_headings":"","what":"Filtering","title":"Get the BOLD (Barcode of Life) code for a search term. — get_boldid","text":"parameters division, parent, rank used search data provider, used filtering data subset closer target want.  parameters, can use regex strings since use grep() internally match. Filtering narrows set matches query, removes rest.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_boldid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the BOLD (Barcode of Life) code for a search term. — get_boldid","text":"","code":"if (FALSE) { get_boldid(sci = \"Agapostemon\") get_boldid(sci = \"Chironomus riparius\") get_boldid(c(\"Chironomus riparius\",\"Quercus douglasii\")) splist <- names_list('species') get_boldid(splist, messages=FALSE)  # Fuzzy searching get_boldid(sci=\"Osmi\", fuzzy=TRUE)  # Get back a subset get_boldid(sci=\"Osmi\", fuzzy=TRUE, rows = 1) get_boldid(sci=\"Osmi\", fuzzy=TRUE, rows = 1:10) get_boldid(sci=c(\"Osmi\",\"Aga\"), fuzzy=TRUE, rows = 1) get_boldid(sci=c(\"Osmi\",\"Aga\"), fuzzy=TRUE, rows = 1:3)  # found get_boldid('Epicordulia princeps') get_boldid('Arigomphus furcifer')  # When not found get_boldid(\"howdy\") get_boldid(c(\"Chironomus riparius\", \"howdy\")) get_boldid(\"Cordulegaster erronea\") get_boldid(\"Nasiaeshna pentacantha\")  # Narrow down results to a division or rank, or both ## Satyrium example ### Results w/o narrowing get_boldid(\"Satyrium\") ### w/ phylum get_boldid(\"Satyrium\", division = \"Plantae\") get_boldid(\"Satyrium\", division = \"Animalia\")  ## Rank example get_boldid(\"Osmia\", fuzzy = TRUE) get_boldid(\"Osmia\", fuzzy = TRUE, rank = \"genus\")  # Fuzzy filter on any filtering fields ## uses grep on the inside get_boldid(\"Satyrium\", division = \"anim\") get_boldid(\"Aga\", fuzzy = TRUE, parent = \"*idae\")  # Convert a boldid without class information to a boldid class as.boldid(get_boldid(\"Agapostemon\")) # already a boldid, returns the same as.boldid(get_boldid(c(\"Agapostemon\",\"Quercus douglasii\"))) # same as.boldid(1973) # numeric as.boldid(c(1973,101009,98597)) # numeric vector, length > 1 as.boldid(\"1973\") # character as.boldid(c(\"1973\",\"101009\",\"98597\")) # character vector, length > 1 as.boldid(list(\"1973\",\"101009\",\"98597\")) # list, either numeric or character ## dont check, much faster as.boldid(\"1973\", check=FALSE) as.boldid(1973, check=FALSE) as.boldid(c(\"1973\",\"101009\",\"98597\"), check=FALSE) as.boldid(list(\"1973\",\"101009\",\"98597\"), check=FALSE)  (out <- as.boldid(c(1973,101009,98597))) data.frame(out) as.boldid( data.frame(out) )  # Get all data back get_boldid_(\"Osmia\", fuzzy=TRUE, rows=1:5) get_boldid_(\"Osmia\", fuzzy=TRUE, rows=1) get_boldid_(c(\"Osmi\",\"Aga\"), fuzzy=TRUE, rows = 1:3) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_eolid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","title":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","text":"Note EOL expose API endpoint directly querying EOL taxon ID's, first use function eol_search() find pages deal species interest, use eol_pages() find actual taxon IDs.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_eolid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","text":"","code":"get_eolid(   sci_com,   ask = TRUE,   messages = TRUE,   rows = NA,   rank = NULL,   data_source = NULL,   sciname = NULL,   ... )  as.eolid(x, check = TRUE)  # S3 method for eolid as.eolid(x, check = TRUE)  # S3 method for character as.eolid(x, check = TRUE)  # S3 method for list as.eolid(x, check = TRUE)  # S3 method for numeric as.eolid(x, check = TRUE)  # S3 method for data.frame as.eolid(x, check = TRUE)  # S3 method for eolid as.data.frame(x, ...)  get_eolid_(sci_com, messages = TRUE, rows = NA, sciname = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_eolid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","text":"sci_com character; one scientific common names. , taxon_state object (see taxon-state) ask logical; get_eolid run interactive mode? TRUE one ID found species, user asked input. FALSE NA returned multiple matches. messages logical; TRUE actual taxon queried printed console. rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back eolid class object one many identifiers. See get_eolid_() get back , subset, raw data presented ask process. rank (character) taxonomic rank name. See rank_ref possible options. Though note data sources use atypical ranks, inspect data options. Optional. See Filtering . data_source (character) data source inside EOL. longish names like e.g., \"Barcode Life Data Systems\" \"USDA PLANTS images\". Optional. See Filtering . sciname Deprecated, see sci_com ... args passed eol_search() x Input .eolid() check logical; Check ID matches existing DB, used .eolid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_eolid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_eolid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","text":"EOL bit odd page IDs taxon, within , taxon ids various taxa within page (e.g., GBIF NCBI taxon refer within page [.e., taxon]). need taxon ids particular data provider (e.g, NCBI) things, like get higher classification tree. However, humans want page id, taxon id. , id returned function taxon id, page id. can get page id taxon using eol_search() `eol_pages(), URI returned attributes taxon lead taxon page, ID URL page id.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_eolid.html","id":"filtering","dir":"Reference","previous_headings":"","what":"Filtering","title":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","text":"parameters rank data_source used search data provider, used filtering data subset closer target want.  parameters, can use regex strings since use grep() internally match. Filtering narrows set matches query, removes rest.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_eolid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_eolid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the EOL ID from Encyclopedia of Life from taxonomic names. — get_eolid","text":"","code":"if (FALSE) { get_eolid(sci_com='Pinus contorta') get_eolid(sci_com='Puma concolor')  get_eolid(c(\"Puma concolor\", \"Pinus contorta\"))  # specify rows to limit choices available get_eolid('Poa annua') get_eolid('Poa annua', rows=1) get_eolid('Poa annua', rows=2) get_eolid('Poa annua', rows=1:2)  # When not found get_eolid(sci_com=\"uaudnadndj\") get_eolid(c(\"Chironomus riparius\", \"uaudnadndj\"))  # filter results to a rank or data source, or both get_eolid(\"Satyrium\") get_eolid(\"Satyrium\", rank = \"genus\") get_eolid(\"Satyrium\", data_source = \"INAT\") get_eolid(\"Satyrium\", rank = \"genus\",   data_source = \"North Pacific Species List\")  # Convert a eolid without class information to a eolid class # already a eolid, returns the same as.eolid(get_eolid(\"Chironomus riparius\")) # same as.eolid(get_eolid(c(\"Chironomus riparius\",\"Pinus contorta\"))) # numeric as.eolid(10247706) # numeric vector, length > 1 as.eolid(c(6985636,12188704,10247706)) # character as.eolid(\"6985636\") # character vector, length > 1 as.eolid(c(\"6985636\",\"12188704\",\"10247706\")) # list, either numeric or character as.eolid(list(\"6985636\",\"12188704\",\"10247706\")) ## dont check, much faster as.eolid(\"6985636\", check=FALSE) as.eolid(6985636, check=FALSE) as.eolid(c(\"6985636\",\"12188704\",\"10247706\"), check=FALSE) as.eolid(list(\"6985636\",\"12188704\",\"10247706\"), check=FALSE)  (out <- as.eolid(c(6985636,12188704,10247706))) data.frame(out) as.eolid( data.frame(out) )  # Get all data back get_eolid_(\"Poa annua\") get_eolid_(\"Poa annua\", rows=2) get_eolid_(\"Poa annua\", rows=1:2) get_eolid_(c(\"asdfadfasd\", \"Pinus contorta\")) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"Get GBIF backbone taxon ID taxonomic names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"","code":"get_gbifid(   sci,   ask = TRUE,   messages = TRUE,   rows = NA,   phylum = NULL,   class = NULL,   order = NULL,   family = NULL,   rank = NULL,   method = \"backbone\",   sciname = NULL,   ... )  as.gbifid(x, check = FALSE)  # S3 method for gbifid as.gbifid(x, check = FALSE)  # S3 method for character as.gbifid(x, check = TRUE)  # S3 method for list as.gbifid(x, check = TRUE)  # S3 method for numeric as.gbifid(x, check = TRUE)  # S3 method for data.frame as.gbifid(x, check = TRUE)  # S3 method for gbifid as.data.frame(x, ...)  get_gbifid_(   sci,   messages = TRUE,   rows = NA,   method = \"backbone\",   sciname = NULL )"},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"sci (character) one scientific names. , taxon_state object (see taxon-state) ask logical; get_gbifid run interactive mode? TRUE one ID found species, user asked input. FALSE NA returned multiple matches. messages logical; TRUE actual taxon queried printed console. rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back gbifid class object one many identifiers. See get_gbifid_() get back , subset, raw data presented ask process. phylum (character) phylum (aka division) name. Optional. See Filtering . class (character) class name. Optional. See Filtering . order (character) order name. Optional. See Filtering . family (character) family name. Optional. See Filtering . rank (character) taxonomic rank name. See rank_ref possible options. Though note data sources use atypical ranks, inspect data options. Optional. See Filtering . method (character) one \"backbone\" \"lookup\". See Details. sciname Deprecated, see sci ... Ignored x Input .gbifid() check logical; Check ID matches existing DB, used .gbifid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"Internally function use function search GBIF's taxonomy, find exact match return ID match. exact match return options pick .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":"method-parameter","dir":"Reference","previous_headings":"","what":"method parameter","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"\"backbone\" uses /species/match GBIF API route, matching backbone taxonomy. turn fuzzy matching default, search without fuzzy backbone quite narrow. \"lookup\" uses /species/search GBIF API route, full text search name usages covering scientific vernacular named, species descriptions, distributions entire classification.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":"filtering","dir":"Reference","previous_headings":"","what":"Filtering","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"parameters phylum, class, order, family, rank used search data provider, used filtering data subset closer target want.  parameters, can use regex strings since use grep() internally match. Filtering narrows set matches query, removes rest.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"Scott Chamberlain,","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_gbifid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the GBIF backbone taxon ID from taxonomic names. — get_gbifid","text":"","code":"if (FALSE) { get_gbifid(sci='Poa annua') get_gbifid(sci='Pinus contorta') get_gbifid(sci='Puma concolor')  #lots of queries spp <- names_list(\"species\", 10) res <- get_gbifid(spp) res xx <- taxon_last() xx  # multiple names get_gbifid(c(\"Poa annua\", \"Pinus contorta\"))  # specify rows to limit choices available get_gbifid(sci='Pinus') get_gbifid(sci='Pinus', rows=10) get_gbifid(sci='Pinus', rows=1:3)  # When not found, NA given get_gbifid(sci=\"uaudnadndj\") get_gbifid(c(\"Chironomus riparius\", \"uaudnadndj\"))  # Narrow down results to a division or rank, or both ## Satyrium example ### Results w/o narrowing get_gbifid(\"Satyrium\") ### w/ phylum get_gbifid(\"Satyrium\", phylum = \"Tracheophyta\") get_gbifid(\"Satyrium\", phylum = \"Arthropoda\") ### w/ phylum & rank get_gbifid(\"Satyrium\", phylum = \"Arthropoda\", rank = \"genus\")  ## Rank example get_gbifid(\"Poa\", method = \"lookup\") get_gbifid(\"Poa\", method = \"lookup\", rank = \"genus\") get_gbifid(\"Poa\", method = \"lookup\", family = \"Thripidae\")  # Fuzzy filter on any filtering fields ## uses grep on the inside get_gbifid(\"Satyrium\", phylum = \"arthropoda\") get_gbifid(\"A*\", method = \"lookup\", order = \"*tera\") get_gbifid(\"A*\", method = \"lookup\", order = \"*ales\")  # Convert a uid without class information to a uid class as.gbifid(get_gbifid(\"Poa annua\")) # already a uid, returns the same as.gbifid(get_gbifid(c(\"Poa annua\",\"Puma concolor\"))) # same as.gbifid(2704179) # numeric as.gbifid(c(2704179,2435099,3171445)) # numeric vector, length > 1 as.gbifid(\"2704179\") # character as.gbifid(c(\"2704179\",\"2435099\",\"3171445\")) # character vector, length > 1 as.gbifid(list(\"2704179\",\"2435099\",\"3171445\")) # list, either numeric or character ## dont check, much faster as.gbifid(\"2704179\", check=FALSE) as.gbifid(2704179, check=FALSE) as.gbifid(2704179, check=FALSE) as.gbifid(c(\"2704179\",\"2435099\",\"3171445\"), check=FALSE) as.gbifid(list(\"2704179\",\"2435099\",\"3171445\"), check=FALSE)  (out <- as.gbifid(c(2704179,2435099,3171445))) data.frame(out) as.uid( data.frame(out) )  # Get all data back get_gbifid_(\"Puma concolor\") get_gbifid_(c(\"Pinus\", \"uaudnadndj\")) get_gbifid_(c(\"Pinus\", \"Puma\"), rows=5) get_gbifid_(c(\"Pinus\", \"Puma\"), rows=1:5)  # use curl options invisible(get_gbifid(\"Quercus douglasii\", verbose = TRUE)) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_genes-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve gene sequences from NCBI by accession number. — get_genes","title":"Retrieve gene sequences from NCBI by accession number. — get_genes","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_genes-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve gene sequences from NCBI by accession number. — get_genes","text":"","code":"get_genes(...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_genes_avail-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve gene sequences from NCBI by accession number. — get_genes_avail","title":"Retrieve gene sequences from NCBI by accession number. — get_genes_avail","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_genes_avail-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve gene sequences from NCBI by accession number. — get_genes_avail","text":"","code":"get_genes_avail(...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_id_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Details on get_*() functions — get_id_details","title":"Details on get_*() functions — get_id_details","text":"Including outputs get_*() functions, well attributes, exception behaviors.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_id_details.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Details on get_*() functions — get_id_details","text":"document applies following functions: get_boldid() get_eolid() get_gbifid() get_ids() get_iucn() get_natservid() get_nbnid() get_tolid() get_tpsid() get_tsn() get_ubioid() get_uid() get_wiki() get_wormsid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_id_details.html","id":"attributes","dir":"Reference","previous_headings":"","what":"attributes","title":"Details on get_*() functions — get_id_details","text":"output get_*() functions following attributes: match (character) - reason NA, either 'found', 'found' ask = FALSE 'NA due ask=FALSE') multiple_matches (logical) - Whether multiple matches returned data source. can TRUE, even get 1 name back try pattern match name see direct matches. sometimes attribute TRUE, well pattern_match, returns 1 resulting name without user prompt. pattern_match (logical) - Whether pattern match made. TRUE thenmultiple_matches must TRUE, found perfect match name, ignoring case. FALSE, direct match, likely need pick many choices parameters can used limit results uri (character) - URI information can read taxon includes taxonomic identifier URL somewhere. may missing value returned NA","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_id_details.html","id":"exceptions","dir":"Reference","previous_headings":"","what":"exceptions","title":"Details on get_*() functions — get_id_details","text":"following various ways get_*() functions behave: success - value returned character string numeric matches found - get NA, refine search possible taxon searched exist database using match ask = FALSE - one matching result, set ask = FALSE, determine single match return, give back NA. However, case set match attribute say NA due ask=FALSE & > 1 result clear happened - can even programatically check well NA due reason - get_*() functions additional parameters filtering taxa. possible even though results (, found say TRUE), can get back NA. likely parameter filters taxa returned data provider value passed parameter leads matches.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve taxonomic identifiers for a given taxon name. — get_ids","title":"Retrieve taxonomic identifiers for a given taxon name. — get_ids","text":"convenience function get identifiers across data sources. can use get_* functions get identifiers specific sources like.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve taxonomic identifiers for a given taxon name. — get_ids","text":"","code":"get_ids(   sci_com,   db = c(\"itis\", \"ncbi\", \"eol\", \"tropicos\", \"gbif\", \"nbn\", \"pow\"),   suppress = FALSE,   names = NULL,   ... )  get_ids_(   sci_com,   db = get_ids_dbs,   rows = NA,   suppress = FALSE,   names = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/get_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve taxonomic identifiers for a given taxon name. — get_ids","text":"sci_com (character) Taxonomic name query. db (character) database query. One ncbi, itis, eol, tropicos, gbif, nbn, pow. default db set search data sources. Note taxonomic data source identifiers, give wrong db value identifier get result, likely wrong (expecting). using ncbi /tropicos recommend getting API keys; see taxize-authentication suppress (logical) suppress cli separators database name queried. default: FALSE names Deprecated, see sci_com ... arguments passed get_tsn(), get_uid(), get_eolid(), get_tpsid(), get_gbifid(), get_nbnid(). rows (numeric) number 1 infinity. default NA, rows returned. used get_ids function still gives back ids class object one many identifiers. See get_ids_ get back , subset, raw data presented ask process.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve taxonomic identifiers for a given taxon name. — get_ids","text":"vector taxonomic identifiers, retaining respective S3 classes element can passed another function (see e.g.'s).","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_ids.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve taxonomic identifiers for a given taxon name. — get_ids","text":"timeout 1/3 seconds queries NCBI.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_ids.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Retrieve taxonomic identifiers for a given taxon name. — get_ids","text":"See taxize-authentication help authentication","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve taxonomic identifiers for a given taxon name. — get_ids","text":"","code":"if (FALSE) { # Plug in taxon names directly # specify rows to limit choices available get_ids(\"Poa annua\", db=\"eol\", rows=1) get_ids(\"Poa annua\", db=\"eol\", rows=1:2)  ## Or you can specify which source you want via the db parameter get_ids(\"Chironomus riparius\", db = 'ncbi') get_ids(\"Salvelinus fontinalis\", db = 'nbn')  get_ids(c(\"Chironomus riparius\", \"Pinus contorta\"), db = 'ncbi') get_ids(\"Pinus contorta\", db = c('ncbi','eol','tropicos')) get_ids(\"ava avvva\", db = c('ncbi','eol','tropicos'))  # Pass on to other functions out <- get_ids(\"Pinus contorta\", db = c('ncbi','eol','tropicos')) classification(out$ncbi)  # Get all data back get_ids_(c(\"Chironomus riparius\", \"Pinus contorta\"), db = 'nbn',   rows=1:10) get_ids_(c(\"Chironomus riparius\", \"Pinus contorta\"), db = c('nbn','gbif'),   rows=1:10)  # use curl options get_ids(\"Agapostemon\", db = \"ncbi\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_iucn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a IUCN Redlist taxon — get_iucn","title":"Get a IUCN Redlist taxon — get_iucn","text":"Get IUCN Redlist taxon","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_iucn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a IUCN Redlist taxon — get_iucn","text":"","code":"get_iucn(sci, messages = TRUE, key = NULL, x = NULL, ...)  as.iucn(x, check = TRUE, key = NULL)  # S3 method for iucn as.iucn(x, check = TRUE, key = NULL)  # S3 method for character as.iucn(x, check = TRUE, key = NULL)  # S3 method for list as.iucn(x, check = TRUE, key = NULL)  # S3 method for numeric as.iucn(x, check = TRUE, key = NULL)  # S3 method for data.frame as.iucn(x, check = TRUE, key = NULL)  # S3 method for iucn as.data.frame(x, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_iucn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a IUCN Redlist taxon — get_iucn","text":"sci (character) vector scientific names. , taxon_state object (see taxon-state) messages logical; progress printed? key (character) required. IUCN Redlist API key. See rredlist::rredlist-package help authenticating IUCN Redlist x get_iucn(): Deprecated, see sci. .iucn(), various, see examples ... Ignored check (logical) Check ID matches existing DB, used .iucn()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_iucn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a IUCN Redlist taxon — get_iucn","text":"vector taxonomic identifiers S3 class. Comes following attributes: match (character) - reason NA, either 'found', 'found' ask = FALSE 'NA due ask=FALSE') name (character) - taxonomic name, needed synonyms() sci2comm() methods since internally use rredlist functions require taxonomic name, taxonomic identifier ri (character) - URI information can read taxon - includes taxonomic identifier URL somewhere multiple_matches pattern_match apply get_* methods since IUCN Redlist search, either get match get match.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_iucn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a IUCN Redlist taxon — get_iucn","text":"underscore method, real search IUCN, , search string, get back bunch results due fuzzy matching. exists future add underscore method . IUCN ids work synonyms() sci2comm() methods.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_iucn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a IUCN Redlist taxon — get_iucn","text":"","code":"if (FALSE) { get_iucn(\"Branta canadensis\") get_iucn(\"Branta bernicla\") get_iucn(\"Panthera uncia\")  # as coercion as.iucn(22732) as.iucn(\"22732\") (res <- as.iucn(c(22679946, 22732, 22679935))) data.frame(res) as.iucn(data.frame(res)) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_natservid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NatureServe taxonomic ID for a taxon name — get_natservid","title":"Get NatureServe taxonomic ID for a taxon name — get_natservid","text":"Get NatureServe taxonomic ID taxon name","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_natservid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NatureServe taxonomic ID for a taxon name — get_natservid","text":"","code":"get_natservid(   sci_com,   searchtype = \"scientific\",   ask = TRUE,   messages = TRUE,   rows = NA,   query = NULL,   ... )  as.natservid(x, check = TRUE)  # S3 method for natservid as.natservid(x, check = TRUE)  # S3 method for character as.natservid(x, check = TRUE)  # S3 method for list as.natservid(x, check = TRUE)  # S3 method for numeric as.natservid(x, check = TRUE)  # S3 method for data.frame as.natservid(x, check = TRUE)  # S3 method for natservid as.data.frame(x, ...)  get_natservid_(   sci_com,   searchtype = \"scientific\",   messages = TRUE,   rows = NA,   query = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/get_natservid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NatureServe taxonomic ID for a taxon name — get_natservid","text":"sci_com character; vector common scientific names. , taxon_state object (see taxon-state) searchtype character; One 'scientific' (default) 'common'. affect query NatureServe - rather affects column data targeted name filtering post data request. ask logical; get_natservid run interactive mode? TRUE one wormsid found species, user asked input. FALSE NA returned multiple matches. default: TRUE messages logical; progress printed? default: TRUE rows numeric; number 1 infinity. default NaN, rows considered. Note function still gives back natservid class object one many identifiers. See get_natservid_() get back , subset, raw data presented ask process. query Deprecated, see sci_com ... curl options passed crul::verb-POST x Input .natservid check logical; Check ID matches existing DB, used .natservid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_natservid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NatureServe taxonomic ID for a taxon name — get_natservid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_natservid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get NatureServe taxonomic ID for a taxon name — get_natservid","text":"Authentication longer required","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_natservid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NatureServe taxonomic ID for a taxon name — get_natservid","text":"","code":"if (FALSE) { (x <- get_natservid(\"Helianthus annuus\", verbose = TRUE)) attributes(x) attr(x, \"match\") attr(x, \"multiple_matches\") attr(x, \"pattern_match\") attr(x, \"uri\")  get_natservid('Gadus morhua') get_natservid(c(\"Helianthus annuus\", 'Gadus morhua'))  # specify rows to limit choices available get_natservid('Ruby Quaker Moth', 'common') get_natservid('Ruby*', 'common') get_natservid('Ruby*', 'common', rows=1) get_natservid('Ruby*', 'common', rows=1:2)  # When not found get_natservid(\"howdy\") get_natservid(c('Gadus morhua', \"howdy\"))  # Convert a natservid without class information to a natservid class # already a natservid, returns the same as.natservid(get_natservid('Pomatomus saltatrix')) # same as.natservid(get_natservid(c('Gadus morhua', 'Pomatomus saltatrix'))) # character as.natservid(101905) # character vector, length > 1 as.natservid(c(101905, 101998)) # list, either numeric or character as.natservid(list(101905, 101998)) ## dont check, much faster as.natservid(101905, check = FALSE) as.natservid(c(101905, 101998), check = FALSE) as.natservid(list(101905, 101998), check = FALSE)  (out <- as.natservid(c(101905, 101998), check = FALSE)) data.frame(out) as.natservid( data.frame(out) )  # Get all data back get_natservid_(\"Helianthus\") get_natservid_(\"Ruby*\", searchtype = \"common\") get_natservid_(\"Ruby*\", searchtype = \"common\", rows=1:3) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_nbnid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the UK National Biodiversity Network ID from taxonomic names. — get_nbnid","title":"Get the UK National Biodiversity Network ID from taxonomic names. — get_nbnid","text":"Get UK National Biodiversity Network ID taxonomic names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_nbnid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the UK National Biodiversity Network ID from taxonomic names. — get_nbnid","text":"","code":"get_nbnid(   sci_com,   ask = TRUE,   messages = TRUE,   rec_only = FALSE,   rank = NULL,   rows = NA,   name = NULL,   ... )  as.nbnid(x, check = TRUE)  # S3 method for nbnid as.nbnid(x, check = TRUE)  # S3 method for character as.nbnid(x, check = TRUE)  # S3 method for list as.nbnid(x, check = TRUE)  # S3 method for data.frame as.nbnid(x, check = TRUE)  # S3 method for nbnid as.data.frame(x, ...)  get_nbnid_(   sci_com,   messages = TRUE,   rec_only = FALSE,   rank = NULL,   rows = NA,   name = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/get_nbnid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the UK National Biodiversity Network ID from taxonomic names. — get_nbnid","text":"sci_com character; vector common scientific names. , taxon_state object (see taxon-state) ask logical; get_nbnid run interactive mode? TRUE one ID found species, user asked input. FALSE NA returned multiple matches. messages logical; TRUE actual taxon queried printed console. rec_only (logical) TRUE ids recommended names returned (.e. synonyms removed). Defaults FALSE. Remember, id synonym taxa 'recommended' name status. rank (character) given, attempt limit results taxa matching rank. rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back nbnid class object one many identifiers. See get_nbnid_() get back , subset, raw data presented ask process. name Deprecated, see sci_com ... args passed nbn_search x Input .nbnid() check logical; Check ID matches existing DB, used .nbnid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_nbnid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the UK National Biodiversity Network ID from taxonomic names. — get_nbnid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions object class nbnid, light wrapper around character string taxonomic ID - includes attributes relavant metadata","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_nbnid.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get the UK National Biodiversity Network ID from taxonomic names. — get_nbnid","text":"https://api.nbnatlas.org/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_nbnid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the UK National Biodiversity Network ID from taxonomic names. — get_nbnid","text":"Scott Chamberlain,","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_nbnid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the UK National Biodiversity Network ID from taxonomic names. — get_nbnid","text":"","code":"if (FALSE) { get_nbnid(sci_com='Poa annua') get_nbnid(sci_com='Poa annua', rec_only=TRUE) get_nbnid(sci_com='Poa annua', rank='Species') get_nbnid(sci_com='Poa annua', rec_only=TRUE, rank='Species') get_nbnid(sci_com='Pinus contorta')  # The NBN service handles common names too get_nbnid(sci_com='red-winged blackbird')  # specify rows to limit choices available get_nbnid('Poa ann') get_nbnid('Poa ann', rows=1) get_nbnid('Poa ann', rows=25) get_nbnid('Poa ann', rows=1:2)  # When not found get_nbnid(sci_com=\"uaudnadndj\") get_nbnid(c(\"Zootoca vivipara\", \"uaudnadndj\")) get_nbnid(c(\"Zootoca vivipara\",\"Chironomus riparius\", \"uaudnadndj\"))  # Convert an nbnid without class information to a nbnid class as.nbnid(get_nbnid(\"Zootoca vivipara\")) # already a nbnid, returns the same as.nbnid(get_nbnid(c(\"Zootoca vivipara\",\"Pinus contorta\"))) # same as.nbnid('NHMSYS0001706186') # character # character vector, length > 1 as.nbnid(c(\"NHMSYS0001706186\",\"NHMSYS0000494848\",\"NBNSYS0000010867\")) # list as.nbnid(list(\"NHMSYS0001706186\",\"NHMSYS0000494848\",\"NBNSYS0000010867\")) ## dont check, much faster as.nbnid('NHMSYS0001706186', check=FALSE) as.nbnid(list(\"NHMSYS0001706186\",\"NHMSYS0000494848\",\"NBNSYS0000010867\"),   check=FALSE)  (out <- as.nbnid(c(\"NHMSYS0001706186\",\"NHMSYS0000494848\",   \"NBNSYS0000010867\"))) data.frame(out) as.nbnid( data.frame(out) )  # Get all data back get_nbnid_(\"Zootoca vivipara\") get_nbnid_(\"Poa annua\", rows=2) get_nbnid_(\"Poa annua\", rows=1:2) get_nbnid_(c(\"asdfadfasd\",\"Pinus contorta\"), rows=1:5)  # use curl options invisible(get_nbnid(\"Quercus douglasii\", verbose = TRUE)) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_pow.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Kew's Plants of the World code for a taxon — get_pow","title":"Get Kew's Plants of the World code for a taxon — get_pow","text":"Get Kew's Plants World code taxon","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_pow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Kew's Plants of the World code for a taxon — get_pow","text":"","code":"get_pow(   sci_com,   accepted = FALSE,   ask = TRUE,   messages = TRUE,   rows = NA,   family_filter = NULL,   rank_filter = NULL,   x = NULL,   ... )  as.pow(x, check = TRUE)  # S3 method for pow as.pow(x, check = TRUE)  # S3 method for character as.pow(x, check = TRUE)  # S3 method for list as.pow(x, check = TRUE)  # S3 method for data.frame as.pow(x, check = TRUE)  # S3 method for pow as.data.frame(x, ...)  get_pow_(sci_com, messages = TRUE, rows = NA, x = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_pow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Kew's Plants of the World code for a taxon — get_pow","text":"sci_com character; vector common scientific names. , taxon_state object (see taxon-state) accepted logical; TRUE, removes names accepted valid names ITIS. Set FALSE (default) give back accepted unaccepted names. ask logical; get_pow run interactive mode? TRUE one pow found teh species, user asked input. FALSE NA returned multiple matches. messages logical; progress printed? rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back pow class object one many identifiers. See get_pow_() get back , subset, raw data presented ask process. family_filter (character) division (aka phylum) name filter data retrieved NCBI. Optional. See Filtering . rank_filter (character) taxonomic rank name filter data retrieved NCBI. See rank_ref possible options. Though note data sources use atypical ranks, inspect data options. Optional. See Filtering . x get_pow(): deprecated, see sci_com. .pow, various, see examples ... Curl options passed crul::HttpClient check logical; Check ID matches existing DB, used .pow()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_pow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Kew's Plants of the World code for a taxon — get_pow","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_pow.html","id":"filtering","dir":"Reference","previous_headings":"","what":"Filtering","title":"Get Kew's Plants of the World code for a taxon — get_pow","text":"parameters family_filter anrank_filterer used search data provider, used filtering data subset closer target want.  two parameters, can use regex strings since use grep() internally match. Filtering narrows set matches query, removes rest.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_pow.html","id":"rate-limits","dir":"Reference","previous_headings":"","what":"Rate-limits","title":"Get Kew's Plants of the World code for a taxon — get_pow","text":"February 2019, KEW limiting 5 requests per second. Note may change number future. get errors contain 429 hitting rate limit, can get around requests Sys.sleep requests.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_pow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Kew's Plants of the World code for a taxon — get_pow","text":"","code":"if (FALSE) { get_pow(sci_com=\"Helianthus\") get_pow(c(\"Helianthus\",\"Quercus douglasii\"))  # Get back a subset get_pow(sci_com=\"Helianthus\", rows = 1) get_pow(sci_com=\"Helianthus\", rows = 1:10)  # When not found get_pow(\"howdy\") get_pow(c(\"Helianthus annuus\", \"howdy\"))  # Narrow down results  # to accepted names get_pow(\"Helianthus\", accepted = TRUE) # to a kingom  get_pow(\"Helianthus\", rank_filter = \"genus\") # to accepted names and rank get_pow(\"Helianthus annuus\", accepted = TRUE, rank_filter = \"species\") # to a family get_pow(\"flower\", family_filter = \"Acanthaceae\")  # Convert a pow without class information to a pow class z <- get_pow(\"Helianthus annuus\", accepted = TRUE, rank_filter = \"species\") # already a pow, returns the same as.pow(z) as.pow(\"urn:lsid:ipni.org:names:119003-2\") # character vector, length > 1 ids <- c(\"urn:lsid:ipni.org:names:119003-2\",\"urn:lsid:ipni.org:names:328247-2\") as.pow(ids) # list, with character strings as.pow(as.list(ids))  ## dont check, much faster as.pow(\"urn:lsid:ipni.org:names:119003-2\", check=FALSE) as.pow(ids, check=FALSE) as.pow(as.list(ids), check=FALSE)  (out <- as.pow(ids)) data.frame(out) as.pow( data.frame(out) )  # Get all data back get_pow_(\"Quercus\", rows=1:5) get_pow_(\"Quercus\", rows=1) get_pow_(c(\"Pinus\", \"Abies\"), rows = 1:3) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_seqs-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve gene sequences from NCBI by accession number. — get_seqs","title":"Retrieve gene sequences from NCBI by accession number. — get_seqs","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_seqs-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve gene sequences from NCBI by accession number. — get_seqs","text":"","code":"get_seqs(...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_tolid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the OTT id for a search term — get_tolid","title":"Get the OTT id for a search term — get_tolid","text":"Retrieve Open Tree Life Taxonomy (OTT) id taxon OpenTreeOfLife","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_tolid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the OTT id for a search term — get_tolid","text":"","code":"get_tolid(sci, ask = TRUE, messages = TRUE, rows = NA, sciname = NULL, ...)  as.tolid(x, check = TRUE)  # S3 method for tolid as.tolid(x, check = TRUE)  # S3 method for character as.tolid(x, check = TRUE)  # S3 method for list as.tolid(x, check = TRUE)  # S3 method for numeric as.tolid(x, check = TRUE)  # S3 method for data.frame as.tolid(x, check = TRUE)  # S3 method for tolid as.data.frame(x, ...)  get_tolid_(sci, messages = TRUE, rows = NA, sciname = NULL)"},{"path":"https://docs.ropensci.org/taxize/reference/get_tolid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the OTT id for a search term — get_tolid","text":"sci character; one scientific names. , taxon_state object (see taxon-state) ask logical; get_tolid run interactive mode? TRUE one TOL found species, user asked input. FALSE NA returned multiple matches. messages logical; progress printed? rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back tol class object one many identifiers. See get_tolid_() get back , subset, raw data presented ask process. sciname Deprecated, see sci ... Ignored x Input .tolid check logical; Check ID matches existing DB, used .tolid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_tolid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the OTT id for a search term — get_tolid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_tolid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the OTT id for a search term — get_tolid","text":"","code":"if (FALSE) { get_tolid(sci = \"Quercus douglasii\") get_tolid(sci = \"Chironomus riparius\") get_tolid(c(\"Chironomus riparius\",\"Quercus douglasii\")) splist <- c(\"annona cherimola\", 'annona muricata', \"quercus robur\",     \"shorea robusta\", \"pandanus patina\", \"oryza sativa\", \"durio zibethinus\") get_tolid(splist, messages=FALSE)  # specify rows to limit choices available get_tolid('Arni') get_tolid('Arni', rows=1) get_tolid('Arni', rows=1:2)  # When not found get_tolid(\"howdy\") get_tolid(c(\"Chironomus riparius\", \"howdy\"))  # Convert a tol without class information to a tol class as.tolid(get_tolid(\"Quercus douglasii\")) # already a tol, returns the same as.tolid(get_tolid(c(\"Chironomus riparius\",\"Pinus contorta\"))) # same as.tolid(5907893) # numeric as.tolid(c(3930798,515712,872577)) # numeric vector, length > 1 as.tolid(\"3930798\") # character as.tolid(c(\"3930798\",\"515712\",\"872577\")) # character vector, length > 1 as.tolid(list(\"3930798\",\"515712\",\"872577\")) # list, either numeric or character ## dont check, much faster as.tolid(\"3930798\", check=FALSE) as.tolid(3930798, check=FALSE) as.tolid(c(\"3930798\",\"515712\",\"872577\"), check=FALSE) as.tolid(list(\"3930798\",\"515712\",\"872577\"), check=FALSE)  (out <- as.tolid(c(3930798,515712,872577))) data.frame(out) as.tolid( data.frame(out) )  # Get all data back get_tolid_(\"Arni\") get_tolid_(\"Arni\", rows=1) get_tolid_(\"Arni\", rows=1:2) get_tolid_(c(\"asdfadfasd\",\"Pinus contorta\")) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_tpsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the NameID codes from Tropicos for taxonomic names. — get_tpsid","title":"Get the NameID codes from Tropicos for taxonomic names. — get_tpsid","text":"Get NameID codes Tropicos taxonomic names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_tpsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the NameID codes from Tropicos for taxonomic names. — get_tpsid","text":"","code":"get_tpsid(   sci,   ask = TRUE,   messages = TRUE,   key = NULL,   rows = NA,   family = NULL,   rank = NULL,   sciname = NULL,   ... )  as.tpsid(x, check = TRUE)  # S3 method for tpsid as.tpsid(x, check = TRUE)  # S3 method for character as.tpsid(x, check = TRUE)  # S3 method for list as.tpsid(x, check = TRUE)  # S3 method for numeric as.tpsid(x, check = TRUE)  # S3 method for data.frame as.tpsid(x, check = TRUE)  # S3 method for tpsid as.data.frame(x, ...)  get_tpsid_(sci, messages = TRUE, key = NULL, rows = NA, sciname = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_tpsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the NameID codes from Tropicos for taxonomic names. — get_tpsid","text":"sci (character) One scientific name's vector list. , taxon_state object (see taxon-state) ask logical; get_tpsid run interactive mode? TRUE one ID found species, user asked input. FALSE NA returned multiple matches. messages logical; TRUE actual taxon queried printed console. key API key; see taxize-authentication rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back tpsid class object one many identifiers. See get_tpsid_() get back , subset, raw data presented ask process. family (character) family name. Optional. See Filtering . rank (character) taxonomic rank name. See rank_ref possible options. Though note data sources use atypical ranks, inspect data options. Optional. See Filtering . sciname Deprecated, see sci ... arguments passed tp_search(). x Input .tpsid() check logical; Check ID matches existing DB, used .tpsid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_tpsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the NameID codes from Tropicos for taxonomic names. — get_tpsid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_tpsid.html","id":"filtering","dir":"Reference","previous_headings":"","what":"Filtering","title":"Get the NameID codes from Tropicos for taxonomic names. — get_tpsid","text":"parameters family anranknk used search data provider, used filtering data subset closer target want.  parameters, can use regex strings since use grep() internally match. Filtering narrows set matches query, removes rest.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_tpsid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the NameID codes from Tropicos for taxonomic names. — get_tpsid","text":"Scott Chamberlain,","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_tpsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the NameID codes from Tropicos for taxonomic names. — get_tpsid","text":"","code":"if (FALSE) { get_tpsid(sci='Poa annua') get_tpsid(sci='Pinus contorta')  get_tpsid(c(\"Poa annua\", \"Pinus contorta\"))  # specify rows to limit choices available get_tpsid('Poa ann') get_tpsid('Poa ann', rows=1) get_tpsid('Poa ann', rows=25) get_tpsid('Poa ann', rows=1:2)  # When not found, NA given (howdy is not a species name, and Chrinomus is a fly) get_tpsid(\"howdy\") get_tpsid(c(\"Chironomus riparius\", \"howdy\"))  # Narrow down results to a division or rank, or both ## Satyrium example ### Results w/o narrowing get_tpsid(\"Satyrium\") ### w/ rank get_tpsid(\"Satyrium\", rank = \"var.\") get_tpsid(\"Satyrium\", rank = \"sp.\")  ## w/ family get_tpsid(\"Poa\") get_tpsid(\"Poa\", family = \"Iridaceae\") get_tpsid(\"Poa\", family = \"Orchidaceae\") get_tpsid(\"Poa\", family = \"Orchidaceae\", rank = \"gen.\")  # Fuzzy filter on any filtering fields ## uses grep on the inside get_tpsid(\"Poa\", family = \"orchidaceae\") get_tpsid(\"Aga\", fuzzy = TRUE, parent = \"*idae\")  # pass to classification function to get a taxonomic hierarchy classification(get_tpsid(sci='Poa annua'))  # Convert a tpsid without class information to a tpsid class as.tpsid(get_tpsid(\"Pinus contorta\")) # already a tpsid, returns the same as.tpsid(get_tpsid(c(\"Chironomus riparius\",\"Pinus contorta\"))) # same as.tpsid(24900183) # numeric as.tpsid(c(24900183,50150089,50079838)) # numeric vector, length > 1 as.tpsid(\"24900183\") # character as.tpsid(c(\"24900183\",\"50150089\",\"50079838\")) # character vector, length > 1 as.tpsid(list(\"24900183\",\"50150089\",\"50079838\")) # list, either numeric or character ## dont check, much faster as.tpsid(\"24900183\", check=FALSE) as.tpsid(24900183, check=FALSE) as.tpsid(c(\"24900183\",\"50150089\",\"50079838\"), check=FALSE) as.tpsid(list(\"24900183\",\"50150089\",\"50079838\"), check=FALSE)  (out <- as.tpsid(c(24900183,50150089,50079838))) data.frame(out) as.tpsid( data.frame(out) )  # Get all data back get_tpsid_(\"Poa annua\") get_tpsid_(\"Poa annua\", rows=2) get_tpsid_(\"Poa annua\", rows=1:2) get_tpsid_(c(\"asdfadfasd\",\"Pinus contorta\"), rows=1:5)  # use curl options invisible(get_tpsid(\"Quercus douglasii\", messages = TRUE)) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_tsn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the TSN code for a search term. — get_tsn","title":"Get the TSN code for a search term. — get_tsn","text":"Retrieve taxonomic serial numbers (TSN) taxon ITIS.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_tsn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the TSN code for a search term. — get_tsn","text":"","code":"get_tsn(   sci_com,   searchtype = \"scientific\",   accepted = FALSE,   ask = TRUE,   messages = TRUE,   rows = NA,   searchterm = NULL,   ... )  as.tsn(x, check = TRUE)  # S3 method for tsn as.tsn(x, check = TRUE)  # S3 method for character as.tsn(x, check = TRUE)  # S3 method for list as.tsn(x, check = TRUE)  # S3 method for numeric as.tsn(x, check = TRUE)  # S3 method for data.frame as.tsn(x, check = TRUE)  # S3 method for tsn as.data.frame(x, ...)  get_tsn_(   sci_com,   messages = TRUE,   searchtype = \"scientific\",   accepted = TRUE,   rows = NA,   searchterm = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/get_tsn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the TSN code for a search term. — get_tsn","text":"sci_com character; vector common scientific names. , taxon_state object (see taxon-state) searchtype character; One 'scientific' 'common', unique abbreviation accepted logical; TRUE, removes names accepted valid names ITIS. Set FALSE (default) give back accepted unaccepted names. ask logical; get_tsn run interactive mode? TRUE one TSN found species, user asked input. FALSE NA returned multiple matches. messages logical; progress printed? rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back tsn class object one many identifiers. See get_tsn_() get back , subset, raw data presented ask process. searchterm Deprecated, see sci_com ... Ignored x Input .tsn check logical; Check ID matches existing DB, used .tsn()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_tsn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the TSN code for a search term. — get_tsn","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_tsn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the TSN code for a search term. — get_tsn","text":"","code":"if (FALSE) { get_tsn(\"Quercus douglasii\") get_tsn(\"Chironomus riparius\") get_tsn(c(\"Chironomus riparius\",\"Quercus douglasii\")) splist <- c(\"annona cherimola\", 'annona muricata', \"quercus robur\",     \"shorea robusta\", \"pandanus patina\", \"oryza sativa\", \"durio zibethinus\") get_tsn(splist, messages=FALSE)  # specify rows to limit choices available get_tsn('Arni') get_tsn('Arni', rows=1) get_tsn('Arni', rows=1:2)  # When not found get_tsn(\"howdy\") get_tsn(c(\"Chironomus riparius\", \"howdy\"))  # Using common names get_tsn(\"black bear\", searchtype=\"common\")  # Convert a tsn without class information to a tsn class as.tsn(get_tsn(\"Quercus douglasii\")) # already a tsn, returns the same as.tsn(get_tsn(c(\"Chironomus riparius\",\"Pinus contorta\"))) # same as.tsn(19322) # numeric as.tsn(c(19322,129313,506198)) # numeric vector, length > 1 as.tsn(\"19322\") # character as.tsn(c(\"19322\",\"129313\",\"506198\")) # character vector, length > 1 as.tsn(list(\"19322\",\"129313\",\"506198\")) # list, either numeric or character ## dont check, much faster as.tsn(\"19322\", check=FALSE) as.tsn(19322, check=FALSE) as.tsn(c(\"19322\",\"129313\",\"506198\"), check=FALSE) as.tsn(list(\"19322\",\"129313\",\"506198\"), check=FALSE)  (out <- as.tsn(c(19322,129313,506198))) data.frame(out) as.tsn( data.frame(out) )  # Get all data back get_tsn_(\"Arni\") get_tsn_(\"Arni\", rows=1) get_tsn_(\"Arni\", rows=1:2) get_tsn_(c(\"asdfadfasd\",\"Pinus contorta\"), rows=1:5) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_ubioid-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the uBio id for a search term — get_ubioid","title":"Get the uBio id for a search term — get_ubioid","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_ubioid-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the uBio id for a search term — get_ubioid","text":"","code":"get_ubioid(...)  as.ubioid(...)  get_ubioid_(...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the UID codes from NCBI for taxonomic names. — get_uid","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"Retrieve Unique Identifier (UID) taxon NCBI taxonomy browser.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"","code":"get_uid(   sci_com,   ask = TRUE,   messages = TRUE,   rows = NA,   modifier = NULL,   rank_query = NULL,   division_filter = NULL,   rank_filter = NULL,   key = NULL,   sciname = NULL,   ... )  as.uid(x, check = TRUE)  # S3 method for uid as.uid(x, check = TRUE)  # S3 method for character as.uid(x, check = TRUE)  # S3 method for list as.uid(x, check = TRUE)  # S3 method for numeric as.uid(x, check = TRUE)  # S3 method for data.frame as.uid(x, check = TRUE)  # S3 method for uid as.data.frame(x, ...)  get_uid_(sci_com, messages = TRUE, rows = NA, key = NULL, sciname = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"sci_com character; scientific common name. , taxon_state object (see taxon-state) ask logical; get_uid run interactive mode? TRUE one TSN found species, user asked input. FALSE NA returned multiple matches. messages logical; TRUE (default) actual taxon queried printed console. rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back uid class object one many identifiers. See get_uid_() get back , subset, raw data presented ask process. modifier (character) modifier sci_com given. Options include: Organism, Scientific Name, Common Name, Names, Division, Filter, Lineage, GC, MGC, Name Tokens, Next Level, PGC, Properties, Rank, Subtree, Synonym, Text Word. checked, make sure entered correctly, . rank_query (character) taxonomic rank name modify query sent NCBI. See rank_ref possible options. Though note data sources use atypical ranks, inspect data options. Optional. See Querying . division_filter (character) division (aka phylum) name filter data retrieved NCBI. Optional. See Filtering . rank_filter (character) taxonomic rank name filter data retrieved NCBI. See rank_ref possible options. Though note data sources use atypical ranks, inspect data options. Optional. See Filtering . key (character) NCBI Entrez API key. optional. See Details. sciname Deprecated, see sci_com ... Ignored x Input .uid() check logical; Check ID matches existing DB, used .uid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"rate-limits","dir":"Reference","previous_headings":"","what":"Rate limits","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"case run errors due rate limit exceeded, see taxize_options(), can set ncbi_sleep.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"querying","dir":"Reference","previous_headings":"","what":"Querying","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"parameter rank_query used search sent NCBI, whereas rank_filter filters data comes back. parameter modifier adds modifiers name. example, modifier=\"Organism\" adds name, giving e.g., Helianthus[Organism].","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"filtering","dir":"Reference","previous_headings":"","what":"Filtering","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"parameters division_filter rank_filter used search data provider, used filtering data subset closer target want. parameters, can use regex strings since use grep() internally match. Filtering narrows set matches query, removes rest.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"beware","dir":"Reference","previous_headings":"","what":"Beware","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"NCBI funny things sometimes. E.g., search Fringella morel, slight misspelling genus name, non-existent epithet, NCBI gives back morel fungal species. addition, NCBI really fuzzy searching well, slight mis-spelling names, likely get expecting. lesson: clean names using function. data sources better fuzzy matching.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"See taxize-authentication help authentication Note even though pass key .uid functions, still use Entrez API key saved R option environment variable.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"http-version","dir":"Reference","previous_headings":"","what":"HTTP version","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"Eduard Szoecs, eduardszoecs@gmail.com","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_uid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the UID codes from NCBI for taxonomic names. — get_uid","text":"","code":"if (FALSE) { get_uid(c(\"Chironomus riparius\", \"Chaetopteryx\")) get_uid(c(\"Chironomus riparius\", \"aaa vva\"))  # When not found get_uid(\"howdy\") get_uid(c(\"Chironomus riparius\", \"howdy\"))  # Narrow down results to a division or rank, or both ## By modifying the query ### w/ modifiers to the name get_uid(sci_com = \"Aratinga acuticauda\", modifier = \"Organism\") get_uid(sci_com = \"bear\", modifier = \"Common Name\")  ### w/ rank query get_uid(sci_com = \"Pinus\", rank_query = \"genus\") get_uid(sci_com = \"Pinus\", rank_query = \"subgenus\") ### division query doesn't really work, for unknown reasons, so not available  ## By filtering the result ## Echinacea example ### Results w/o narrowing get_uid(\"Echinacea\") ### w/ division get_uid(sci_com = \"Echinacea\", division_filter = \"eudicots\") get_uid(sci_com = \"Echinacea\", division_filter = \"sea urchins\")  ## Satyrium example ### Results w/o narrowing get_uid(sci_com = \"Satyrium\") ### w/ division get_uid(sci_com = \"Satyrium\", division_filter = \"monocots\") get_uid(sci_com = \"Satyrium\", division_filter = \"butterflies\")  ## Rank example get_uid(sci_com = \"Pinus\") get_uid(sci_com = \"Pinus\", rank_filter = \"genus\") get_uid(sci_com = \"Pinus\", rank_filter = \"subgenus\")  # Fuzzy filter on any filtering fields ## uses grep on the inside get_uid(\"Satyrium\", division_filter = \"m\")  # specify rows to limit choices available get_uid('Dugesia') # user prompt needed get_uid('Dugesia', rows=1) # 2 choices, so returns only 1 row, so no choices get_uid('Dugesia', ask = FALSE) # returns NA for multiple matches  # Go to a website with more info on the taxon res <- get_uid(\"Chironomus riparius\") browseURL(attr(res, \"uri\"))  # Convert a uid without class information to a uid class as.uid(get_uid(\"Chironomus riparius\")) # already a uid, returns the same as.uid(get_uid(c(\"Chironomus riparius\",\"Pinus contorta\"))) # same as.uid(315567) # numeric as.uid(c(315567,3339,9696)) # numeric vector, length > 1 as.uid(\"315567\") # character as.uid(c(\"315567\",\"3339\",\"9696\")) # character vector, length > 1 as.uid(list(\"315567\",\"3339\",\"9696\")) # list, either numeric or character ## dont check, much faster as.uid(\"315567\", check=FALSE) as.uid(315567, check=FALSE) as.uid(c(\"315567\",\"3339\",\"9696\"), check=FALSE) as.uid(list(\"315567\",\"3339\",\"9696\"), check=FALSE)  (out <- as.uid(c(315567,3339,9696))) data.frame(out) as.uid( data.frame(out) )  # Get all data back get_uid_(\"Puma concolor\") get_uid_(\"Dugesia\") get_uid_(\"Dugesia\", rows=2) get_uid_(\"Dugesia\", rows=1:2) get_uid_(c(\"asdfadfasd\",\"Pinus contorta\"))  # use curl options get_uid(\"Quercus douglasii\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/get_wiki.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the page name for a Wiki taxon — get_wiki","title":"Get the page name for a Wiki taxon — get_wiki","text":"Get page name Wiki taxon","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_wiki.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the page name for a Wiki taxon — get_wiki","text":"","code":"get_wiki(   sci_com,   wiki_site = \"species\",   wiki = \"en\",   ask = TRUE,   messages = TRUE,   limit = 100,   rows = NA,   x = NULL,   ... )  as.wiki(x, check = TRUE, wiki_site = \"species\", wiki = \"en\")  # S3 method for wiki as.wiki(x, check = TRUE, wiki_site = \"species\", wiki = \"en\")  # S3 method for character as.wiki(x, check = TRUE, wiki_site = \"species\", wiki = \"en\")  # S3 method for list as.wiki(x, check = TRUE, wiki_site = \"species\", wiki = \"en\")  # S3 method for numeric as.wiki(x, check = TRUE, wiki_site = \"species\", wiki = \"en\")  # S3 method for data.frame as.wiki(x, check = TRUE, wiki_site = \"species\", wiki = \"en\")  # S3 method for wiki as.data.frame(x, ...)  get_wiki_(   x,   messages = TRUE,   wiki_site = \"species\",   wiki = \"en\",   limit = 100,   rows = NA,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/get_wiki.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the page name for a Wiki taxon — get_wiki","text":"sci_com (character) vector common scientific names. , taxon_state object (see taxon-state) wiki_site (character) Wiki site. One species (default), pedia, commons wiki (character) language. Default: en ask logical; get_wiki run interactive mode? TRUE one wiki found species, user asked input. FALSE NA returned multiple matches. messages logical; progress printed? limit (integer) number records return rows numeric; number 1 infinity. default NA, rows considered. Note function still gives back wiki class object one many identifiers. See get_wiki_() get back , subset, raw data presented ask process. x get_wiki(): deprecated, see sci_com. .wiki, various, see examples ... Ignored check logical; Check ID matches existing DB, used .wiki()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_wiki.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the page name for a Wiki taxon — get_wiki","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_wiki.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the page name for a Wiki taxon — get_wiki","text":"wiki_site = \"pedia\" , use english language site default. Set wiki parameter different language site.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_wiki.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the page name for a Wiki taxon — get_wiki","text":"","code":"if (FALSE) { get_wiki(sci_com = \"Quercus douglasii\") get_wiki(sci_com = \"Quercu\") get_wiki(sci_com = \"Quercu\", \"pedia\") get_wiki(sci_com = \"Quercu\", \"commons\")  # diff. wikis with wikipedia get_wiki(\"Malus domestica\", \"pedia\") get_wiki(\"Malus domestica\", \"pedia\", \"fr\")  # as coercion as.wiki(\"Malus_domestica\") as.wiki(\"Malus_domestica\", wiki_site = \"commons\") as.wiki(\"Malus_domestica\", wiki_site = \"pedia\") as.wiki(\"Malus_domestica\", wiki_site = \"pedia\", wiki = \"fr\") as.wiki(\"Malus_domestica\", wiki_site = \"pedia\", wiki = \"da\") }"},{"path":"https://docs.ropensci.org/taxize/reference/get_wormsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Worms ID for a taxon name — get_wormsid","title":"Get Worms ID for a taxon name — get_wormsid","text":"Retrieve Worms ID taxon World Register Marine Species (WORMS).","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_wormsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Worms ID for a taxon name — get_wormsid","text":"","code":"get_wormsid(   sci_com,   searchtype = \"scientific\",   marine_only = TRUE,   fuzzy = NULL,   accepted = FALSE,   ask = TRUE,   messages = TRUE,   rows = NA,   query = NULL,   ... )  as.wormsid(x, check = TRUE)  # S3 method for wormsid as.wormsid(x, check = TRUE)  # S3 method for character as.wormsid(x, check = TRUE)  # S3 method for list as.wormsid(x, check = TRUE)  # S3 method for numeric as.wormsid(x, check = TRUE)  # S3 method for data.frame as.wormsid(x, check = TRUE)  # S3 method for wormsid as.data.frame(x, ...)  get_wormsid_(   sci_com,   messages = TRUE,   searchtype = \"scientific\",   marine_only = TRUE,   fuzzy = NULL,   accepted = TRUE,   rows = NA,   query = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/get_wormsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Worms ID for a taxon name — get_wormsid","text":"sci_com character; vector common scientific names. , taxon_state object (see taxon-state) searchtype character; One 'scientific' 'common', unique abbreviation marine_only logical; marine ? default: TRUE (used searchtype=\"scientific\"); passed worrms::wm_records_name() fuzzy logical; fuzzy search. default: NULL (TRUE searchtype=\"scientific\" FALSE searchtype=\"common\" match default values parameters worrms package); passed worrms::wm_records_name() worrms::wm_records_common() accepted logical; TRUE, removes names accepted valid names WORMS. Set FALSE (default) give back accepted unaccepted names. ask logical; get_wormsid run interactive mode? TRUE one wormsid found species, user asked input. FALSE NA returned multiple matches. messages logical; progress printed? rows numeric; number 1 infinity. default NaN, rows considered. Note function still gives back wormsid class object one many identifiers. See get_wormsid_() get back , subset, raw data presented ask process. query Deprecated, see sci_com ... Ignored x Input .wormsid check logical; Check ID matches existing DB, used .wormsid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/get_wormsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Worms ID for a taxon name — get_wormsid","text":"vector taxonomic identifiers S3 class. taxon found NA given. one identifier found function asks user input ask = TRUE, otherwise returns NA. ask=FALSE rows equal NA, data.frame given back, uid class, pass functions normally can. See get_id_details details including attributes exceptions","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/get_wormsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Worms ID for a taxon name — get_wormsid","text":"","code":"if (FALSE) { (x <- get_wormsid('Gadus morhua')) attributes(x) attr(x, \"match\") attr(x, \"multiple_matches\") attr(x, \"pattern_match\") attr(x, \"uri\")  get_wormsid('Pomatomus saltatrix') get_wormsid(c(\"Gadus morhua\", \"Lichenopora neapolitana\"))  # marine_only get_wormsid(\"Apedinella\", marine_only=TRUE) get_wormsid(\"Apedinella\", marine_only=FALSE)  # fuzzy ## searchtype=\"scientific\": fuzzy is TRUE by default get_wormsid(\"Platypro\", searchtype=\"scientific\", fuzzy=TRUE) get_wormsid(\"Platypro\", searchtype=\"scientific\", fuzzy=FALSE) ## searchtype=\"common\": fuzzy is FALSE by default get_wormsid(\"clam\", searchtype=\"common\", fuzzy=FALSE) get_wormsid(\"clam\", searchtype=\"common\", fuzzy=TRUE)  # by common name get_wormsid(\"dolphin\", 'common') get_wormsid(\"clam\", 'common')  # specify rows to limit choices available get_wormsid('Plat') get_wormsid('Plat', rows=1) get_wormsid('Plat', rows=1:2)  # When not found get_wormsid(\"howdy\") get_wormsid(c('Gadus morhua', \"howdy\"))  # Convert a wormsid without class information to a wormsid class # already a wormsid, returns the same as.wormsid(get_wormsid('Gadus morhua')) # same as.wormsid(get_wormsid(c('Gadus morhua', 'Pomatomus saltatrix'))) # numeric as.wormsid(126436) # numeric vector, length > 1 as.wormsid(c(126436,151482)) # character as.wormsid(\"126436\") # character vector, length > 1 as.wormsid(c(\"126436\",\"151482\")) # list, either numeric or character as.wormsid(list(\"126436\",\"151482\")) ## dont check, much faster as.wormsid(\"126436\", check=FALSE) as.wormsid(126436, check=FALSE) as.wormsid(c(\"126436\",\"151482\"), check=FALSE) as.wormsid(list(\"126436\",\"151482\"), check=FALSE)  (out <- as.wormsid(c(126436,151482))) data.frame(out) as.wormsid( data.frame(out) )  # Get all data back get_wormsid_(\"Plat\") get_wormsid_(\"Plat\", rows=1) get_wormsid_(\"Plat\", rows=1:2) get_wormsid_(\"Plat\", rows=1:75) # get_wormsid_(c(\"asdfadfasd\",\"Plat\"), rows=1:5) }"},{"path":"https://docs.ropensci.org/taxize/reference/getkey.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get API key. — getkey","title":"Function to get API key. — getkey","text":"Checks first get key .Rprofile .Renviron (similar) file","code":""},{"path":"https://docs.ropensci.org/taxize/reference/getkey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get API key. — getkey","text":"","code":"getkey(x = NULL, service)"},{"path":"https://docs.ropensci.org/taxize/reference/getkey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get API key. — getkey","text":"x (character) API key, defaults NULL service (character) API data provider, used match default guest key (Tropicos; guest key NCBI IUCN, get )","code":""},{"path":"https://docs.ropensci.org/taxize/reference/getkey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to get API key. — getkey","text":"","code":"if (FALSE) { getkey(service=\"tropicos\") getkey(service=\"iucn\") getkey(service=\"entrez\") }"},{"path":"https://docs.ropensci.org/taxize/reference/gisd_invasive-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Check invasive species status for a set of species from GISD database — gisd_isinvasive","title":"Check invasive species status for a set of species from GISD database — gisd_isinvasive","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gisd_invasive-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check invasive species status for a set of species from GISD database — gisd_isinvasive","text":"","code":"gisd_isinvasive(...)"},{"path":"https://docs.ropensci.org/taxize/reference/gn_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse scientific names using Global Names Parser — gn_parse","title":"Parse scientific names using Global Names Parser — gn_parse","text":"Parse scientific names using Global Names Parser","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gn_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse scientific names using Global Names Parser — gn_parse","text":"","code":"gn_parse(names, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/gn_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse scientific names using Global Names Parser — gn_parse","text":"names vector length 1 taxonomic names ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gn_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse scientific names using Global Names Parser — gn_parse","text":"data.frame results, submitted names, parsed names additional information.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gn_parse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse scientific names using Global Names Parser — gn_parse","text":"http://gni.globalnames.org/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/gn_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse scientific names using Global Names Parser — gn_parse","text":"","code":"if (FALSE) { gn_parse(\"Cyanistes caeruleus\") gn_parse(\"Plantago minor\") gn_parse(\"Plantago minor minor\") gn_parse(c(\"Plantago minor minor\",\"Helianthus annuus texanus\"))  # if > 20 names, uses an HTTP POST request x <- names_list(\"species\", size = 30) gn_parse(x)  # pass on curl options gn_parse(\"Cyanistes caeruleus\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/gni_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for taxonomic name details using the Global Names Index — gni_details","title":"Search for taxonomic name details using the Global Names Index — gni_details","text":"Uses Global Names Index, see http://gni.globalnames.org/","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for taxonomic name details using the Global Names Index — gni_details","text":"","code":"gni_details(id, all_records = 1, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/gni_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for taxonomic name details using the Global Names Index — gni_details","text":"id Name id. Required. all_records all_records 1, GNI returns records repositories name string (takes 0, 1 [default]). ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for taxonomic name details using the Global Names Index — gni_details","text":"Data.frame results.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/gni_details.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search for taxonomic name details using the Global Names Index — gni_details","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for taxonomic name details using the Global Names Index — gni_details","text":"","code":"if (FALSE) { gni_details(id = 17802847)  # pass on curl options gni_details(id = 17802847, verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/gni_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse scientific names using EOL's name parser. — gni_parse","title":"Parse scientific names using EOL's name parser. — gni_parse","text":"Parse scientific names using EOL's name parser.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse scientific names using EOL's name parser. — gni_parse","text":"","code":"gni_parse(names, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/gni_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse scientific names using EOL's name parser. — gni_parse","text":"names vector length 1 taxonomic names ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse scientific names using EOL's name parser. — gni_parse","text":"data.frame results, submitted names, parsed names additional information.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_parse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse scientific names using EOL's name parser. — gni_parse","text":"http://gni.globalnames.org/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/gni_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse scientific names using EOL's name parser. — gni_parse","text":"","code":"if (FALSE) { gni_parse(\"Cyanistes caeruleus\") gni_parse(\"Plantago minor\") gni_parse(\"Plantago minor minor\") gni_parse(c(\"Plantago minor minor\",\"Helianthus annuus texanus\"))  # pass on curl options gni_parse(\"Cyanistes caeruleus\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/gni_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for taxonomic names using the Global Names Index — gni_search","title":"Search for taxonomic names using the Global Names Index — gni_search","text":"Uses Global Names Index, see http://gni.globalnames.org","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for taxonomic names using the Global Names Index — gni_search","text":"","code":"gni_search(   sci,   per_page = NULL,   page = NULL,   justtotal = FALSE,   parse_names = FALSE,   search_term = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/gni_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for taxonomic names using the Global Names Index — gni_search","text":"sci (character) required. Name pattern want search . WARNING: work common names. Search term may include following options (Note: can, uni, gen, sp, ssp, au, yr work parsed names) *    wild card - Search part word (E.g.: planta*) exact exact match    - Search exact match literal string (E.g.: exact:Parus major) ns name string- Search literal string beginning (modifiers ignored) (E.g.: ns:parus maj*) can canonical form- Search name without authors (modifiers ignored)    (E.g.: can:parus major) uni uninomial- Search higher taxa    (E.g.: uni:parus) gen genus - Search genus epithet species name (E.g.: gen:parus) sp species - Search species epithet (E.g.: sp:major) ssp subspecies - Search infraspecies epithet (E.g.: ssp:major) au author - Search author word    (E.g.: au:Shipunov) yr year - Search year (E.g.: yr:2005) per_page Number items per one page (numbers larger 1000 decreased 1000) (default 30). page Page number want see (default 1). justtotal Return total results found. parse_names TRUE, use gni_parse() parse names. Default: FALSE search_term Deprecated, see sci ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for taxonomic names using the Global Names Index — gni_search","text":"data.frame results.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for taxonomic names using the Global Names Index — gni_search","text":"Note can use fuzzy searching, e.g., attaching asterisk end search term. See first two examples ","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search for taxonomic names using the Global Names Index — gni_search","text":"http://gni.globalnames.org/ https://github.com/dimus/gni/wiki/api","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/gni_search.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search for taxonomic names using the Global Names Index — gni_search","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gni_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for taxonomic names using the Global Names Index — gni_search","text":"","code":"if (FALSE) { gni_search(sci = \"ani*\") gni_search(sci = \"ama*\", per_page = 3, page = 21) gni_search(sci = \"animalia\", per_page = 8, page = 1) gni_search(sci = \"animalia\", per_page = 8, page = 1, justtotal=TRUE)  gni_search(sci = \"Cyanistes caeruleus\", parse_names=TRUE)  # pass on curl options gni_search(sci = \"ani*\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/gnr_datasources.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Names Resolver Data Sources — gnr_datasources","title":"Global Names Resolver Data Sources — gnr_datasources","text":"Retrieve data sources used Global Names Resolver","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_datasources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Names Resolver Data Sources — gnr_datasources","text":"","code":"gnr_datasources(..., todf)"},{"path":"https://docs.ropensci.org/taxize/reference/gnr_datasources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Names Resolver Data Sources — gnr_datasources","text":"... Curl options passed crul::HttpClient todf defunct, always get data.frame back now","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_datasources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Names Resolver Data Sources — gnr_datasources","text":"data.frame/tibble","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_datasources.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Global Names Resolver Data Sources — gnr_datasources","text":"https://resolver.globalnames.org/data_sources","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/gnr_datasources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Names Resolver Data Sources — gnr_datasources","text":"","code":"if (FALSE) { # all data sources gnr_datasources()  # give me the id for EOL out <- gnr_datasources() out[out$title == \"EOL\", \"id\"]  # Fuzzy search for sources with the word zoo out <- gnr_datasources() out[agrep(\"zoo\", out$title, ignore.case = TRUE), ] }"},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve names using Global Names Resolver — gnr_resolve","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"See section Age datasets Global Names Resolver","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"","code":"gnr_resolve(   sci,   data_source_ids = NULL,   resolve_once = FALSE,   with_context = FALSE,   canonical = FALSE,   highestscore = TRUE,   best_match_only = FALSE,   preferred_data_sources = NULL,   with_canonical_ranks = FALSE,   http = \"get\",   cap_first = TRUE,   fields = \"minimal\",   names = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"sci character; taxonomic names resolved. work vernacular/common names. data_source_ids character; IDs specify data source searched. See gnr_datasources(). resolve_once logical; Find first available match instead matches across data sources possible renderings name. TRUE, response rapid incomplete. with_context logical; Reduce likelihood matches taxonomic homonyms. TRUE common taxonomic context calculated supplied names matches data sources classification tree paths. Names determined context penalized score calculation. canonical logical; FALSE (default), gives back names taxonomic authorities. TRUE, returns canocial names (without tax. authorities abbreviations). highestscore logical; Return names highest score searched name? Defunct best_match_only (logical) TRUE, best match returned. Default: FALSE preferred_data_sources (character) vector one data source IDs. with_canonical_ranks (logical) Returns names infraspecific ranks, present. TRUE, force canonical=TRUE, otherwise parameter effect. Default: FALSE http HTTP method use, one \"get\" \"post\". Default: \"get\". Use http=\"post\" large queries. Queries > 300 records use \"post\" automatically \"get\" fail cap_first (logical) name, fix first name part capitalized, others . web service sensitive capitalization, get different results depending capitalization. First name capitalized likely want default. FALSE, names modified. Default: TRUE fields (character) One minimal (default) . Minimal gives back just four fields, whereas gives fields back. names Deprecated, see sci ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"data.frame one attribute not_known: character vector taxa unknown Global Names Index. Access like attr(output, \"not_known\"), attributes(output)$not_known. Columns output data.frame: user_supplied_name (character) - name passed names parameter, unchanged. submitted_name (character) - actual name submitted GNR service data_source_id (integer/numeric) - data source ID data_source_title (character) - data source name gni_uuid (character) - Global Names Index UUID (aka identifier) matched_name (character) - matched name GNR service matched_name2 (character) - returned canonical=TRUE, case matched_name returned classification_path (character) - names taxonomic classification tree, names separated pipes (|) classification_path_ranks (character) - ranks taxonomic classification tree, names separated pipes (|) classification_path_ids (character) - identifiers taxonomic classification tree, names separated pipes (|) taxon_id (character) - taxon identifier edit_distance (integer/numeric) - edit distance imported_at (character) - date imported match_type (integer/numeric) - match type match_value (character) - description match type prescore (character) - pre score score (numeric) - score local_id (character) - local identifier url (character) - URL taxon global_id (character) - global identifier current_taxon_id (character) - current taxon id current_name_string (character) - current name string Note names (.e. rows) dropped NA, zero length strings, character vectors, found API.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":"age-of-datasets-in-the-global-names-resolver","dir":"Reference","previous_headings":"","what":"Age of datasets in the Global Names Resolver","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"IMPORTANT: Datasets used Global Names Resolver vary recently updated. See updated_at field output gnr_datasources() dates dataset last updated.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":"preferred-data-sources","dir":"Reference","previous_headings":"","what":"preferred_data_sources","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"preferred_data_sources used, preferred data returned - results.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"http://gnrd.globalnames.org/api http://gnrd.globalnames.org/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/gnr_resolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve names using Global Names Resolver — gnr_resolve","text":"","code":"if (FALSE) { gnr_resolve(sci = c(\"Helianthus annuus\", \"Homo sapiens\")) gnr_resolve(sci = c(\"Asteraceae\", \"Plantae\"))  # Using data source 12 (Encyclopedia of Life) sources <- gnr_datasources() sources eol <- sources$id[sources$title == 'EOL'] gnr_resolve(names=c(\"Helianthos annuus\",\"Homo sapians\"), data_source_ids=eol)  # Two species in the NE Brazil catalogue sps <- c('Justicia brasiliana','Schinopsis brasiliensis') gnr_resolve(sci = sps, data_source_ids = 145)  # Best match only, compare the two gnr_resolve(sci = \"Helianthus annuus\", best_match_only = FALSE) gnr_resolve(sci = \"Helianthus annuus\", best_match_only = TRUE)  # Preferred data source gnr_resolve(sci = \"Helianthus annuus\", preferred_data_sources = c(3,4))  # Return canonical names - default is canonical=FALSE head(gnr_resolve(sci = \"Helianthus annuus\")) head(gnr_resolve(sci = \"Helianthus annuus\", canonical=TRUE))  # Return canonical names with authority stripped but # ranks still present gnr_resolve(\"Scorzonera hispanica L. subsp. asphodeloides Wallr.\") ## vs. gnr_resolve(\"Scorzonera hispanica L. subsp. asphodeloides Wallr.\",    with_canonical_ranks = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/id2name.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomic IDs to taxonomic names — id2name","title":"Taxonomic IDs to taxonomic names — id2name","text":"Taxonomic IDs taxonomic names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/id2name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomic IDs to taxonomic names — id2name","text":"","code":"id2name(id, db = NULL, x = NULL, ...)  # S3 method for default id2name(id, db = NULL, x = NULL, ...)  # S3 method for tolid id2name(id, ...)  # S3 method for tsn id2name(id, ...)  # S3 method for uid id2name(id, ...)  # S3 method for wormsid id2name(id, ...)  # S3 method for gbifid id2name(id, ...)  # S3 method for boldid id2name(id, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/id2name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomic IDs to taxonomic names — id2name","text":"id vector taxonomic IDs (character numeric) db (character) database query. One tol, itis, ncbi, worms, gbif, bold. Note taxonomic data source  identifiers, provide wrong db value identifier get result, likely wrong (expecting). using ncbi recommend getting API keys; see taxize-authentication x Deprecated, see id ... args passed tol_id2name itis_getrecord, internal functions. See functions parameters can passed .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/id2name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomic IDs to taxonomic names — id2name","text":"named list data.frames, named input taxonomic ids","code":""},{"path":"https://docs.ropensci.org/taxize/reference/id2name.html","id":"http-version-for-ncbi-requests","dir":"Reference","previous_headings":"","what":"HTTP version for NCBI requests","title":"Taxonomic IDs to taxonomic names — id2name","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":"https://docs.ropensci.org/taxize/reference/id2name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomic IDs to taxonomic names — id2name","text":"","code":"if (FALSE) { # ITIS id2name(19322, db = \"itis\")  # TOL id2name(515698, db = \"tol\") # get NCBI ID and pass to classification() x <- id2name(515698, db = \"tol\") classification(as.uid(x[[1]]$tax_sources_ncbi))  # NCBI id2name(315567, db = \"ncbi\") id2name(3339, db = \"ncbi\") id2name(9696, db = \"ncbi\") id2name(c(9695, 9696), db = \"ncbi\")  # WORMS id2name(105706, db = \"worms\")  # GBIF id2name(2441176, db = \"gbif\")  # BOLD id2name(88899, db = \"bold\") }"},{"path":"https://docs.ropensci.org/taxize/reference/ion.html","id":null,"dir":"Reference","previous_headings":"","what":"ION - Index to Organism Names — ion","title":"ION - Index to Organism Names — ion","text":"ION - Index Organism Names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ION - Index to Organism Names — ion","text":"","code":"ion(x, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/ion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ION - Index to Organism Names — ion","text":"x LSID number. Required. ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ION - Index to Organism Names — ion","text":"data.frame","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ION - Index to Organism Names — ion","text":"http://www.organismnames.com","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ION - Index to Organism Names — ion","text":"","code":"if (FALSE) { ion(155166) ion(298678) ion(4796748) # ursus americanus ion(1280626) # puma concolor }"},{"path":"https://docs.ropensci.org/taxize/reference/iplant_resolve.html","id":null,"dir":"Reference","previous_headings":"","what":"iPlant name resolution — iplant_resolve","title":"iPlant name resolution — iplant_resolve","text":"iPlant name resolution","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iplant_resolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iPlant name resolution — iplant_resolve","text":"","code":"iplant_resolve(sci, retrieve = \"all\", query = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/iplant_resolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iPlant name resolution — iplant_resolve","text":"sci Vector one taxonomic names (common names) retrieve Specifies whether retrieve matches names submitted. One 'best' (retrieves single best match name submitted) '' (retrieves matches) query Deprecated, see sci ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iplant_resolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iPlant name resolution — iplant_resolve","text":"data.frame","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iplant_resolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iPlant name resolution — iplant_resolve","text":"","code":"if (FALSE) { iplant_resolve(sci=c(\"Helianthus annuus\", \"Homo sapiens\")) iplant_resolve(\"Helianthusss\") iplant_resolve(\"Pooa\") iplant_resolve(\"Helianthusss\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/ipni_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for names in the International Plant Names Index (IPNI). — ipni_search","title":"Search for names in the International Plant Names Index (IPNI). — ipni_search","text":"Note: data source also provided Global Names Index (GNI) (http://gni.globalnames.org/data_sources). interface data different among two services though.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ipni_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for names in the International Plant Names Index (IPNI). — ipni_search","text":"","code":"ipni_search(   family = NULL,   infrafamily = NULL,   genus = NULL,   infragenus = NULL,   species = NULL,   infraspecies = NULL,   publicationtitle = NULL,   authorabbrev = NULL,   includepublicationauthors = NULL,   includebasionymauthors = NULL,   geounit = NULL,   addedsince = NULL,   modifiedsince = NULL,   isapnirecord = NULL,   isgcirecord = NULL,   isikrecord = NULL,   ranktoreturn = NULL,   output = \"minimal\",   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/ipni_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for names in the International Plant Names Index (IPNI). — ipni_search","text":"family Family name search (Optional) infrafamily Infrafamilial name search (Optional) genus Genus name search (Optional) infragenus Infrageneric name search (Optional) species Species name search (Optional) - Note, epithet, full genus - epithet name combination. infraspecies Infraspecies name search (Optional) publicationtitle Publication name abbreviation search . , replace spaces '+' (e.g. 'J.+Bot.') (Optional) authorabbrev Author standard form search (publishing author, basionym author - see ) (Optional) includepublicationauthors TRUE (default) include taxon author search FALSE exclude includebasionymauthors TRUE (default) include basionum author search FALSE exclude geounit Country name geographical unit search (see help pages information warnings use option) (Optional) addedsince Date search format 'yyyy-mm-dd', e.g. 2005-08-01 records added since first August, 2005. (see help pages information warnings use option) (Optional. supplied must format YYYY-MM-DD must greater equal 1984-01-01.) modifiedsince Date search format 'yyyy-mm-dd', e.g. 2005-08-01 records edited since first August, 2005. (See help pages information use option) (Optional. supplied must format YYYY-MM-DD must greater equal 1993-01-01.) isapnirecord FALSE (default) exclude records Australian Plant Name Index isgcirecord FALSE (default) exclude records Gray Cards Index isikrecord FALSE (default) exclude records Index Kewensis ranktoreturn One options choose ranks returned. See details. output One minimal (default), classic, short, extended ... Curl options passed crul::verb-GET (Optional). Default: returns ranks.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ipni_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for names in the International Plant Names Index (IPNI). — ipni_search","text":"tibble (data.frame)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ipni_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for names in the International Plant Names Index (IPNI). — ipni_search","text":"ranktoreturn options: \"\" - records \"fam\" - family records \"infrafam\" - infrafamilial records \"gen\" - generic records \"infragen\" - infrageneric records \"spec\" - species records \"infraspec\" - infraspecific records","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ipni_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search for names in the International Plant Names Index (IPNI). — ipni_search","text":"https://web.archive.org/web/20190501132148/http://www.ipni.org/link_to_ipni.html","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ipni_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for names in the International Plant Names Index (IPNI). — ipni_search","text":"","code":"if (FALSE) { ipni_search(genus='Brintonia', isapnirecord=TRUE, isgcirecord=TRUE,   isikrecord=TRUE) ipni_search(genus='Ceanothus') ipni_search(genus='Pinus', species='contorta')  # Different output formats ipni_search(genus='Ceanothus') ipni_search(genus='Ceanothus', output='short') ipni_search(genus='Ceanothus', output='extended') }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_acceptname.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve accepted TSN and name — itis_acceptname","title":"Retrieve accepted TSN and name — itis_acceptname","text":"Retrieve accepted TSN name","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_acceptname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve accepted TSN and name — itis_acceptname","text":"","code":"itis_acceptname(searchtsn, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_acceptname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve accepted TSN and name — itis_acceptname","text":"searchtsn One TSN taxon (numeric/integer) ... Curl options passed tocrul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_acceptname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve accepted TSN and name — itis_acceptname","text":"data.frame row number equal input vector length, three columns: submittedtsn (numeric) - submitted TSN acceptedname (character) - accepted name - submitted TSN accepted TSN, NA_character_ ITIS return name along TSN accepted name. make extra HTTP request ITIS, means additional time. acceptedtsn (numeric) - accepted TSN author (character) - taxonomic authority","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_acceptname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve accepted TSN and name — itis_acceptname","text":"","code":"if (FALSE) { # TSN accepted - good name itis_acceptname(searchtsn = 208527)  # TSN not accepted - input TSN is old itis_acceptname(searchtsn = 504239)  # many accepted names ids <- c(18161, 18162, 18163, 18164, 18165, 18166, 46173, 46174, 46178, 46181, 46186, 46193, 46196, 46197, 46200, 46201, 46204, 46207, 46867, 46868) itis_acceptname(searchtsn = ids)  # many unaccepted names ids <- c(39087, 46208, 46973, 46976, 46978, 46980, 47295, 47445, 47448, 47512, 47515, 47527, 47546, 47622, 47783, 47786, 47787, 47788, 47835, 47839) itis_acceptname(searchtsn = ids)  # many: mix of accepted and unaccepted names ids <- c(18161, 18162, 47527, 47546, 47622, 46200) itis_acceptname(searchtsn = ids) }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all taxa names or TSNs downstream in hierarchy from given TSN. — itis_downstream","title":"Retrieve all taxa names or TSNs downstream in hierarchy from given TSN. — itis_downstream","text":"Retrieve taxa names TSNs downstream hierarchy given TSN.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all taxa names or TSNs downstream in hierarchy from given TSN. — itis_downstream","text":"","code":"itis_downstream(id, downto, intermediate = FALSE, tsns = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all taxa names or TSNs downstream in hierarchy from given TSN. — itis_downstream","text":"id taxonomic serial number. downto taxonomic level want go . See examples . taxonomic level case sensitive, spell correctly. See data(rank_ref) spelling. intermediate (logical) TRUE, return list length two target taxon rank names, additional list data.frame's intermediate taxonomic groups. Default: FALSE tsns Deprecated, see id ... args passed ritis::rank_name() ritis::hierarchy_down()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_downstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all taxa names or TSNs downstream in hierarchy from given TSN. — itis_downstream","text":"Data.frame taxonomic information downstream family e.g., Order, Class, etc., intermediated=TRUE, list length two, target taxon rank names, intermediate names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_downstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all taxa names or TSNs downstream in hierarchy from given TSN. — itis_downstream","text":"","code":"if (FALSE) { ## the plant class Bangiophyceae, tsn 846509 itis_downstream(id = 846509, downto=\"genus\") itis_downstream(id = 846509, downto=\"genus\", intermediate=TRUE)  # get families downstream from Acridoidea itis_downstream(id = 650497, \"family\") ## here, intermediate leads to the same result as the target itis_downstream(id = 650497, \"family\", intermediate=TRUE)  # get species downstream from Ursus itis_downstream(id = 180541, \"species\")  # get orders down from the Division Rhodophyta (red algae) itis_downstream(id = 660046, \"order\") itis_downstream(id = 660046, \"order\", intermediate=TRUE)  # get tribes down from the family Apidae itis_downstream(id = 154394, downto=\"tribe\") itis_downstream(id = 154394, downto=\"tribe\", intermediate=TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_getrecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Get full ITIS record for one or more ITIS TSN's or lsid's. — itis_getrecord","title":"Get full ITIS record for one or more ITIS TSN's or lsid's. — itis_getrecord","text":"Get full ITIS record one ITIS TSN's lsid's.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_getrecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get full ITIS record for one or more ITIS TSN's or lsid's. — itis_getrecord","text":"","code":"itis_getrecord(values, by = \"tsn\", ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_getrecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get full ITIS record for one or more ITIS TSN's or lsid's. — itis_getrecord","text":"values (character) One TSN's (taxonomic serial number) lsid's taxonomic group (character) \"tsn\" (default) \"lsid\" ... arguments passed ritis::full_record","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_getrecord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get full ITIS record for one or more ITIS TSN's or lsid's. — itis_getrecord","text":"can enter values tsn parameter lsid, .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_getrecord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get full ITIS record for one or more ITIS TSN's or lsid's. — itis_getrecord","text":"","code":"if (FALSE) { # by TSN itis_getrecord(202385) itis_getrecord(c(202385,70340))  # by lsid itis_getrecord(\"urn:lsid:itis.gov:itis_tsn:202385\", \"lsid\") }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"ITIS hierarchy — itis_hierarchy","title":"ITIS hierarchy — itis_hierarchy","text":"Get hierarchies TSN values, full, upstream , immediate downstream ","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ITIS hierarchy — itis_hierarchy","text":"","code":"itis_hierarchy(tsn, what = \"full\", ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ITIS hierarchy — itis_hierarchy","text":"tsn One TSN's (taxonomic serial number). Required. One full (full hierarchy), (immediate upstream), (immediate downstream) ... arguments passed ritis::hierarchy_full() ritis::hierarchy_up() ritis::hierarchy_down()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_hierarchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ITIS hierarchy — itis_hierarchy","text":"Note itis_downstream() gets taxa downstream particular rank, function gets immediate names downstream.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/itis_hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ITIS hierarchy — itis_hierarchy","text":"","code":"if (FALSE) { # Get full hierarchy itis_hierarchy(tsn=180543)  # Get hierarchy upstream itis_hierarchy(tsn=180543, \"up\")  # Get hierarchy downstream itis_hierarchy(tsn=180543, \"down\")  # Many tsn's itis_hierarchy(tsn=c(180543,41074,36616)) }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_kingdomnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get kingdom names — itis_kingdomnames","title":"Get kingdom names — itis_kingdomnames","text":"Get kingdom names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_kingdomnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get kingdom names — itis_kingdomnames","text":"","code":"itis_kingdomnames(tsn = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_kingdomnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get kingdom names — itis_kingdomnames","text":"tsn One TSN's (taxonomic serial number) ... arguments passed getkingdomnamefromtsn","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_kingdomnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get kingdom names — itis_kingdomnames","text":"","code":"if (FALSE) { itis_kingdomnames(202385) itis_kingdomnames(tsn=c(202385,183833,180543)) }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_lsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get TSN from LSID — itis_lsid","title":"Get TSN from LSID — itis_lsid","text":"Get TSN LSID","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_lsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get TSN from LSID — itis_lsid","text":"","code":"itis_lsid(lsid = NULL, what = \"tsn\", ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_lsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get TSN from LSID — itis_lsid","text":"lsid One lsid's retrieve. One tsn, record, fullrecord ... arguments passed ritis::lsid2tsn(), ritis::record(), ritis::full_record()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_lsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get TSN from LSID — itis_lsid","text":"","code":"if (FALSE) { # Get TSN itis_lsid(\"urn:lsid:itis.gov:itis_tsn:180543\") itis_lsid(lsid=c(\"urn:lsid:itis.gov:itis_tsn:180543\",\"urn:lsid:itis.gov:itis_tsn:28726\"))  # Get partial record itis_lsid(\"urn:lsid:itis.gov:itis_tsn:180543\", \"record\")  # Get full record itis_lsid(\"urn:lsid:itis.gov:itis_tsn:180543\", \"fullrecord\")  # An invalid lsid (a tsn actually) itis_lsid(202385) }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_name-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic names for a given taxonomic name query. — itis_name","title":"Get taxonomic names for a given taxonomic name query. — itis_name","text":"Get taxonomic names given taxonomic name query.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_name-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic names for a given taxonomic name query. — itis_name","text":"","code":"itis_name(query = NULL, get = NULL)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_name-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic names for a given taxonomic name query. — itis_name","text":"query TSN number (taxonomic serial number). get rank taxonomic name get.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_name-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic names for a given taxonomic name query. — itis_name","text":"Taxonomic name searched taxon.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_name-deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic names for a given taxonomic name query. — itis_name","text":"","code":"if (FALSE) { itis_name(query=\"Helianthus annuus\", get=\"family\") }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_native.html","id":null,"dir":"Reference","previous_headings":"","what":"Get jurisdiction data, i.e., native or not native in a region. — itis_native","title":"Get jurisdiction data, i.e., native or not native in a region. — itis_native","text":"Get jurisdiction data, .e., native native region.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_native.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get jurisdiction data, i.e., native or not native in a region. — itis_native","text":"","code":"itis_native(tsn = NULL, what = \"bytsn\", ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_native.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get jurisdiction data, i.e., native or not native in a region. — itis_native","text":"tsn One TSN's (taxonomic serial number) One bytsn, values, originvalues ... arguments passed ritis::jurisdictional_origin(), ritis::jurisdiction_values(), ritis::jurisdiction_origin_values()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_native.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get jurisdiction data, i.e., native or not native in a region. — itis_native","text":"","code":"if (FALSE) { # Get values itis_native(what=\"values\")  # Get origin values itis_native(what=\"originvalues\")  # Get values by tsn itis_native(tsn=180543) itis_native(tsn=c(180543,41074,36616)) }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_refs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get references related to a ITIS TSN. — itis_refs","title":"Get references related to a ITIS TSN. — itis_refs","text":"Get references related ITIS TSN.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_refs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get references related to a ITIS TSN. — itis_refs","text":"","code":"itis_refs(tsn, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_refs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get references related to a ITIS TSN. — itis_refs","text":"tsn One TSN's (taxonomic serial number) taxonomic group (numeric) ... arguments passed getpublicationsfromtsn","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_refs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get references related to a ITIS TSN. — itis_refs","text":"","code":"if (FALSE) { itis_refs(202385) itis_refs(c(202385, 70340)) }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_taxrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve taxonomic rank name from given TSN. — itis_taxrank","title":"Retrieve taxonomic rank name from given TSN. — itis_taxrank","text":"Retrieve taxonomic rank name given TSN.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_taxrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve taxonomic rank name from given TSN. — itis_taxrank","text":"","code":"itis_taxrank(query = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_taxrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve taxonomic rank name from given TSN. — itis_taxrank","text":"query TSN taxonomic group (numeric). query left default (NULL), get possible rank names, TSN's (using function ritis::rank_names(). slightly different terminology Monera vs. Plantae vs. Fungi vs. Animalia vs. Chromista, separate terminologies group. ... arguments passed ritis::rank_name()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_taxrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve taxonomic rank name from given TSN. — itis_taxrank","text":"Taxonomic rank names data.frame ranks.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_taxrank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve taxonomic rank name from given TSN. — itis_taxrank","text":"can print messages setting verbose=FALSE.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_taxrank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve taxonomic rank name from given TSN. — itis_taxrank","text":"","code":"if (FALSE) { # All ranks itis_taxrank()  # A single TSN itis_taxrank(query=202385)  # Many TSN's itis_taxrank(query=c(202385,183833,180543)) }"},{"path":"https://docs.ropensci.org/taxize/reference/itis_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ITIS terms, i.e., tsn's, authors, common names, and scientific names. — itis_terms","title":"Get ITIS terms, i.e., tsn's, authors, common names, and scientific names. — itis_terms","text":"Get ITIS terms, .e., tsn's, authors, common names, scientific names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ITIS terms, i.e., tsn's, authors, common names, and scientific names. — itis_terms","text":"","code":"itis_terms(query, what = \"both\", ...)"},{"path":"https://docs.ropensci.org/taxize/reference/itis_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ITIS terms, i.e., tsn's, authors, common names, and scientific names. — itis_terms","text":"query One common scientific names, partial names One (search common scientific names), common (search just common names), scientific (search just scientific names) ... arguments passed ritis::terms()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/itis_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ITIS terms, i.e., tsn's, authors, common names, and scientific names. — itis_terms","text":"","code":"if (FALSE) { # Get terms searching both common and scientific names itis_terms(query='bear')  # Get terms searching just common names itis_terms(query='tarweed', \"common\")  # Get terms searching just scientific names itis_terms(query='Poa annua', \"scientific\") }"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_getname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get any matching IUCN species names — iucn_getname","title":"Get any matching IUCN species names — iucn_getname","text":"Get matching IUCN species names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_getname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get any matching IUCN species names — iucn_getname","text":"","code":"iucn_getname(name, verbose = TRUE, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_getname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get any matching IUCN species names — iucn_getname","text":"name character; taxon name verbose logical; messages printed? ... arguments passed iucn_summary(), note need API key.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_getname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get any matching IUCN species names — iucn_getname","text":"Character vector names matched IUCN","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_getname.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get any matching IUCN species names — iucn_getname","text":"Beware: IUCN functions can give back incorrect data. fault. best get correct data quickly, sometimes IUCN gives back wrong data, sometimes Global Names gives back wrong data. fix soon possible. meantime, just make sure data get back correct.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/iucn_getname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get any matching IUCN species names — iucn_getname","text":"","code":"if (FALSE) { iucn_getname(name = \"Cyanistes caeruleus\") iucn_getname(name = \"Panthera uncia\")  # not found in global names # iucn_getname(name = \"Abronia pinsapo\")  # not found in IUCN search iucn_getname(name = \"Acacia allenii\") }"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an ID for a IUCN listed taxon — iucn_id","title":"Get an ID for a IUCN listed taxon — iucn_id","text":"Get ID IUCN listed taxon","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an ID for a IUCN listed taxon — iucn_id","text":"","code":"iucn_id(sciname, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an ID for a IUCN listed taxon — iucn_id","text":"sciname character; Scientific name. cleand format *<Genus> <Species>*. One . key (character) required. IUCN Redlist API key. See rredlist::rredlist-package help authenticating IUCN Redlist ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an ID for a IUCN listed taxon — iucn_id","text":"named list (names input taxa names) one IUCN IDs. Taxa found silently dropped.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get an ID for a IUCN listed taxon — iucn_id","text":"Scott Chamberlain,","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an ID for a IUCN listed taxon — iucn_id","text":"","code":"if (FALSE) { iucn_id(\"Branta canadensis\") iucn_id(\"Branta bernicla\") iucn_id(\"Panthera uncia\") iucn_id(\"Lynx lynx\")  # many names iucn_id(c(\"Panthera uncia\", \"Lynx lynx\"))  # many names, some not found iucn_id(c(\"Panthera uncia\", \"Lynx lynx\", \"foo bar\", \"hello world\"))  # a name not found iucn_id(\"Foo bar\") }"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Extractor functions for iucn-class. — iucn_status","title":"Extractor functions for iucn-class. — iucn_status","text":"Extractor functions iucn-class.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extractor functions for iucn-class. — iucn_status","text":"","code":"iucn_status(x, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extractor functions for iucn-class. — iucn_status","text":"x iucn-object returned biucn_summaryry ... Currently used","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extractor functions for iucn-class. — iucn_status","text":"character vector status.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/iucn_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extractor functions for iucn-class. — iucn_status","text":"","code":"if (FALSE) { ia <- iucn_summary(c(\"Panthera uncia\", \"Lynx lynx\")) iucn_status(ia)}"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a summary from the IUCN Red List — iucn_summary","title":"Get a summary from the IUCN Red List — iucn_summary","text":"Get summary IUCN Red List (https://www.iucnredlist.org/).","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a summary from the IUCN Red List — iucn_summary","text":"","code":"iucn_summary(x, distr_detail = FALSE, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a summary from the IUCN Red List — iucn_summary","text":"x character; Scientific name. cleaned format *<Genus> <Species>*. distr_detail logical; TRUE, geographic distribution returned list vectors corresponding different range types: native, introduced, etc. key Redlist API key, get one https://apiv3.iucnredlist.org/api/v3/token Required iucn_summary. Defaults NULL case key stored (see Redlist Authentication ). ... curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a summary from the IUCN Red List — iucn_summary","text":"list (every species one entry) lists following items: status Red List Category. history History status, available. distr Geographic distribution, available. trend Trend population size, available.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a summary from the IUCN Red List — iucn_summary","text":"Beware: IUCN functions can give back incorrect data. fault. best get correct data quickly, sometimes IUCN gives back wrong data, sometimes Global Names gives back wrong data. fix soon possible. meantime, just make sure data get back correct. iucn_summary default method errors anything's passed character iucn class - iucn_summary.character method pass taxon names - iucn_summary.iucn method can pass iucn class objects output get_iucn() .iucn(). already IUCN IDs, coerce iucn class via .iucn(..., check = FALSE)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a summary from the IUCN Red List — iucn_summary","text":"entries (history, distr, trend) available every species NA returned. iucn_status() extractor function easily extract status vector.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":"redlist-authentication","dir":"Reference","previous_headings":"","what":"Redlist Authentication","title":"Get a summary from the IUCN Red List — iucn_summary","text":"iucn_summary uses new Redlist API searching IUCN ID, use rl_search() function internally. function requires API key. Get key https://apiv3.iucnredlist.org/api/v3/token, pass key parameter, store .Renviron file like IUCN_REDLIST_KEY=yourkey .Rprofile file like options(iucn_redlist_key=\"yourkey\"). strongly encourage pass key function call rather store one two files. key also set use rredlist package.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a summary from the IUCN Red List — iucn_summary","text":"Eduard Szoecs, eduardszoecs@gmail.com Philippe Marchand, marchand.philippe@gmail.com Scott Chamberlain,","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a summary from the IUCN Red List — iucn_summary","text":"","code":"if (FALSE) { # if you send a taxon name, an IUCN API key is required ## here, the key is being detected from a .Rprofile file ## or .Renviron file, See \"Redlist Authentication\" above iucn_summary(\"Lutra lutra\")  ia <- iucn_summary(c(\"Panthera uncia\", \"Lynx lynx\")) ia <- iucn_summary(c(\"Panthera uncia\", \"Lynx lynx\", \"aaa\")) iucn_summary(\"Muntiacus rooseveltorum/truongsonensis\") iucn_summary(c(\"Muntiacus rooseveltorum/truongsonensis\", \"Lynx lynx\"))  ## get detailed distribution iac <- iucn_summary(x=\"Ara chloropterus\", distr_detail = TRUE) iac[[1]]$distr   # If you pass in an IUCN ID, you don't need to pass in a Redlist API Key # extract status iucn_status(iac) }"},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary_id-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"DEFUNCT — iucn_summary_id","title":"DEFUNCT — iucn_summary_id","text":"DEFUNCT","code":""},{"path":"https://docs.ropensci.org/taxize/reference/iucn_summary_id-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DEFUNCT — iucn_summary_id","text":"","code":"iucn_summary_id(...)"},{"path":"https://docs.ropensci.org/taxize/reference/key_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers to set up authentication for the different providers. — key_helpers","title":"Helpers to set up authentication for the different providers. — key_helpers","text":"Sets authentication diverse providers providing user detailed prompt.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/key_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers to set up authentication for the different providers. — key_helpers","text":"","code":"use_tropicos()  use_entrez()  use_iucn()"},{"path":"https://docs.ropensci.org/taxize/reference/key_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helpers to set up authentication for the different providers. — key_helpers","text":"Key helpers","code":""},{"path":"https://docs.ropensci.org/taxize/reference/key_helpers.html","id":"use-tropicos-","dir":"Reference","previous_headings":"","what":"use_tropicos()","title":"Helpers to set up authentication for the different providers. — key_helpers","text":"Browses Tropicos API key request URL provides instruction store key. filling form get key soon, immediately.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/key_helpers.html","id":"use-entrez-","dir":"Reference","previous_headings":"","what":"use_entrez()","title":"Helpers to set up authentication for the different providers. — key_helpers","text":"Browse NCBI Entrez help make API key request provides instruction store key. direct URL request key, one first needs log register generate key one's account. Note NCBI Entrez require use API key, get higher rate limit key, get one.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/key_helpers.html","id":"use-iucn-","dir":"Reference","previous_headings":"","what":"use_iucn()","title":"Helpers to set up authentication for the different providers. — key_helpers","text":"Browse IUCN Red List API key request URL provides instruction store key. function wraps rredlist::rl_use_iucn() rredlist package. filling form get key soon, immediately.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/limited_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a subset of a character vector — limited_print","title":"Print a subset of a character vector — limited_print","text":"Prints start end values character vector. number values printed depend width screen default.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/limited_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a subset of a character vector — limited_print","text":"","code":"limited_print(   chars,   prefix = \"\",   max_chars = getOption(\"width\") - nchar(prefix) - 5,   type = \"message\" )"},{"path":"https://docs.ropensci.org/taxize/reference/limited_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a subset of a character vector — limited_print","text":"chars (character) print. prefix (character length 1) print chars, line. max_chars (numeric length 1) maximum number characters print. type (\"error\", \"warning\", \"message\", \"cat\", \"print\", \"silent\")","code":""},{"path":"https://docs.ropensci.org/taxize/reference/limited_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a subset of a character vector — limited_print","text":"NULL","code":""},{"path":"https://docs.ropensci.org/taxize/reference/lowest_common.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the lowest common taxon and rank for a given taxon name or ID — lowest_common","title":"Retrieve the lowest common taxon and rank for a given taxon name or ID — lowest_common","text":"Retrieve lowest common taxon rank given taxon name ID","code":""},{"path":"https://docs.ropensci.org/taxize/reference/lowest_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the lowest common taxon and rank for a given taxon name or ID — lowest_common","text":"","code":"lowest_common(...)  # S3 method for default lowest_common(   sci_id,   db = NULL,   rows = NA,   class_list = NULL,   low_rank = NULL,   x = NULL,   ... )  # S3 method for uid lowest_common(sci_id, class_list = NULL, low_rank = NULL, ...)  # S3 method for tsn lowest_common(sci_id, class_list = NULL, low_rank = NULL, ...)  # S3 method for gbifid lowest_common(sci_id, class_list = NULL, low_rank = NULL, ...)  # S3 method for tolid lowest_common(sci_id, class_list = NULL, low_rank = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/lowest_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the lowest common taxon and rank for a given taxon name or ID — lowest_common","text":"... arguments passed get_tsn(), get_uid(), get_gbifid(), get_tolid() sci_id Vector taxa names (character) id (character numeric) query. db character; database query. either ncbi, itis, gbif, tol. using ncbi, recommend getting API key; see taxize-authentication rows (numeric) number 1 infinity. default NA, rows considered. Note parameter ignored pass taxonomic id acceptable classes: tsn, gbifid, tolid. NCBI method function rows work. class_list (list) list classifications, returned classification() low_rank (character) taxonomic rank return, length 1 x Deprecated, see sci_id","code":""},{"path":"https://docs.ropensci.org/taxize/reference/lowest_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the lowest common taxon and rank for a given taxon name or ID — lowest_common","text":"NA match, data.frame columns name rank id","code":""},{"path":"https://docs.ropensci.org/taxize/reference/lowest_common.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Retrieve the lowest common taxon and rank for a given taxon name or ID — lowest_common","text":"See taxize-authentication help authentication","code":""},{"path":"https://docs.ropensci.org/taxize/reference/lowest_common.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve the lowest common taxon and rank for a given taxon name or ID — lowest_common","text":"Jimmy O'Donnell jodonnellbio@gmail.com Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/lowest_common.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the lowest common taxon and rank for a given taxon name or ID — lowest_common","text":"","code":"if (FALSE) { id <- c(\"9031\", \"9823\", \"9606\", \"9470\") id_class <- classification(id, db = 'ncbi') lowest_common(id[2:4], db = \"ncbi\") lowest_common(id[2:4], db = \"ncbi\", low_rank = 'class') lowest_common(id[2:4], db = \"ncbi\", low_rank = 'family') lowest_common(id[2:4], class_list = id_class) lowest_common(id[2:4], class_list = id_class, low_rank = 'class') lowest_common(id[2:4], class_list = id_class, low_rank = 'family')  # TOL taxa <- c(\"Angraecum sesquipedale\", \"Dracula vampira\",   \"Masdevallia coccinea\") (cls <- classification(taxa, db = \"tol\")) lowest_common(taxa, db = \"tol\", class_list = cls) lowest_common(get_tolid(taxa), class_list = cls) xx <- get_tolid(taxa) lowest_common(xx, class_list = cls)  spp <- c(\"Sus scrofa\", \"Homo sapiens\", \"Nycticebus coucang\") lowest_common(spp, db = \"ncbi\") lowest_common(get_uid(spp))  lowest_common(spp, db = \"itis\") lowest_common(get_tsn(spp))  gbifid <- c(\"2704179\", \"3119195\") lowest_common(gbifid, db = \"gbif\")  spp <- c(\"Poa annua\", \"Helianthus annuus\") lowest_common(spp, db = \"gbif\") lowest_common(get_gbifid(spp))  cool_orchid <- c(\"Angraecum sesquipedale\", \"Dracula vampira\",   \"Masdevallia coccinea\") orchid_ncbi <- get_uid(cool_orchid) orchid_gbif <- get_gbifid(cool_orchid)  cool_orchids2 <- c(\"Domingoa haematochila\", \"Gymnadenia conopsea\",   \"Masdevallia coccinea\") orchid_itis <- get_tsn(cool_orchids2)  orchid_hier_ncbi <- classification(orchid_ncbi, db = 'ncbi') orchid_hier_gbif <- classification(orchid_gbif, db = 'gbif') orchid_hier_itis <- classification(orchid_itis, db = 'itis')  lowest_common(orchid_ncbi, low_rank = 'class') lowest_common(orchid_ncbi, class_list = orchid_hier_ncbi,   low_rank = 'class') lowest_common(orchid_gbif, low_rank = 'class') lowest_common(orchid_gbif, orchid_hier_gbif, low_rank = 'class') lowest_common(get_uid(cool_orchid), low_rank = 'class') lowest_common(get_uid(cool_orchid), low_rank = 'family')  lowest_common(orchid_ncbi, class_list = orchid_hier_ncbi,   low_rank = 'subfamily') lowest_common(orchid_gbif, class_list = orchid_hier_gbif,   low_rank = 'subfamily')  lowest_common(orchid_itis, class_list = orchid_hier_itis,   low_rank = 'class')  ## Pass in sci. names nms <- c(\"Angraecum sesquipedale\", \"Dracula vampira\", \"Masdevallia coccinea\") lowest_common(x = nms, db = \"ncbi\") lowest_common(x = nms, db = \"gbif\") # lowest_common(x = nms, db = \"itis\")  ## NAs due to taxon not found, stops with error message # lowest_common(orchid_itis, db = \"itis\") # lowest_common(get_tsn(cool_orchid)) }"},{"path":"https://docs.ropensci.org/taxize/reference/names_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a random vector of species names. — names_list","title":"Get a random vector of species names. — names_list","text":"Family order names come APG plant names list. Genus species names come Theplantlist.org.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/names_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a random vector of species names. — names_list","text":"","code":"names_list(rank = \"genus\", size = 10)"},{"path":"https://docs.ropensci.org/taxize/reference/names_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a random vector of species names. — names_list","text":"rank (character) Taxonomic rank, one species, genus (default), family, order size (integer/numeric) Number names get. Maximum depends rank","code":""},{"path":"https://docs.ropensci.org/taxize/reference/names_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a random vector of species names. — names_list","text":"character vector taxonomic names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/names_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a random vector of species names. — names_list","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/names_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a random vector of species names. — names_list","text":"","code":"names_list() #>  [1] \"Sinclairia\"      \"Dryopteris\"      \"Mirabilis\"       \"Macrolejeunea\"   #>  [5] \"Scilla\"          \"Austrosteenisia\" \"Corybas\"         \"Glyphochloa\"     #>  [9] \"Comarostaphylis\" \"Platycaulos\"     names_list('species') #>  [1] \"Calea lucidivenia\"      \"Salvia miltiorrhiza\"    \"Kaempferia grandifolia\" #>  [4] \"Columnea inaequilatera\" \"Citrus truncata\"        \"Hieracium vindobonense\" #>  [7] \"Carex typhina\"          \"Allocasuarina fibrosa\"  \"Cistus eulaliae\"        #> [10] \"Bulbostylis burchellii\" names_list('genus') #>  [1] \"Acicarpha\"     \"Ponerorchis\"   \"Ampelocissus\"  \"Vernoniastrum\" #>  [5] \"Nopalea\"       \"Markea\"        \"Clitoria\"      \"Brachistus\"    #>  [9] \"Madagaster\"    \"Amphiblemma\"   names_list('family') #>  [1] \"Asphodelaceae\"  \"Lamiaceae\"      \"Amaranthaceae\"  \"Sarcolaenaceae\" #>  [5] \"Thymelaeaceae\"  \"Cupressaceae\"   \"Winteraceae\"    \"Burseraceae\"    #>  [9] \"Peraceae\"       \"Apiaceae\"       names_list('order') #>  [1] \"Nymphaeales\"    \"Cycadales\"      \"Brassicales\"    \"Lamiales\"       #>  [5] \"Caryophyllales\" \"Poales\"         \"Malpighiales\"   \"Lamiales\"       #>  [9] \"Chloranthales\"  \"Brassicales\"    names_list('order', 2) #> [1] \"Ericales\"  \"Asterales\" names_list('order', 15) #>  [1] \"Oxalidales\"       \"Rosales\"          \"Caryophyllales\"   \"Alismatales\"      #>  [5] \"Alismatales\"      \"Asterales\"        \"Solanales\"        \"Cornales\"         #>  [9] \"Austrobaileyales\" \"Caryophyllales\"   \"Brassicales\"      \"Salviniales.\"     #> [13] \"Lycopodiales\"     \"Malpighiales\"     \"Caryophyllales\"    # You can get a lot of genus or species names if you want nrow(theplantlist) #> [1] 10000 names_list('genus', 500) #>   [1] \"Cinnadenia\"         \"Cornus\"             \"Stachytarpheta\"     #>   [4] \"Lachenalia\"         \"Catachaetum\"        \"Notothylas\"         #>   [7] \"Kickxia\"            \"Hydnophytum\"        \"Suberanthus\"        #>  [10] \"Chresta\"            \"Cissus\"             \"Aristida\"           #>  [13] \"Sterculia\"          \"Struthiopteris\"     \"Radiovittaria\"      #>  [16] \"Polypodium\"         \"Lawrencia\"          \"Calytrix\"           #>  [19] \"Philammos\"          \"Garovaglia\"         \"Racosperma\"         #>  [22] \"Calamus\"            \"Gypsophila\"         \"Lescuraea\"          #>  [25] \"Guanchezia\"         \"Crudia\"             \"Tricholepis\"        #>  [28] \"Trichosanthes\"      \"Epipremnum\"         \"Pancratium\"         #>  [31] \"Ixia\"               \"Acetosella\"         \"Blakea\"             #>  [34] \"Lodoicea\"           \"Endiandra\"          \"Vernasolis\"         #>  [37] \"Actinocephalus\"     \"Macaranga\"          \"Perovskia\"          #>  [40] \"Scaphyglottis\"      \"Grewia\"             \"Sarcosperma\"        #>  [43] \"Amphidasya\"         \"Upopion\"            \"Rhaphidophora\"      #>  [46] \"Staurogyne\"         \"Rungia\"             \"Corydalis\"          #>  [49] \"Loasa\"              \"Fraxinus\"           \"Lachemilla\"         #>  [52] \"Anoectochilus\"      \"Leucopogon\"         \"Pilotrichum\"        #>  [55] \"Centaurea\"          \"Gastrochilus\"       \"Adenosma\"           #>  [58] \"Lellingeria\"        \"Aptandra\"           \"Filago\"             #>  [61] \"Erysimum\"           \"Acrostichum\"        \"Euonymus\"           #>  [64] \"Gutenbergia\"        \"Nepenthes\"          \"Phaseolus\"          #>  [67] \"Cayratia\"           \"Echinospermum\"      \"Hypertelis\"         #>  [70] \"Thlaspi\"            \"Alysicarpus\"        \"Drepanolejeunea\"    #>  [73] \"Zehneria\"           \"Stenia\"             \"Philadelphus\"       #>  [76] \"Orthaea\"            \"Calanthe\"           \"Ornithogalum\"       #>  [79] \"Piptadenia\"         \"Boerhavia\"          \"Hemigraphis\"        #>  [82] \"Oryza\"              \"Pseudosclerochloa\"  \"Mentha\"             #>  [85] \"Capsella\"           \"Sebastiania\"        \"Microtropis\"        #>  [88] \"Aureolaria\"         \"Hedyosmum\"          \"Spilanthes\"         #>  [91] \"Parkia\"             \"Cadetia\"            \"Ceratolejeunea\"     #>  [94] \"Miricacalia\"        \"Taeniophyllum\"      \"Stachys\"            #>  [97] \"Pariana\"            \"Elettariopsis\"      \"Barbaceniopsis\"     #> [100] \"Renealmia\"          \"Puccinellia\"        \"Illicium\"           #> [103] \"Pleroma\"            \"Virgilia\"           \"Pennisetum\"         #> [106] \"Pontia\"             \"Schoenorchis\"       \"Odontolophus\"       #> [109] \"Conandrium\"         \"Ophiocaulon\"        \"Ticorea\"            #> [112] \"Dressleria\"         \"Schismatoglottis\"   \"Hylomecon\"          #> [115] \"Multidentia\"        \"Tournefortia\"       \"Alectra\"            #> [118] \"Brasilidium\"        \"Crossopetalum\"      \"Doliocarpus\"        #> [121] \"Phanerophlebiopsis\" \"Primulidium\"        \"Ziziphus\"           #> [124] \"Acourtia\"           \"Jacksonia\"          \"Mayna\"              #> [127] \"Stenandrium\"        \"Cuviera\"            \"Handroanthus\"       #> [130] \"Leucodon\"           \"Polygala\"           \"Lycopodium\"         #> [133] \"Oxycarpus\"          \"Loxogramme\"         \"Rollinia\"           #> [136] \"Leptotheca\"         \"Romanzoffia\"        \"Phacelia\"           #> [139] \"Piptomeris\"         \"Weigela\"            \"Haemodorum\"         #> [142] \"Eucrosia\"           \"Eriodictyon\"        \"Tristemon\"          #> [145] \"Laguncularia\"       \"Wendlandia\"         \"Ligularia\"          #> [148] \"Phaseolodes\"        \"Macrolejeunea\"      \"Cupaniopsis\"        #> [151] \"Eschweilera\"        \"Coryphantha\"        \"Belmontia\"          #> [154] \"Papaver\"            \"Xeroderris\"         \"Oxymeris\"           #> [157] \"Chamaedorea\"        \"Spiesia\"            \"Arabis\"             #> [160] \"Millettia\"          \"Mosenodendron\"      \"Sagittaria\"         #> [163] \"Atylosia\"           \"Ophrys\"             \"Leptinella\"         #> [166] \"Myrsine\"            \"Distasis\"           \"Mauria\"             #> [169] \"Phyllocactus\"       \"Gomphia\"            \"Coreopsis\"          #> [172] \"Paphiopedilum\"      \"Botrypus\"           \"Antimima\"           #> [175] \"Spartium\"           \"Flourensia\"         \"Horsfieldia\"        #> [178] \"Syntrichia\"         \"Guadua\"             \"Agelanthus\"         #> [181] \"Oxylobium\"          \"Brachionidium\"      \"Prasophyllum\"       #> [184] \"Anthyllis\"          \"Phyllagathis\"       \"Maytenus\"           #> [187] \"Teucrium\"           \"Centella\"           \"Vittaria\"           #> [190] \"Pelexia\"            \"Pilotrichella\"      \"Helictochloa\"       #> [193] \"Vitex\"              \"Jacea\"              \"Bunium\"             #> [196] \"Neomirandea\"        \"Cremanthodium\"      \"Psammophiliella\"    #> [199] \"Ampelosicyos\"       \"Bruchia\"            \"Padus\"              #> [202] \"Parashorea\"         \"Urostachys\"         \"Diaphananthe\"       #> [205] \"Seseli\"             \"Erpodium\"           \"Brachiolejeunea\"    #> [208] \"Santaloides\"        \"Otholobium\"         \"Bossiaea\"           #> [211] \"Lysinema\"           \"Astartea\"           \"Rodgersia\"          #> [214] \"Pergularia\"         \"Coniogramme\"        \"Octoblepharum\"      #> [217] \"Phylica\"            \"Heterostemma\"       \"Fagara\"             #> [220] \"Roupala\"            \"Rodriguezia\"        \"Dichelyma\"          #> [223] \"Jasminum\"           \"Carpotroche\"        \"Najas\"              #> [226] \"Centinodia\"         \"Dioscoreophyllum\"   \"Dendropemon\"        #> [229] \"Zaluzianskya\"       \"Quesnelia\"          \"Benthamia\"          #> [232] \"Thomasia\"           \"Mesembryanthemum\"   \"Lizeron\"            #> [235] \"Narcissus\"          \"Cleistanthus\"       \"Galeandra\"          #> [238] \"Helenium\"           \"Gratiola\"           \"Aptosimum\"          #> [241] \"Blechum\"            \"Melanophylla\"       \"Impatiens\"          #> [244] \"Rafnia\"             \"Montrichardia\"      \"Tetrorchidium\"      #> [247] \"Libanotis\"          \"Ptelea\"             \"Tragacantha\"        #> [250] \"Arachniodes\"        \"Elleanthus\"         \"Camassia\"           #> [253] \"Psephellus\"         \"Robinia\"            \"Dais\"               #> [256] \"Quincula\"           \"Microcampylopus\"    \"Verbena\"            #> [259] \"Elatostema\"         \"Gossypium\"          \"Brunellia\"          #> [262] \"Pseudognaphalium\"   \"Onobrychis\"         \"Ledebouria\"         #> [265] \"Cosmibuena\"         \"Pylaisia\"           \"Tachigali\"          #> [268] \"Mammillaria\"        \"Caldesia\"           \"Clusia\"             #> [271] \"Poranopsis\"         \"Epithema\"           \"Asclepias\"          #> [274] \"Omphalospora\"       \"Lagerstroemia\"      \"Cristaria\"          #> [277] \"Astilbe\"            \"Cryptadenia\"        \"Philonotion\"        #> [280] \"Tetragonotheca\"     \"Zephyranthes\"       \"Eleiotis\"           #> [283] \"Ehretia\"            \"Sabatia\"            \"Paraspalathus\"      #> [286] \"Staphidium\"         \"Spinifex\"           \"Tamarix\"            #> [289] \"Sinapis\"            \"Berkheya\"           \"Mirabilis\"          #> [292] \"Gelonium\"           \"Gackstroemia\"       \"Sonerila\"           #> [295] \"Jacobaea\"           \"Arenaria\"           \"Endotrichum\"        #> [298] \"Agalmyla\"           \"Bakeridesia\"        \"Piper\"              #> [301] \"Lavenia\"            \"Schizomitrium\"      \"Allocarya\"          #> [304] \"Lepidium\"           \"Arum\"               \"Frullania\"          #> [307] \"Ebnerella\"          \"Escobaria\"          \"Rhoicissus\"         #> [310] \"Anisopappus\"        \"Heuchera\"           \"Globba\"             #> [313] \"Hygrolejeunea\"      \"Rhipsalis\"          \"Ceratostema\"        #> [316] \"Syzygiella\"         \"Dolichostachys\"     \"Grias\"              #> [319] \"Pyxidaria\"          \"Rebutia\"            \"Plagiothecium\"      #> [322] \"Calymperes\"         \"Bryonia\"            \"Dipteracanthus\"     #> [325] \"Cystea\"             \"Sericocalyx\"        \"Andinia\"            #> [328] \"Pentameris\"         \"Spathiphyllum\"      \"Plesioneuron\"       #> [331] \"Podalyria\"          \"Stissera\"           \"Oldenlandia\"        #> [334] \"Gynandropsis\"       \"Chilita\"            \"Linosyris\"          #> [337] \"Acmella\"            \"Cyrtomium\"          \"Pterygodium\"        #> [340] \"Polybotrya\"         \"Lithops\"            \"Chelonistele\"       #> [343] \"Sindora\"            \"Weingartia\"         \"Leymus\"             #> [346] \"Tripleurothemis\"    \"Cyclophyllum\"       \"Heteromma\"          #> [349] \"Eminium\"            \"Cryptocarya\"        \"Anacolosa\"          #> [352] \"Cynoglossum\"        \"Spermacoce\"         \"Connarus\"           #> [355] \"Lactuca\"            \"Synsepalum\"         \"Hedyotis\"           #> [358] \"Leutea\"             \"Hexalobus\"          \"Notelaea\"           #> [361] \"Erica\"              \"Anila\"              \"Thereianthus\"       #> [364] \"Manulea\"            \"Tovomita\"           \"Sonchus\"            #> [367] \"Cynophalla\"         \"Mycaranthes\"        \"Celosia\"            #> [370] \"Hypochaeris\"        \"Psiadia\"            \"Kuhlhasseltia\"      #> [373] \"Psittacanthus\"      \"Schoenocaulon\"      \"Polystachya\"        #> [376] \"Cynontodium\"        \"Tuzibeanthus\"       \"Sebaea\"             #> [379] \"Condylopodium\"      \"Actinophlebia\"      \"Tellima\"            #> [382] \"Saxifraga\"          \"Axonopus\"           \"Pleurogramme\"       #> [385] \"Orophea\"            \"Villaresia\"         \"Taxilejeunea\"       #> [388] \"Muricococcum\"       \"Rumex\"              \"Topobea\"            #> [391] \"Neoporteria\"        \"Pedersenia\"         \"Acuan\"              #> [394] \"Athrixia\"           \"Hymenolyma\"         \"Polygonum\"          #> [397] \"Sarracenia\"         \"Breweriopsis\"       \"Capsicum\"           #> [400] \"Breidleria\"         \"Petrocosmea\"        \"Bretschneidera\"     #> [403] \"Gnaphalium\"         \"Scalesia\"           \"Cystopteris\"        #> [406] \"Vicia\"              \"Mollia\"             \"Alansmia\"           #> [409] \"Quercus\"            \"Abronia\"            \"Crenias\"            #> [412] \"Photinia\"           \"Porothamnium\"       \"Nonea\"              #> [415] \"Calyptranthes\"      \"Moringa\"            \"Tridophyllum\"       #> [418] \"Sideroxylon\"        \"Struthiola\"         \"Calendula\"          #> [421] \"Hedychium\"          \"Macroptilium\"       \"Sarmentypnum\"       #> [424] \"Citronella\"         \"Idiothamnus\"        \"Hackelia\"           #> [427] \"Sinochasea\"         \"Pseudolmedia\"       \"Elymotrigia\"        #> [430] \"Niedenzuella\"       \"Androsace\"          \"Pityrodia\"          #> [433] \"Tagetes\"            \"Muraltia\"           \"Stereodon\"          #> [436] \"Pleuridium\"         \"Claopodium\"         \"Klenzea\"            #> [439] \"Rhododendron\"       \"Archilejeunea\"      \"Eriosyce\"           #> [442] \"Crossomitrium\"      \"Dactylorhiza\"       \"Barclaya\"           #> [445] \"Fragaria\"           \"Linum\"              \"Aptychella\"         #> [448] \"Huilaea\"            \"Kaempferia\"         \"Calandrinia\"        #> [451] \"Silaus\"             \"Myrrhidium\"         \"Rafflesia\"          #> [454] \"Lavatera\"           \"Microchilus\"        \"Gymnobalanus\"       #> [457] \"Cacalia\"            \"Mikania\"            \"Elmera\"             #> [460] \"Micropiper\"         \"Chrysosplenium\"     \"Juniperus\"          #> [463] \"Tradescantia\"       \"Thesium\"            \"Ostrya\"             #> [466] \"Gymnogramma\"        \"Menonvillea\"        \"Codonopsis\"         #> [469] \"Rhacopilopsis\"      \"Palicourea\"         \"Kunzea\"             #> [472] \"Panicum\"            \"Dicraeia\"           \"Yucca\"              #> [475] \"Scutellaria\"        \"Peraxilla\"          \"Chaunanthus\"        #> [478] \"Antidesma\"          \"Lithocarpus\"        \"Hemizonia\"          #> [481] \"Ageratina\"          \"Marcgravia\"         \"Orchis\"             #> [484] \"Aphanorrhegma\"      \"Glyceria\"           \"Calypogeia\"         #> [487] \"Decaspermum\"        \"Eulalia\"            \"Ephedra\"            #> [490] \"Woodvillea\"         \"Mosannona\"          \"Orthion\"            #> [493] \"Bergenia\"           \"Helianthocereus\"    \"Pittosporum\"        #> [496] \"Gymnosiphon\"        \"Utricularia\"        \"Coreocarpus\"        #> [499] \"Hebe\"               \"Urophyllum\""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Search UK National Biodiversity Network database for\ntaxonomic classification — nbn_classification","title":"Search UK National Biodiversity Network database for\ntaxonomic classification — nbn_classification","text":"Search UK National Biodiversity Network database taxonomic classification","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search UK National Biodiversity Network database for\ntaxonomic classification — nbn_classification","text":"","code":"nbn_classification(id, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/nbn_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search UK National Biodiversity Network database for\ntaxonomic classification — nbn_classification","text":"id (character) NBN identifier. ... args passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search UK National Biodiversity Network database for\ntaxonomic classification — nbn_classification","text":"data.frame","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_classification.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search UK National Biodiversity Network database for\ntaxonomic classification — nbn_classification","text":"https://api.nbnatlas.org/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/nbn_classification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search UK National Biodiversity Network database for\ntaxonomic classification — nbn_classification","text":"Scott Chamberlain,","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search UK National Biodiversity Network database for\ntaxonomic classification — nbn_classification","text":"","code":"if (FALSE) { nbn_classification(id=\"NHMSYS0000376773\")  # get id first, then pass to this fxn id <- get_nbnid(\"Zootoca vivipara\", rec_only = TRUE, rank = \"Species\") nbn_classification(id)  nbn_classification(id=\"NHMSYS0000502940\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/nbn_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search UK National Biodiversity Network — nbn_search","title":"Search UK National Biodiversity Network — nbn_search","text":"Search UK National Biodiversity Network","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search UK National Biodiversity Network — nbn_search","text":"","code":"nbn_search(   sci_com,   fq = NULL,   order = NULL,   sort = NULL,   start = 0,   rows = 25,   facets = NULL,   q = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/nbn_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search UK National Biodiversity Network — nbn_search","text":"sci_com (character) query terms(s), scientific common name fq (character) Filters applied original query. additional params form fq=INDEXEDFIELD:VALUE e.g. fq=rank:kingdom. See https://species-ws.nbnatlas.org/indexFields fields queryable. order (character) Supports \"asc\" \"desc\" sort (character) indexed field sort start (integer) Record offset, enable paging rows (integer) Number records return facets (list) Comma separated list fields create facets e.g. facets=basis_of_record. q Deprecated, see sci ... args passed crul::HttpClient.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search UK National Biodiversity Network — nbn_search","text":"list slots metadata (meta) list response attributes, data (data) data.frame results","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search UK National Biodiversity Network — nbn_search","text":"https://api.nbnatlas.org/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/nbn_search.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search UK National Biodiversity Network — nbn_search","text":"Scott Chamberlain,","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search UK National Biodiversity Network — nbn_search","text":"","code":"if (FALSE) { x <- nbn_search(sci_com = \"Vulpes\") x$meta$totalRecords x$meta$pageSize x$meta$urlParameters x$meta$queryTitle head(x$data)  nbn_search(sci_com = \"blackbird\", start = 4)  # debug curl stuff nbn_search(sci_com = \"blackbird\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/nbn_synonyms.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all synonyms for a taxon name with a given id from NBN — nbn_synonyms","title":"Return all synonyms for a taxon name with a given id from NBN — nbn_synonyms","text":"Return synonyms taxon name given id NBN","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_synonyms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all synonyms for a taxon name with a given id from NBN — nbn_synonyms","text":"","code":"nbn_synonyms(id, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/nbn_synonyms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all synonyms for a taxon name with a given id from NBN — nbn_synonyms","text":"id taxon identifier code ... args passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_synonyms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all synonyms for a taxon name with a given id from NBN — nbn_synonyms","text":"data.frame","code":""},{"path":"https://docs.ropensci.org/taxize/reference/nbn_synonyms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Return all synonyms for a taxon name with a given id from NBN — nbn_synonyms","text":"https://api.nbnatlas.org/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/nbn_synonyms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return all synonyms for a taxon name with a given id from NBN — nbn_synonyms","text":"","code":"if (FALSE) { nbn_synonyms(id = 'NHMSYS0001501147') nbn_synonyms(id = 'NHMSYS0000456036')  # none nbn_synonyms(id = 'NHMSYS0000502940') }"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Search NCBI for children of a taxon — ncbi_children","title":"Search NCBI for children of a taxon — ncbi_children","text":"Search NCBI Taxonomy database uids children taxa. Taxa can referenced name uid. Referencing name faster cases, different taxa name (e.g. Satyrium; see examples). one searched children taxa returned. can avoided using uid instead name specifying ancestor. ancestor provided, children taxon ancestor returned. fail two taxa name specified ancestor.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search NCBI for children of a taxon — ncbi_children","text":"","code":"ncbi_children(   name = NULL,   id = NULL,   start = 0,   max_return = 1000,   ancestor = NULL,   out_type = c(\"summary\", \"uid\"),   ambiguous = FALSE,   key = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search NCBI for children of a taxon — ncbi_children","text":"name (character) string search . exact matches found name given returned. compatible id. id (character/numeric) uid search . compatible name. start first record return. omitted, results returned first record (start=0). max_return (numeric; length=1) maximum number children return. ancestor (character) ancestor taxon searched . useful one taxon name. effect id used. out_type (character) Currently either \"summary\" \"uid\": summary output list data.frame children uid, name, rank. uid list character vectors children uids ambiguous logical; length 1 FALSE, children taxa words like \"unclassified\", \"unknown\", \"uncultured\", \"sp.\" removed output. NOTE: option applies out_type= \"summary\". key (character) NCBI Entrez API key. optional. See Details. ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search NCBI for children of a taxon — ncbi_children","text":"output type depends value out_type parameter. Taxa found result NAs lack children results empty data structure.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Search NCBI for children of a taxon — ncbi_children","text":"See taxize-authentication() help authentication. strongly recommend getting API key","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":"http-version","dir":"Reference","previous_headings":"","what":"HTTP version","title":"Search NCBI for children of a taxon — ncbi_children","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":"rate-limits","dir":"Reference","previous_headings":"","what":"Rate limits","title":"Search NCBI for children of a taxon — ncbi_children","text":"case run errors due rate limit exceeded, see taxize_options(), can set ncbi_sleep.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search NCBI for children of a taxon — ncbi_children","text":"Zachary Foster zacharyfoster1989@gmail.com","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search NCBI for children of a taxon — ncbi_children","text":"","code":"if (FALSE) { ncbi_children(name=\"Satyrium\") #Satyrium is the name of two different genera ncbi_children(name=\"Satyrium\", ancestor=\"Eumaeini\") # A genus of butterflies ncbi_children(name=\"Satyrium\", ancestor=\"Orchidaceae\") # A genus of orchids ncbi_children(id=\"266948\") #\"266948\" is the uid for the butterfly genus ncbi_children(id=\"62858\") #\"62858\" is the uid for the orchid genus  # use curl options ncbi_children(name=\"Satyrium\", ancestor=\"Eumaeini\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","title":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","text":"Retrieve taxa names downstream hierarchy NCBI","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","text":"","code":"ncbi_downstream(id, downto, intermediate = FALSE, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","text":"id (numeric/integer) NCBI taxonomic identifier downto taxonomic level want go . See examples . taxonomic level case sensitive, spell correctly. See data(rank_ref) spelling. intermediate (logical) TRUE, return list length two target taxon rank names, additional list data.frame's intermediate taxonomic groups. Default: FALSE ... args passed ncbi_children()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_downstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","text":"Data.frame taxonomic information downstream family e.g., Order, Class, etc., intermediate=TRUE, list length two, target taxon rank names, intermediate names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_downstream.html","id":"no-rank","dir":"Reference","previous_headings":"","what":"No Rank","title":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","text":"sticky point NCBI can designation taxonomic rank \"Rank\". way programatically knowing taxon. course one can manually look name perhaps know , look web - anything programatically. , rank things sometimes missing.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_downstream.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","text":"See taxize-authentication() help authentication. strongly recommend getting API key","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_downstream.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_downstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all taxa names downstream in hierarchy for NCBI — ncbi_downstream","text":"","code":"if (FALSE) { ## genus Apis ncbi_downstream(id = 7459, downto=\"species\")  ## get intermediate taxa as a separate object ncbi_downstream(id = 7459, downto=\"species\", intermediate = TRUE)  ## Lepidoptera ncbi_downstream(id = 7088, downto=\"superfamily\")  ## families in the ferns (Moniliformopses) (id <- get_uid(\"Moniliformopses\")) ncbi_downstream(id = id, downto = \"order\") }"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"NCBI taxon information from uids — ncbi_get_taxon_summary","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"Downloads summary taxon information NCBI taxonomy databases set taxonomy UIDs using eutils esummary.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"","code":"ncbi_get_taxon_summary(id, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"id (character) NCBI taxonomy uids retrieve information . See Details. key (character) NCBI Entrez API key. optional. See Details. ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"data.frame following columns: uid uid queried name name taxon; binomial name taxon rank species rank taxonomic rank (e.g. 'Genus')","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"input vector list NCBI IDs longer 2500 characters (use nchar(paste(ids, collapse = \"+\"))), split list chunks since number characters run HTTP 414 error \"Request-URI Long\".","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":"http-version","dir":"Reference","previous_headings":"","what":"HTTP version","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"See taxize-authentication help authentication. strongly recommend getting API key","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"Zachary Foster zacharyfoster1989@Sgmail.com","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_get_taxon_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NCBI taxon information from uids — ncbi_get_taxon_summary","text":"","code":"if (FALSE) { ncbi_get_taxon_summary(c(1430660, 4751))  # use curl options ncbi_get_taxon_summary(c(1430660, 4751), verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_getbyid-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve gene sequences from NCBI by accession number. — ncbi_getbyid","title":"Retrieve gene sequences from NCBI by accession number. — ncbi_getbyid","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_getbyid-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve gene sequences from NCBI by accession number. — ncbi_getbyid","text":"","code":"ncbi_getbyid(...)"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_getbyid-defunct.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve gene sequences from NCBI by accession number. — ncbi_getbyid","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_getbyname-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve gene sequences from NCBI by taxon name and gene names. — ncbi_getbyname","title":"Retrieve gene sequences from NCBI by taxon name and gene names. — ncbi_getbyname","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_getbyname-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve gene sequences from NCBI by taxon name and gene names. — ncbi_getbyname","text":"","code":"ncbi_getbyname(...)"},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_getbyname-defunct.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve gene sequences from NCBI by taxon name and gene names. — ncbi_getbyname","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_search-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for gene sequences available for taxa from NCBI. — ncbi_search","title":"Search for gene sequences available for taxa from NCBI. — ncbi_search","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ncbi_search-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for gene sequences available for taxa from NCBI. — ncbi_search","text":"","code":"ncbi_search(...)"},{"path":"https://docs.ropensci.org/taxize/reference/phylomatic_format-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Get family names to make Phylomatic input object, and output input string\nto Phylomatic for use in the function phylomatic_tree. — phylomatic_format","title":"Get family names to make Phylomatic input object, and output input string\nto Phylomatic for use in the function phylomatic_tree. — phylomatic_format","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/phylomatic_format-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get family names to make Phylomatic input object, and output input string\nto Phylomatic for use in the function phylomatic_tree. — phylomatic_format","text":"","code":"phylomatic_format(...)"},{"path":"https://docs.ropensci.org/taxize/reference/phylomatic_format-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get family names to make Phylomatic input object, and output input string\nto Phylomatic for use in the function phylomatic_tree. — phylomatic_format","text":"... Parameters, ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/phylomatic_tree-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Phylomatic for a phylogenetic tree. — phylomatic_tree","title":"Query Phylomatic for a phylogenetic tree. — phylomatic_tree","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/phylomatic_tree-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Phylomatic for a phylogenetic tree. — phylomatic_tree","text":"","code":"phylomatic_tree(...)"},{"path":"https://docs.ropensci.org/taxize/reference/phylomatic_tree-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Phylomatic for a phylogenetic tree. — phylomatic_tree","text":"... Parameters, ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ping.html","id":null,"dir":"Reference","previous_headings":"","what":"Ping an API used in taxize to see if it's working. — ping","title":"Ping an API used in taxize to see if it's working. — ping","text":"Ping API used taxize see working.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ping an API used in taxize to see if it's working. — ping","text":"","code":"col_ping(what = \"status\", ...)  eol_ping(what = \"status\", ...)  itis_ping(what = \"status\", ...)  ncbi_ping(what = \"status\", key = NULL, ...)  tropicos_ping(what = \"status\", ...)  nbn_ping(what = \"status\", ...)  gbif_ping(what = \"status\", ...)  bold_ping(what = \"status\", ...)  ipni_ping(what = \"status\", ...)  vascan_ping(what = \"status\", ...)  fg_ping(what = \"status\", ...)"},{"path":"https://docs.ropensci.org/taxize/reference/ping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ping an API used in taxize to see if it's working. — ping","text":"(character) One status (default), content, HTTP status code. status, just check HTTP status code 200, similar signifying service . content, simple, quick check determine returned content matches expected. HTTP status code, must match appropriate code. See status_codes(). ... Curl options passed crul::verb-GET key (character) NCBI Entrez API key. optional. See get_uid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ping an API used in taxize to see if it's working. — ping","text":"logical, TRUE FALSE","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ping an API used in taxize to see if it's working. — ping","text":"ITIS, see ritis::description, provides number scientific common names character string.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ping.html","id":"http-version-for-ncbi-requests","dir":"Reference","previous_headings":"","what":"HTTP version for NCBI requests","title":"Ping an API used in taxize to see if it's working. — ping","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ping an API used in taxize to see if it's working. — ping","text":"","code":"if (FALSE) { col_ping() col_ping(\"content\") col_ping(200) col_ping(\"200\") col_ping(204)  itis_ping() eol_ping() ncbi_ping() tropicos_ping() nbn_ping()  gbif_ping() gbif_ping(200)  bold_ping() bold_ping(200) bold_ping(\"content\")  ipni_ping() ipni_ping(200) ipni_ping(\"content\")  vascan_ping() vascan_ping(200) vascan_ping(\"content\")  # curl options vascan_ping(verbose = TRUE) eol_ping(500, verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/plantGenusNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of plant genus names from ThePlantList — plantGenusNames","title":"Vector of plant genus names from ThePlantList — plantGenusNames","text":"names http://www.theplantlist.org, randomly chosen subset genera names purpose names play examples package.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantGenusNames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vector of plant genus names from ThePlantList — plantGenusNames","text":"vector length 793","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantGenusNames.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vector of plant genus names from ThePlantList — plantGenusNames","text":"http://www.theplantlist.org","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of plant species (genus - specific epithet) names from ThePlantList — plantNames","title":"Vector of plant species (genus - specific epithet) names from ThePlantList — plantNames","text":"names http://www.theplantlist.org, randomly chosen subset names form genus/specific epithet purpose names play examples package.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantNames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vector of plant species (genus - specific epithet) names from ThePlantList — plantNames","text":"vector length 1182","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantNames.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vector of plant species (genus - specific epithet) names from ThePlantList — plantNames","text":"http://www.theplantlist.org","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantminer.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for taxonomy data from Plantminer.com — plantminer","title":"Search for taxonomy data from Plantminer.com — plantminer","text":"Search taxonomy data Plantminer.com","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantminer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for taxonomy data from Plantminer.com — plantminer","text":"","code":"plantminer(plants, from = \"tpl\", messages = TRUE, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/plantminer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for taxonomy data from Plantminer.com — plantminer","text":"plants (character) Vector plant species names. Required. (character) One tpl (theplantlist.com data), flora (Brazilian Flora Checklist). Required. Default: tpl messages (logical) informative messages . Default: TRUE ... curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantminer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for taxonomy data from Plantminer.com — plantminer","text":"data.frame results.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantminer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search for taxonomy data from Plantminer.com — plantminer","text":"used need API key Plantminer; longer needed","code":""},{"path":"https://docs.ropensci.org/taxize/reference/plantminer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for taxonomy data from Plantminer.com — plantminer","text":"","code":"if (FALSE) { # A single taxon plantminer(\"Ocotea pulchella\")  # Many taxa plants <- c(\"Myrcia lingua\", \"Myrcia bella\", \"Ocotea pulchella\",     \"Miconia\", \"Coffea arabica var. amarella\", \"Bleh\") plantminer(plants)  # By deafult, tpl is used, for Theplantlist data, # toggle the from parameter here plantminer(\"Ocotea pulchella\", from = \"flora\") }"},{"path":"https://docs.ropensci.org/taxize/reference/pow_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup taxa in Kew's Plants of the World — pow_lookup","title":"Lookup taxa in Kew's Plants of the World — pow_lookup","text":"Lookup taxa Kew's Plants World","code":""},{"path":"https://docs.ropensci.org/taxize/reference/pow_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup taxa in Kew's Plants of the World — pow_lookup","text":"","code":"pow_lookup(id, include = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/pow_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup taxa in Kew's Plants of the World — pow_lookup","text":"id (character) taxon id. required include (character) vector additional fields include results. options include 'distribution' 'descriptions'. optional ... args passed crul::HttpClient.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/pow_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup taxa in Kew's Plants of the World — pow_lookup","text":"","code":"if (FALSE) { pow_lookup(id = 'urn:lsid:ipni.org:names:320035-2') pow_lookup(id = 'urn:lsid:ipni.org:names:320035-2',   include = \"distribution\") pow_lookup(id = 'urn:lsid:ipni.org:names:320035-2',   include = c(\"distribution\", \"descriptions\")) }"},{"path":"https://docs.ropensci.org/taxize/reference/pow_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Kew's Plants of the World — pow_search","title":"Search Kew's Plants of the World — pow_search","text":"Search Kew's Plants World","code":""},{"path":"https://docs.ropensci.org/taxize/reference/pow_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Kew's Plants of the World — pow_search","text":"","code":"pow_search(sci_com, limit = 100, cursor = \"*\", sort = NULL, q = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/pow_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Kew's Plants of the World — pow_search","text":"sci_com (character) query terms, scientific common name limit (integer) Number records return. default: 100 cursor (character) cursor string sort (character) field sort sort order separted underscore, e.g., sort=\"name_desc\" q Deprecated, see sci_com ... args passed crul::HttpClient.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/pow_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Kew's Plants of the World — pow_search","text":"list slots metadata (meta) list response attributes, data (data) data.frame results","code":""},{"path":"https://docs.ropensci.org/taxize/reference/pow_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search Kew's Plants of the World — pow_search","text":"http://powo.science.kew.org/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/pow_search.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search Kew's Plants of the World — pow_search","text":"Scott Chamberlain,","code":""},{"path":"https://docs.ropensci.org/taxize/reference/pow_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Kew's Plants of the World — pow_search","text":"","code":"if (FALSE) { x <- pow_search(sci_com = \"Quercus\") x$meta x$meta$totalResults x$meta$perPage x$meta$totalPages x$meta$page x$meta$cursor head(x$data)  # pagination pow_search(sci_com = \"sunflower\", limit = 2)  # debug curl stuff invisible(pow_search(sci_com = \"Helianthus annuus\", verbose = TRUE))  # sort desc <- pow_search(sci_com = \"Helianthus\", sort = \"name_desc\") desc$data$name asc <- pow_search(sci_com = \"Helianthus\", sort = \"name_asc\") asc$data$name }"},{"path":"https://docs.ropensci.org/taxize/reference/pow_synonyms.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup synonyms in Kew's Plants of the World — pow_synonyms","title":"Lookup synonyms in Kew's Plants of the World — pow_synonyms","text":"Lookup synonyms Kew's Plants World","code":""},{"path":"https://docs.ropensci.org/taxize/reference/pow_synonyms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup synonyms in Kew's Plants of the World — pow_synonyms","text":"","code":"pow_synonyms(id, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/pow_synonyms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup synonyms in Kew's Plants of the World — pow_synonyms","text":"id (character) taxon id. required ... args passed pow_lookup()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/pow_synonyms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup synonyms in Kew's Plants of the World — pow_synonyms","text":"","code":"if (FALSE) { pow_synonyms(id = 'urn:lsid:ipni.org:names:320035-2') pow_synonyms(id = 'urn:lsid:ipni.org:names:358881-1') pow_synonyms(id = 'urn:lsid:ipni.org:names:359855-1') }"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":null,"dir":"Reference","previous_headings":"","what":"methods for preparing/printing info for prompts for get_* functions — progressor","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"methods preparing/printing info prompts get_* functions methods preparing/printing info prompts get_* functions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"total (integer) x found (integer) list results name found not_found (integer) list results name found done (integer) x suppress (integer) x","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"p (integer) percent done d (integer) number done","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"progressor$new() progressor$completed() progressor$completed_found() progressor$completed_not_found() progressor$prog_start() progressor$prog() progressor$prog_found() progressor$prog_not_found() progressor$prog_summary() progressor$clone()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"Create new progressor object","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$new(items, suppress = FALSE)"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"items (character) xxx suppress (logical) suppress messages. default: FALSE","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"new progressor object","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-completed-","dir":"Reference","previous_headings":"","what":"Method completed()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"add results found found","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$completed(name, att)"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"name (character) vector names att (character) one \"found\" \"found\"","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"nothing returned; adds $found $not_found","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-completed-found-","dir":"Reference","previous_headings":"","what":"Method completed_found()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"add found results","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$completed_found(name)"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"name (character) vector taxon names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"nothing returned; adds $found","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-completed-not-found-","dir":"Reference","previous_headings":"","what":"Method completed_not_found()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"add found results","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$completed_not_found(name)"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"name (character) vector taxon names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"nothing returned; adds $not_found","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-prog-start-","dir":"Reference","previous_headings":"","what":"Method prog_start()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"print messages total queries , percent completed","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$prog_start()"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-prog-","dir":"Reference","previous_headings":"","what":"Method prog()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"prints message found found using packages cli crayon","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$prog(att)"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"att (character) one \"found\" \"found\"","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"messages","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-prog-found-","dir":"Reference","previous_headings":"","what":"Method prog_found()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"prints found message using packages cli crayon","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$prog_found()"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"messages","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-prog-not-found-","dir":"Reference","previous_headings":"","what":"Method prog_not_found()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"prints found message using packages cli crayon","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$prog_not_found()"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"messages","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-prog-summary-","dir":"Reference","previous_headings":"","what":"Method prog_summary()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"prints summary end result total found found","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$prog_summary()"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"messages","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"progressor$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/progressor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"methods for preparing/printing info for prompts for get_* functions — progressor","text":"","code":"if (FALSE) { # nms <- c(\"Quercus\", \"Sasdsfasdf\") # x <- progressor$new(items = nms) # x # x$prog_start()  # x$completed(nms[1], \"found\") # x$prog_found()  # x$completed(nms[2], \"not found\") # x$prog_not_found()  # x$prog_summary()  # suppress cli::cat_line # x <- progressor$new(items = nms, suppress = TRUE) # x$prog_summary() }"},{"path":"https://docs.ropensci.org/taxize/reference/rank_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup-table for IDs of taxonomic ranks — rank_ref","title":"Lookup-table for IDs of taxonomic ranks — rank_ref","text":"data.frame 46 rows, 2 columns: rankid - numeric rank id, consecutive ranks - comma separated vector names considered equal one another within row","code":""},{"path":"https://docs.ropensci.org/taxize/reference/rank_ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lookup-table for IDs of taxonomic ranks — rank_ref","text":"use data.frame data sorting/filtering based ordering ranks. Please let us know rank occurs one data sources taxize rank_ref dataset. Let us know disagree ordering ranks. Note rankid 280 essentially \"genetic variants\"; placed just 'unspecified' denote without rank, really taxonomic ranks either. far know way delineate among \"genetic variant\" types.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/rank_ref_zoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup-table for IDs of taxonomic ranks (WoRMS) — rank_ref_zoo","title":"Lookup-table for IDs of taxonomic ranks (WoRMS) — rank_ref_zoo","text":"rank_ref specifically WoRMS, section/subsection ranks put family/order rather species/genus.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/rankagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data by given taxonomic rank — rankagg","title":"Aggregate data by given taxonomic rank — rankagg","text":"Aggregate data given taxonomic rank","code":""},{"path":"https://docs.ropensci.org/taxize/reference/rankagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data by given taxonomic rank — rankagg","text":"","code":"rankagg(data = NULL, datacol = NULL, rank = NULL, fxn = \"sum\")"},{"path":"https://docs.ropensci.org/taxize/reference/rankagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data by given taxonomic rank — rankagg","text":"data data.frame. Column headers must capitalized ranks (e.g., Genus, Tribe, etc.) (data.frame) datacol data column (character) rank Taxonomic rank aggregate (character) fxn Arithmetic function vector functions (character)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/rankagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate data by given taxonomic rank — rankagg","text":"","code":"if (require(vegan)) { data(dune.taxon, dune, package='vegan') dat <- dune.taxon dat$abundance <- colSums(dune) rankagg(data=dat, datacol=\"abundance\", rank=\"Genus\") rankagg(data=dat, \"abundance\", rank=\"Family\") rankagg(data=dat, \"abundance\", rank=\"Genus\", fxn=\"mean\") rankagg(data=dat, \"abundance\", rank=\"Subclass\") rankagg(data=dat, \"abundance\", rank=\"Subclass\", fxn=\"sd\") } #> Loading required package: vegan #> Loading required package: permute #> Loading required package: lattice #> This is vegan 2.6-4 #>      Subclass       sd #> 1     Bryidae 27.57716 #> 2 Magnoliidae 18.45558"},{"path":"https://docs.ropensci.org/taxize/reference/resolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve names from different data sources — resolve","title":"Resolve names from different data sources — resolve","text":"Resolve names iPlant's name resolver, Global Names Resolver (GNR)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/resolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve names from different data sources — resolve","text":"","code":"resolve(sci, db = \"gnr\", query = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/resolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve names from different data sources — resolve","text":"sci Vector one taxonomic names (common names supported) db Source check names . One iplant gnr. Default: gnr. Note taxonomic data source identifiers, provide wrong db value identifier get result, likely wrong (expecting). query Deprecated, see sci ... Curl options passed crul::verb-GET crul::verb-POST. addition, named args passed  respective function. See examples","code":""},{"path":"https://docs.ropensci.org/taxize/reference/resolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve names from different data sources — resolve","text":"list length equal length db parameter (number sources requested), element data.frame list results source.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/resolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve names from different data sources — resolve","text":"","code":"if (FALSE) { resolve(sci=c(\"Helianthus annuus\", \"Homo sapiens\")) resolve(sci=\"Quercus keloggii\", db='gnr') resolve(sci=c(\"Helianthus annuus\", \"Homo sapiens\"), db=c('iplant', 'gnr')) resolve(sci=\"Quercus keloggii\", db=c('iplant', 'gnr'))  # pass in options specific to each source resolve(\"Helianthus annuus\", db = 'gnr', preferred_data_sources = c(3, 4)) resolve(\"Helianthus annuus\", db = 'iplant', retrieve = 'best') identical(  resolve(\"Helianthus annuus\", db = 'iplant', retrieve = 'best')$iplant,  iplant_resolve(\"Helianthus annuus\", retrieve = 'best') )  # pass in curl options resolve(sci=\"Qercuss\", db = \"iplant\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/sci2comm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get common names from scientific names. — sci2comm","title":"Get common names from scientific names. — sci2comm","text":"Get common names scientific names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/sci2comm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get common names from scientific names. — sci2comm","text":"","code":"sci2comm(...)  # S3 method for default sci2comm(sci, db = \"ncbi\", simplify = TRUE, scinames = NULL, ...)  # S3 method for uid sci2comm(id, ...)  # S3 method for tsn sci2comm(id, simplify = TRUE, ...)  # S3 method for wormsid sci2comm(id, simplify = TRUE, ...)  # S3 method for iucn sci2comm(id, simplify = TRUE, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/sci2comm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get common names from scientific names. — sci2comm","text":"... arguments passed functions get_uid(), get_tsn(). sci character; One scientific names partial names. db character; Data source, one \"ncbi\" (default), \"itis\" \"eol\", \"worms\", \"iucn\". Note taxonomic data source identifiers,  provide wrong db value identifier get result, likely wrong (expecting). using ncbi iucn recommend getting API key; see taxize-authentication simplify (logical) TRUE, simplify output vector names. FALSE, return variable formats different sources, usually data.frame. applies eol itis. Specify FALSE obtain language vernacular output eol itis. scinames Deprecated, see sci id character; identifiers, returned get_tsn(), get_uid().","code":""},{"path":"https://docs.ropensci.org/taxize/reference/sci2comm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get common names from scientific names. — sci2comm","text":"List character vectors, named input taxon name, taxon ID. character(0) match","code":""},{"path":"https://docs.ropensci.org/taxize/reference/sci2comm.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Get common names from scientific names. — sci2comm","text":"See taxize-authentication help authentication","code":""},{"path":"https://docs.ropensci.org/taxize/reference/sci2comm.html","id":"http-version-for-ncbi-requests","dir":"Reference","previous_headings":"","what":"HTTP version for NCBI requests","title":"Get common names from scientific names. — sci2comm","text":"hard code http_version = 2L use HTTP/1.1 HTTP requests Entrez API. See curl::curl_symbols('CURL_HTTP_VERSION')","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/sci2comm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get common names from scientific names. — sci2comm","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/sci2comm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get common names from scientific names. — sci2comm","text":"","code":"if (FALSE) { sci2comm(sci='Helianthus annuus') sci2comm(sci='Helianthus annuus', db='eol') sci2comm(sci=c('Helianthus annuus', 'Poa annua')) sci2comm(sci='Puma concolor', db='ncbi') sci2comm('Gadus morhua', db='worms') sci2comm('Pomatomus saltatrix', db='worms') sci2comm('Loxodonta africana', db='iucn')  # Passing id in, works for sources: itis and ncbi, not eol sci2comm(get_uid('Helianthus annuus')) sci2comm(get_wormsid('Gadus morhua')) sci2comm(get_iucn('Loxodonta africana'))  # Don't simplify returned sci2comm(get_iucn('Loxodonta africana'), simplify=FALSE)  # Use curl options sci2comm('Helianthus annuus', db=\"ncbi\", verbose = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/scrapenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve names using Global Names Recognition and Discovery. — scrapenames","title":"Resolve names using Global Names Recognition and Discovery. — scrapenames","text":"Uses Global Names Recognition Discovery service, see http://gnrd.globalnames.org/ Note: function sometimes gives data back sometimes . API function extremely buggy.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/scrapenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve names using Global Names Recognition and Discovery. — scrapenames","text":"","code":"scrapenames(   url = NULL,   file = NULL,   text = NULL,   engine = NULL,   unique = NULL,   verbatim = NULL,   detect_language = NULL,   all_data_sources = NULL,   data_source_ids = NULL,   return_content = FALSE,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/scrapenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve names using Global Names Recognition and Discovery. — scrapenames","text":"url encoded URL web page, PDF, Microsoft Office document, image file, see examples file using multipart/form-data content-type, file may sent. path file machine. text Type: string. Text content; best used POST request, see examples engine (optional) (integer) Default: 0. Either 1 TaxonFinder, 2 NetiNeti, 0 . absent, engines used. unique (optional) (logical) TRUE (default), response unique names without offsets. verbatim (optional) Type: boolean, TRUE (default FALSE), response excludes verbatim strings. detect_language (optional) Type: boolean, TRUE (default), NetiNeti used language incoming text determined English. FALSE, NetiNeti used requested. all_data_sources (optional) Type: boolean. Resolve found names available Data Sources. data_source_ids (optional) Type: string. Pipe separated list data source ids resolve found names . See list Data Sources http://resolver.globalnames.org/data_sources return_content (logical) return OCR'ed text. returns text string x$meta$content slot. Default: FALSE ... args passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/scrapenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve names using Global Names Recognition and Discovery. — scrapenames","text":"list length two, first metadata, second data data.frame.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/scrapenames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resolve names using Global Names Recognition and Discovery. — scrapenames","text":"One url, file, text must specified - one .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/scrapenames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Resolve names using Global Names Recognition and Discovery. — scrapenames","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/scrapenames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve names using Global Names Recognition and Discovery. — scrapenames","text":"","code":"if (FALSE) { # Get data from a website using its URL scrapenames('https://en.wikipedia.org/wiki/Spider') scrapenames('https://en.wikipedia.org/wiki/Animal') scrapenames('https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0095068') scrapenames('https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0080498') scrapenames('http://ucjeps.berkeley.edu/cgi-bin/get_JM_treatment.pl?CARYOPHYLLACEAE')  # Scrape names from a pdf at a URL url <- 'https://journals.plos.org/plosone/article/file?id= 10.1371/journal.pone.0058268&type=printable' scrapenames(url = sub('\\n', '', url))  # With arguments scrapenames(url = 'https://www.mapress.com/zootaxa/2012/f/z03372p265f.pdf',   unique=TRUE) scrapenames(url = 'https://en.wikipedia.org/wiki/Spider',   data_source_ids=c(1, 169))  # Get data from a file speciesfile <- system.file(\"examples\", \"species.txt\", package = \"taxize\") scrapenames(file = speciesfile)  nms <- paste0(names_list(\"species\"), collapse=\"\\n\") file <- tempfile(fileext = \".txt\") writeLines(nms, file) scrapenames(file = file)  # Get data from text string scrapenames(text='A spider named Pardosa moesta Banks, 1892')  # return OCR content scrapenames(url='https://www.mapress.com/zootaxa/2012/f/z03372p265f.pdf',   return_content = TRUE) }"},{"path":"https://docs.ropensci.org/taxize/reference/species_plantarum_binomials.html","id":null,"dir":"Reference","previous_headings":"","what":"Species names from Species Plantarum — species_plantarum_binomials","title":"Species names from Species Plantarum — species_plantarum_binomials","text":"names compiled Species Plantarum Carl Linnaeus originally published 1753. first work consistently apply binomial names starting point naming plants. book lists every species plant known time, classified genera. dataset provides useful reference point see taxonomic names changed since inception. names transcribed Robert W. Kiger.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/species_plantarum_binomials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species names from Species Plantarum — species_plantarum_binomials","text":"data frame 5940 rows 3 variables: genus First part binomial species name species within genus epithet specific epithet second part binomial species name species page_number following abbreviations sometimes used page_number field. \"add.\" refers addenda appear unnumbered last page index volume two. \"err.\" refers unnumbered page errata appears following index volume two. \"canc.\" following page number indicates binomial appeared cancelled version page appear replacement (1957-1959 facsimile edition.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/species_plantarum_binomials.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Species names from Species Plantarum — species_plantarum_binomials","text":"Hunt Institute Botanical Documentation","code":""},{"path":"https://docs.ropensci.org/taxize/reference/species_plantarum_binomials.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Species names from Species Plantarum — species_plantarum_binomials","text":"Linnaeus, C. 1753. Species Plantarum. 2 vols. Salvius, Stockholm. [Facsimile edition, 1957-1959, Ray Society, London.]","code":""},{"path":"https://docs.ropensci.org/taxize/reference/species_plantarum_binomials.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Species names from Species Plantarum — species_plantarum_binomials","text":"Carl Linnaeus","code":""},{"path":"https://docs.ropensci.org/taxize/reference/status_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get HTTP status codes — status_codes","title":"Get HTTP status codes — status_codes","text":"Get HTTP status codes","code":""},{"path":"https://docs.ropensci.org/taxize/reference/status_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get HTTP status codes — status_codes","text":"","code":"status_codes()"},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/status_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get HTTP status codes — status_codes","text":"","code":"status_codes() #>  [1] 100 101 102 200 201 202 203 204 205 206 207 208 226 300 301 302 303 304 305 #> [20] 306 307 308 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 #> [39] 416 417 418 419 420 422 423 424 425 426 500 501 502 503 504 505 506 507 508"},{"path":"https://docs.ropensci.org/taxize/reference/synonyms.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve synonyms from various sources given input taxonomic\nnames or identifiers — synonyms","title":"Retrieve synonyms from various sources given input taxonomic\nnames or identifiers — synonyms","text":"Retrieve synonyms various sources given input taxonomic names identifiers","code":""},{"path":"https://docs.ropensci.org/taxize/reference/synonyms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve synonyms from various sources given input taxonomic\nnames or identifiers — synonyms","text":"","code":"synonyms(...)  # S3 method for default synonyms(sci_id, db = NULL, rows = NA, x = NULL, ...)  # S3 method for tsn synonyms(id, ...)  # S3 method for tpsid synonyms(id, ...)  # S3 method for nbnid synonyms(id, ...)  # S3 method for wormsid synonyms(id, ...)  # S3 method for iucn synonyms(id, ...)  # S3 method for pow synonyms(id, ...)  # S3 method for ids synonyms(id, ...)  synonyms_df(x)"},{"path":"https://docs.ropensci.org/taxize/reference/synonyms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve synonyms from various sources given input taxonomic\nnames or identifiers — synonyms","text":"... passed arguments internal functions get_*() functions gather synonyms. sci_id Vector taxa names (character) IDs (character numeric) db character; database query. either itis, tropicos, nbn, worms, pow. Note taxonomic data source identifiers, provide wrong db value identifier get result, likely wrong (expecting). using tropicos,  recommend getting API key; see taxize-authentication rows (numeric) number 1 infinity. default NA, rows considered. Note parameter ignored pass taxonomic id acceptable classes: tsn, tpsid, nbnid, ids. x synonyms(): deprecated, see sci_id. synonyms_df(), output synonyms() id character; identifiers, returned get_tsn(), get_tpsid(), get_nbnid(), get_wormsid(), get_pow()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/synonyms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve synonyms from various sources given input taxonomic\nnames or identifiers — synonyms","text":"named list results three types output slot: name found: NA_character_ name found synonyms found, empty data.frame (0 rows) name found, synonyms found, data.frames synonyms - column names vary data source","code":""},{"path":"https://docs.ropensci.org/taxize/reference/synonyms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve synonyms from various sources given input taxonomic\nnames or identifiers — synonyms","text":"IDs supplied directly (get_*() functions) must specify type ID. db = \"itis\" can pass parameter accepted toggle whether accepted names used accepted = TRUE, used accepted = FALSE. default accepted = FALSE Note IUCN requires API key. See rredlist::rredlist-package help authentiating IUCN Redlist","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/synonyms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve synonyms from various sources given input taxonomic\nnames or identifiers — synonyms","text":"","code":"if (FALSE) { # Plug in taxon IDs synonyms(183327, db=\"itis\") synonyms(\"25509881\", db=\"tropicos\") synonyms(\"NBNSYS0000004629\", db='nbn') synonyms(105706, db='worms') synonyms(12392, db='iucn') synonyms('urn:lsid:ipni.org:names:358881-1', db='pow')  # Plug in taxon names directly synonyms(\"Pinus contorta\", db=\"itis\") synonyms(\"Puma concolor\", db=\"itis\") synonyms(c(\"Poa annua\",'Pinus contorta','Puma concolor'), db=\"itis\") synonyms(\"Poa annua\", db=\"tropicos\") synonyms(\"Pinus contorta\", db=\"tropicos\") synonyms(c(\"Poa annua\",'Pinus contorta'), db=\"tropicos\") synonyms(\"Pinus sylvestris\", db='nbn') synonyms('Pomatomus', db='worms') synonyms('Pomatomus saltatrix', db='worms') synonyms('Lithocarpus mindanaensis', db='pow') synonyms('Poa annua', db='pow') synonyms(c('Poa annua', 'Pinus contorta', 'foo bar'), db='pow')  # not accepted names, with ITIS ## looks for whether the name given is an accepted name, ## and if not, uses the accepted name to look for synonyms synonyms(\"Acer drummondii\", db=\"itis\") synonyms(\"Spinus pinus\", db=\"itis\")  # Use get_* methods synonyms(get_tsn(\"Poa annua\")) synonyms(get_tpsid(\"Poa annua\")) synonyms(get_nbnid(\"Carcharodon carcharias\")) synonyms(get_iucn('Loxodonta africana')) synonyms(get_pow('Lithocarpus mindanaensis'))  # Pass many ids from class \"ids\" out <- get_ids(names=\"Poa annua\", db = c('itis','tropicos')) synonyms(out)  # Use the rows parameter to select certain rows synonyms(\"Poa annua\", db='tropicos', rows=1) synonyms(\"Poa annua\", db='tropicos', rows=1:3) synonyms(\"Pinus sylvestris\", db='nbn', rows=1:3)  # Use curl options synonyms(\"Poa annua\", db='tropicos', rows=1, verbose = TRUE) synonyms(\"Poa annua\", db='itis', rows=1, verbose = TRUE)   # combine many outputs together x <- synonyms(c(\"Osmia bicornis\", \"Osmia rufa\", \"Osmia\"), db = \"itis\") synonyms_df(x)  ## note here how Pinus contorta is dropped due to no synonyms found synonyms_df(x)  ## note here that ids are taxon identifiers b/c you start with them x <- synonyms(c(25509881, 13100094), db=\"tropicos\") synonyms_df(x)  ## NBN x <- synonyms(c('Aglais io', 'Usnea hirta', 'Arctostaphylos uva-ursi'),   db=\"nbn\") synonyms_df(x) }"},{"path":"https://docs.ropensci.org/taxize/reference/tax_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate species data to given taxonomic rank — tax_agg","title":"Aggregate species data to given taxonomic rank — tax_agg","text":"Aggregate species data given taxonomic rank","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate species data to given taxonomic rank — tax_agg","text":"","code":"tax_agg(x, rank, db = \"ncbi\", messages = FALSE, ...)  # S3 method for tax_agg print(x, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/tax_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate species data to given taxonomic rank — tax_agg","text":"x Community data matrix. Taxa columns, samples rows. rank character; Taxonomic rank aggregate . db character; taxonomic API use, 'ncbi, 'itis' , see tax_name(). Note taxonomic data source identifiers, provide wrong db value identifier get result, likely wrong (expecting). using ncbi recommend getting API key; see taxize-authentication messages (logical) FALSE (Default) suppress messages ... arguments passed get_tsn() get_uid()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate species data to given taxonomic rank — tax_agg","text":"list class tax_agg following items: x Community data matrix aggregated data. lookup-table showing taxa aggregated. n_pre Number taxa aggregation. rank Rank taxa aggregated.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_agg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate species data to given taxonomic rank — tax_agg","text":"tax_agg aggregates (sum) taxa specific taxonomic level. taxon found database (ITIS NCBI) supplied taxon higher taxonomic level taxon aggregated.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/tax_agg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate species data to given taxonomic rank — tax_agg","text":"","code":"if (FALSE) { if (requireNamespace(\"vegan\", quietly = TRUE)) {   # use dune dataset   data(dune, package='vegan')   species <- c(\"Achillea millefolium\", \"Agrostis stolonifera\",     \"Aira praecox\", \"Alopecurus geniculatus\", \"Anthoxanthum odoratum\",     \"Bellis perennis\", \"Bromus hordeaceus\", \"Chenopodium album\",     \"Cirsium arvense\", \"Comarum palustre\", \"Eleocharis palustris\",     \"Elymus repens\", \"Empetrum nigrum\", \"Hypochaeris radicata\",     \"Juncus articulatus\", \"Juncus bufonius\", \"Lolium perenne\",     \"Plantago lanceolata\", \"Poa pratensis\", \"Poa trivialis\",     \"Ranunculus flammula\", \"Rumex acetosa\", \"Sagina procumbens\",     \"Salix repens\", \"Scorzoneroides autumnalis\", \"Trifolium pratense\",     \"Trifolium repens\", \"Vicia lathyroides\", \"Brachythecium rutabulum\",     \"Calliergonella cuspidata\")   colnames(dune) <- species    # aggregate sample to families   (agg <- tax_agg(dune, rank = 'family', db = 'ncbi'))    # extract aggregated community data matrix for further usage   agg$x   # check which taxa have been aggregated   agg$by }  # A use case where there are different taxonomic levels in the same dataset spnames <- c('Puma','Ursus americanus','Ursidae') df <- data.frame(c(1,2,3), c(11,12,13), c(1,4,50)) names(df) <- spnames out <- tax_agg(x=df, rank = 'family', db='itis') out$x  # You can input a matrix too mat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3,  dimnames=list(NULL, c('Puma concolor','Ursus americanus','Ailuropoda melanoleuca'))) tax_agg(mat, rank = 'family', db='itis') }"},{"path":"https://docs.ropensci.org/taxize/reference/tax_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic names for a given rank — tax_name","title":"Get taxonomic names for a given rank — tax_name","text":"Get taxonomic names given rank","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic names for a given rank — tax_name","text":"","code":"tax_name(   sci,   get,   db = \"itis\",   pref = \"ncbi\",   messages = TRUE,   query = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/tax_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic names for a given rank — tax_name","text":"sci (character) Vector taxonomic names query. required. get (character) ranks taxonomic name get, see rank_ref. required. db (character) database search : 'itis', 'ncbi' ''. '' NCBI ITIS queried. Result union . using ncbi, recommend getting API key; see taxize-authentication pref (character) db = '', sets preference union. Either 'ncbi' (default) 'itis'. Currently implemented. messages (logical) TRUE actual taxon queried printed console. query Deprecated, see sci ... arguments passed get_tsn() get_uid().","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic names for a given rank — tax_name","text":"data.frame one column every queried rank, addition column db queried term.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_name.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get taxonomic names for a given rank — tax_name","text":"tax_rank() returns actual rank taxon, tax_name() searches returns specified rank higher taxonomy.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_name.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Get taxonomic names for a given rank — tax_name","text":"See taxize-authentication help authentication","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/tax_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic names for a given rank — tax_name","text":"","code":"if (FALSE) { # A case where itis and ncbi use the same names tax_name(sci = \"Helianthus annuus\", get = \"family\", db = \"itis\") tax_name(sci = \"Helianthus annuus\", get = \"family\", db = \"ncbi\") tax_name(sci = \"Helianthus annuus\", get = c(\"genus\",\"family\",\"order\"),   db = \"ncbi\")  # Case where itis and ncbi use different names tax_name(sci = \"Helianthus annuus\", get = \"kingdom\", db = \"itis\") tax_name(sci = \"Helianthus annuus\", get = \"kingdom\", db = \"ncbi\")  # multiple rank arguments tax_name(sci = c(\"Helianthus annuus\",\"Baetis rhodani\"), get = c(\"genus\", \"kingdom\"), db = \"ncbi\") tax_name(sci = c(\"Helianthus annuus\",\"Baetis rhodani\"), get = c(\"genus\", \"kingdom\"), db = \"itis\")  # query both sources tax_name(sci=c(\"Helianthus annuus\", 'Baetis rhodani'), get=c(\"genus\", \"kingdom\"), db=\"both\") }"},{"path":"https://docs.ropensci.org/taxize/reference/tax_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rank for a given taxonomic name. — tax_rank","title":"Get rank for a given taxonomic name. — tax_rank","text":"Get rank given taxonomic name.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rank for a given taxonomic name. — tax_rank","text":"","code":"tax_rank(sci_id, db = NULL, rows = NA, x = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/tax_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rank for a given taxonomic name. — tax_rank","text":"sci_id (character) Vector one taxon names (character) IDs (character numeric) query. objects returned get_*() functions like get_tsn() db (character) database query. either ncbi, itis, eol, tropicos, gbif,nbn, worms, natserv, bold. Note taxonomic data source identifiers, provide wrong db value identifier may get result, likely wrong (expecting). using ncbi recommend getting API key; see taxize-authentication rows numeric; number 1 infinity. default NA, rows considered. passed get_*() functions. x Deprecated, see sci_id ... Additional arguments classification()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rank for a given taxonomic name. — tax_rank","text":"named list character vectors ranks (lower-cased)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tax_rank.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get rank for a given taxonomic name. — tax_rank","text":"tax_name() returns name specified rank, tax_rank() returns actual rank taxon.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/tax_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rank for a given taxonomic name. — tax_rank","text":"","code":"if (FALSE) { tax_rank(\"Helianthus annuus\", db = \"itis\") tax_rank(\"Helianthus annuus\", db = \"natserv\") tax_rank(get_tsn(\"Helianthus annuus\")) tax_rank(c(\"Helianthus\", \"Pinus\", \"Poa\"), db = \"itis\")  tax_rank(get_boldid(\"Helianthus annuus\")) tax_rank(\"421377\", db = \"bold\") tax_rank(421377, db = \"bold\")  tax_rank(c(\"Plantae\", \"Helianthus annuus\",   \"Puma\", \"Homo sapiens\"), db = 'itis') tax_rank(c(\"Helianthus annuus\", \"Quercus\", \"Fabaceae\"), db = 'tropicos')  tax_rank(names_list(\"species\"), db = 'gbif') tax_rank(names_list(\"family\"), db = 'gbif')  tax_rank(c(\"Gadus morhua\", \"Lichenopora neapolitana\"),   db = \"worms\") }"},{"path":"https://docs.ropensci.org/taxize/reference/taxize-authentication.html","id":null,"dir":"Reference","previous_headings":"","what":"taxize authentication — taxize-authentication","title":"taxize authentication — taxize-authentication","text":"Help authentication","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-authentication.html","id":"what-is-an-api-","dir":"Reference","previous_headings":"","what":"What is an API?","title":"taxize authentication — taxize-authentication","text":"API Application Programming Interface. term \"API\" can used lots scenarios, case talking web APIs, APIs (interfaces) web resources. taxize interacts remote databases web via APIs. need worry details works; just know require authentication .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-authentication.html","id":"what-are-api-keys-","dir":"Reference","previous_headings":"","what":"What are API keys?","title":"taxize authentication — taxize-authentication","text":"APIs require authentication, way typically done API keys: alphanumeric strings variable lengths supplied request API. taxize get keys ; rather, go get key service, provide information get keys. See key_helpers() help obtain keys package.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-authentication.html","id":"using-api-keys","dir":"Reference","previous_headings":"","what":"Using API keys","title":"taxize authentication — taxize-authentication","text":"can store API keys R options .Rprofile file, environment variables either .Renviron file .bash_profile file, o.zshrc file (use oh--zsh) similar. See Startup help R options environment variables. Save API keys following names: Tropicos: R option env var 'TROPICOS_KEY' IUCN: R option env var 'IUCN_REDLIST_KEY' ENTREZ: R option env var 'ENTREZ_KEY' save .Renviron looks like: ENTREZ_KEY=somekey save .bash_profile, .zshrc, similar file looks like: export ENTREZ_KEY=somekey save .Rprofile looks like: options(ENTREZ_KEY = \"somekey\") Remember restart R session (start new shell window/tab using shell) take advantage new R options environment variables. strongly recommend using environment variables (https://en.wikipedia.org/wiki/Environment_variable) R options environment variables widely used across programming languages, operating systems, computing environments; whereas R options specific R. Note NCBI Entrez require use API key, get higher rate limit key (requests per time period), 3 10 requests per second, get one.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/taxize-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions in taxize — taxize-defunct","title":"Defunct functions in taxize — taxize-defunct","text":"following functions now defunct (longer available): COL functions defunct: .colid, col_children, col_classification, col_downstream, col_search, get_colid, get_colid_, .data.frame.colid, children.colid, classification.colid, downstream.colid, id2name.colid, lowest_common.colid, synonyms.colid, upstream.colid` col_classification(): Seeclassification() tp_classification(): Seeclassification() eol_hierarchy(): Seeclassification() eol_invasive(): See eol originr package. use_eol(): EOL longer requires API key tpl_search(): Use Taxonstand functions TPL TPLck directly. get_seqs(): function changed name toncbi_getbyname()()]. get_genes(): function changed name toncbi_getbyid()()]. get_genes_avail(): function changed name toncbi_search()()]. ncbi_getbyname(): See ncbi_byname traits package. ncbi_getbyid(): See ncbi_byid traits package. ncbi_search(): See ncbi_searcher traits package. gisd_isinvasive(): See gisd originr package. ubio_classification():  uBio web services quite , now (2016-05-09) back , trust stay available. ubio_classification_search(): uBio web services quite , now (2016-05-09) back , trust stay available. ubio_id(): uBio web services quite , now (2016-05-09) back , trust stay available. ubio_ping():  uBio web services quite , now (2016-05-09) back , trust stay available. ubio_search():  uBio web services quite , now (2016-05-09) back , trust stay available. ubio_synonyms():  uBio web services quite , now (2016-05-09) back , trust stay available. get_ubioid(): uBio web services apparently indefinitely. phylomatic_tree(): function defunct. See phylomatic package brranching phylomatic_format(): function defunct. See phylomatic_names package brranching iucn_summary_id(): function defunct. Use iucn_summary() eubon(): function defunct. Use eubon_search() tnrs(): function defunct. unreliable tnrs_sources(): function defunct. unreliable","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomic Information from Around the Web — taxize-package","title":"Taxonomic Information from Around the Web — taxize-package","text":"package interacts suite web 'APIs' taxonomic tasks, verifying species names, getting taxonomic hierarchies, verifying name spelling.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-package.html","id":"about","dir":"Reference","previous_headings":"","what":"About","title":"Taxonomic Information from Around the Web — taxize-package","text":"Allows users search many websites species names (scientific common) download - downstream taxonomic hierarchical information - many things. functions package hit specific API prefix suffix separated underscore. follow format service_whatitdoes. example, gnr_resolve uses Global Names Resolver API resolve species names. General functions package hit specific API two words separated underscore, e.g., classification need API keys data sources. See taxize-authentication information.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-package.html","id":"currently-supported-apis","dir":"Reference","previous_headings":"","what":"Currently supported APIs","title":"Taxonomic Information from Around the Web — taxize-package","text":"source TRUE SOAP? column, available package. available different package called taxizesoap. See GitHub repo install https://github.com/ropensci/taxizesoap","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-package.html","id":"catalogue-of-life-col-","dir":"Reference","previous_headings":"","what":"Catalogue of Life (COL)","title":"Taxonomic Information from Around the Web — taxize-package","text":"COL introduced rate limiting recently 2019 - made API essentially unusable - CoL+ coming soon incorporate stable. See https://github.com/ropensci/colpluz R implementation CoL+","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Taxonomic Information from Around the Web — taxize-package","text":"Scott Chamberlain Eduard Szoecs eduardszoecs@gmail.com Zachary Foster zacharyfoster1989@gmail.com Carl Boettiger cboettig@gmail.com Karthik Ram karthik@ropensci.org Ignasi Bartomeus nacho.bartomeus@gmail.com John Baumgartner johnbb@student.unimelb.edu.au James O'Donnell jodonnellbio@gmail.com","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-params.html","id":null,"dir":"Reference","previous_headings":"","what":"taxize parameters — taxize-params","title":"taxize parameters — taxize-params","text":"Information standardized parameters across package","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize-params.html","id":"standardized-parameters","dir":"Reference","previous_headings":"","what":"Standardized parameters","title":"taxize parameters — taxize-params","text":"sci: scientific name com: common name id: name identifier sci_com: scientific name common name sci_id: scientific name name identifier going standardize parameter names cases parameter accepts either three options: scientific name, common name, name identifier. However, clear parameter name use case, left parameter names two cases (get_ids() vascan_search())","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_capwords.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize the first letter of a character string. — taxize_capwords","title":"Capitalize the first letter of a character string. — taxize_capwords","text":"Capitalize first letter character string.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_capwords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize the first letter of a character string. — taxize_capwords","text":"","code":"taxize_capwords(s, strict = FALSE, onlyfirst = FALSE)"},{"path":"https://docs.ropensci.org/taxize/reference/taxize_capwords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize the first letter of a character string. — taxize_capwords","text":"s character string strict algorithm strict capitalizing. Defaults FALSE. onlyfirst Capitalize first word, lowercase others. Useful taxonomic names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_capwords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capitalize the first letter of a character string. — taxize_capwords","text":"","code":"taxize_capwords(c(\"using AIC for model selection\")) #> [1] \"Using AIC For Model Selection\" taxize_capwords(c(\"using AIC for model selection\"), strict=TRUE) #> [1] \"Using aic for model selection\""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_cite.html","id":null,"dir":"Reference","previous_headings":"","what":"Get citations and licenses for data sources used in taxize — taxize_cite","title":"Get citations and licenses for data sources used in taxize — taxize_cite","text":"Get citations licenses data sources used taxize","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_cite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get citations and licenses for data sources used in taxize — taxize_cite","text":"","code":"taxize_cite(fxn = \"itis\", what = \"citation\")"},{"path":"https://docs.ropensci.org/taxize/reference/taxize_cite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get citations and licenses for data sources used in taxize — taxize_cite","text":"fxn Function search . special case package name 'taxize' give citations package. One citation (default), license, .","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_cite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get citations and licenses for data sources used in taxize — taxize_cite","text":"","code":"taxize_cite(fxn='eol_search') #> Source: eol  #>   Home page: http://eol.org/  #>   API help: http://eol.org/api/  #>   #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='itis_hierarchy') #> Source: itis  #>   Home page: https://www.itis.gov/  #>   API help: https://www.itis.gov/ws_description.html  #>   Citation: Retrieved [month, day, year], from the Integrated Taxonomic Information System on-line database, https://www.itis.gov.  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='tp_classification') #> Source: tropicos  #>   Home page: http://tropicos.org/  #>   API help: http://services.tropicos.org/  #>   #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='gbif_ping') #> Source: gbif  #>   Home page: http://www.gbif.org  #>   API help: http://www.gbif.org/developer/summary  #>   Citation: GBIF (2013). GBIF (Ed.), Global Biodiversity Information Facility Data Portal (2013)  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='plantminer') #> Source: plantminer  #>   Home page: http://www.plantminer.com/  #>   API help: http://www.plantminer.com/help  #>   Citation: See The Plant List or Tropicos citations  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='get_natservid_') #> Source: natserv  #>   Home page: http://www.natureserve.org/  #>   API help: https://services.natureserve.org/index.jsp  #>   Citation: Citation: Natureserve. 2017. NatureServe Web Service. Arlington, VA. U.S.A. Available http://services.natureserve.org. (Accessed: <date>)  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='as.natservid') #> Source: natserv  #>   Home page: http://www.natureserve.org/  #>   API help: https://services.natureserve.org/index.jsp  #>   Citation: Citation: Natureserve. 2017. NatureServe Web Service. Arlington, VA. U.S.A. Available http://services.natureserve.org. (Accessed: <date>)  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='get_wormsid') #> Source: worms  #>   Home page: http://www.marinespecies.org/  #>   API help: http://www.marinespecies.org/rest/  #>   Citation: We ask you to cite the individual global or regional species lists, or species pages as appropriate. Their citations are shown on their web pages. The database as a whole is to be cited as follows: #>  #>      WoRMS Editorial Board (2017). World Register of Marine Species. Available from http://www.marinespecies.org at VLIZ. Accessed <date>. doi:10.14284/170  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='as.wormsid') #> Source: worms  #>   Home page: http://www.marinespecies.org/  #>   API help: http://www.marinespecies.org/rest/  #>   Citation: We ask you to cite the individual global or regional species lists, or species pages as appropriate. Their citations are shown on their web pages. The database as a whole is to be cited as follows: #>  #>      WoRMS Editorial Board (2017). World Register of Marine Species. Available from http://www.marinespecies.org at VLIZ. Accessed <date>. doi:10.14284/170  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues  # Functions that use many data sources taxize_cite(fxn='synonyms') #> Source: itis  #>   Home page: https://www.itis.gov/  #>   API help: https://www.itis.gov/ws_description.html  #>   Citation: Retrieved [month, day, year], from the Integrated Taxonomic Information System on-line database, https://www.itis.gov.  #>  #> Source: tropicos  #>   Home page: http://tropicos.org/  #>   API help: http://services.tropicos.org/  #>   #>  #> Source: nbn  #>   Home page: http://www.nbn.org.uk/  #>   API help: https://data.nbn.org.uk/Documentation/Web_Services/  #>   #>  #> Source: worms  #>   Home page: http://www.marinespecies.org/  #>   API help: http://www.marinespecies.org/rest/  #>   Citation: We ask you to cite the individual global or regional species lists, or species pages as appropriate. Their citations are shown on their web pages. The database as a whole is to be cited as follows: #>  #>      WoRMS Editorial Board (2017). World Register of Marine Species. Available from http://www.marinespecies.org at VLIZ. Accessed <date>. doi:10.14284/170  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues taxize_cite(fxn='classification') #> Source: itis  #>   Home page: https://www.itis.gov/  #>   API help: https://www.itis.gov/ws_description.html  #>   Citation: Retrieved [month, day, year], from the Integrated Taxonomic Information System on-line database, https://www.itis.gov.  #>  #> Source: ncbi  #>   Home page: http://www.ncbi.nlm.nih.gov/taxonomy  #>   API help: http://www.ncbi.nlm.nih.gov/books/NBK25501/  #>   Citation: Federhen S: The NCBI Taxonomy database. Nucleic Acids Res 2012, 40 (Database issue): D136-D143.  #>  #> Source: gbif  #>   Home page: http://www.gbif.org  #>   API help: http://www.gbif.org/developer/summary  #>   Citation: GBIF (2013). GBIF (Ed.), Global Biodiversity Information Facility Data Portal (2013)  #>  #> Source: eol  #>   Home page: http://eol.org/  #>   API help: http://eol.org/api/  #>   #>  #> Source: troicos  #>   Home page: http://tropicos.org/  #>   API help: http://services.tropicos.org/  #>   #>  #> Source: nbn  #>   Home page: http://www.nbn.org.uk/  #>   API help: https://data.nbn.org.uk/Documentation/Web_Services/  #>   #>  #> Source: worms  #>   Home page: http://www.marinespecies.org/  #>   API help: http://www.marinespecies.org/rest/  #>   Citation: We ask you to cite the individual global or regional species lists, or species pages as appropriate. Their citations are shown on their web pages. The database as a whole is to be cited as follows: #>  #>      WoRMS Editorial Board (2017). World Register of Marine Species. Available from http://www.marinespecies.org at VLIZ. Accessed <date>. doi:10.14284/170  #>  #> Source: natserv  #>   Home page: http://www.natureserve.org/  #>   API help: https://services.natureserve.org/index.jsp  #>   Citation: Citation: Natureserve. 2017. NatureServe Web Service. Arlington, VA. U.S.A. Available http://services.natureserve.org. (Accessed: <date>)  #>  #> Can any of these citations be improved? https://github.com/ropensci/taxize/issues  # Get the taxize citation taxize_cite(fxn='taxize') #> The paper:   #> Scott Chamberlain and Eduard Szocs (2013). taxize - taxonomic search #> and retrieval in R. F1000Research, 2:191. URL: #> https://f1000research.com/articles/2-191/v2 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {taxize - taxonomic search and retrieval in R}, #>     journal = {F1000Research}, #>     author = {{Scott Chamberlain} and {Eduard Szocs}}, #>     year = {2013}, #>     url = {https://f1000research.com/articles/2-191/v2}, #>   } #>  #> The software:   #> Scott Chamberlain, Eduard Szoecs, Zachary Foster, Zebulun Arendsee, #> Carl Boettiger, Karthik Ram, Ignasi Bartomeus, John Baumgartner, James #> O'Donnell, Jari Oksanen, Bastian Greshake Tzovaras, Philippe Marchand, #> Vinh Tran, Maëlle Salmon, Gaopeng Li, and Matthias Grenié. (2020) #> taxize: Taxonomic information from around the web. R package version #> 0.9.98. https://github.com/ropensci/taxize #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {taxize: Taxonomic information from around the web}, #>     author = {Scott Chamberlain and Eduard Szoecs and Zachary Foster and Zebulun Arendsee and Carl Boettiger and Karthik Ram and Ignasi Bartomeus and John Baumgartner and James O'Donnell and Jari Oksanen and Bastian Greshake Tzovaras and Philippe Marchand and Vinh Tran and Maëlle Salmon and Gaopeng Li and Matthias Grenié}, #>     year = {2020}, #>     note = {R package version 0.9.98}, #>     url = {https://github.com/ropensci/taxize}, #>   }  # Get license information taxize_cite(fxn='taxize', \"license\") #> License: MIT  #> URL:     https://opensource.org/licenses/MIT"},{"path":"https://docs.ropensci.org/taxize/reference/taxize_ldfast.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacement function for ldply that should be faster in all cases. — taxize_ldfast","title":"Replacement function for ldply that should be faster in all cases. — taxize_ldfast","text":"Replacement function ldply faster cases.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_ldfast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacement function for ldply that should be faster in all cases. — taxize_ldfast","text":"","code":"taxize_ldfast(x, convertvec = FALSE)"},{"path":"https://docs.ropensci.org/taxize/reference/taxize_ldfast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacement function for ldply that should be faster in all cases. — taxize_ldfast","text":"x list. convertvec Convert vector data.frame rbind called.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_options.html","id":null,"dir":"Reference","previous_headings":"","what":"taxize options — taxize_options","title":"taxize options — taxize_options","text":"taxize options","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"taxize options — taxize_options","text":"","code":"taxize_options(taxon_state_messages = NULL, ncbi_sleep = NULL, quiet = FALSE)"},{"path":"https://docs.ropensci.org/taxize/reference/taxize_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"taxize options — taxize_options","text":"taxon_state_messages (logical) suppress messages? default: NULL (setting FALSE). Set TRUE suppress messages, FALSE suppress messages ncbi_sleep (numeric/integer) number seconds sleep NCBI ENTREZ http requests. applies functions: classification(), comm2sci(), genbank2uid(), get_uid() ncbi_children(). defaults: 0.334 (without API key) 0.101 (API key). minimum value can less 0.101 quiet (logical) quiet informational output function. default: TRUE","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxize_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"taxize options — taxize_options","text":"","code":"if (FALSE) { taxize_options() taxize_options(FALSE) taxize_options(TRUE) taxize_options(ncbi_sleep = 0.4) taxize_options(taxon_state_messages = TRUE, ncbi_sleep = 0.4) }"},{"path":"https://docs.ropensci.org/taxize/reference/taxon-state.html","id":null,"dir":"Reference","previous_headings":"","what":"Last taxon state object from a get_* function call — taxon-state","title":"Last taxon state object from a get_* function call — taxon-state","text":"Last taxon state object get_* function call","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon-state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Last taxon state object from a get_* function call — taxon-state","text":"","code":"taxon_last()  taxon_clear()"},{"path":"https://docs.ropensci.org/taxize/reference/taxon-state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Last taxon state object from a get_* function call — taxon-state","text":"taxon_last() returns object class taxon_state, last one used, else NULL none found. taxon_clear() clears saved state","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon-state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Last taxon state object from a get_* function call — taxon-state","text":"taxon_last(): get last taxon_state object use taxon_clear(): clear data last taxon_state object taxon_state object R6 object holds data methods used keeping track results gathered within get_* function. create taxon_state R6 objects . Behaviors aware : taxon_state object passed need worry previously run get_* function interfering another get_* function call - explicitly pass taxon_state object use taxon_state passed taxon_state object must $class matching get_* function called. example, can pass taxon_state $class gbifid get_gbifid(), . run taxon_clear() get* function running, may lose track state known package cleared See internal method progressor information control messages get* functions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon-state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Last taxon state object from a get_* function call — taxon-state","text":"","code":"if (FALSE) { spp <- names_list(\"species\", 3) res <- get_gbifid(spp) z <- taxon_last() z z$taxa_remaining() z$taxa_completed() z$count # active binding; no parens needed  # cleanup taxon_clear() }"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep track of queries in get_* functions — taxon_state","title":"Keep track of queries in get_* functions — taxon_state","text":"Keep track queries get_* functions Keep track queries get_* functions","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep track of queries in get_* functions — taxon_state","text":"object lives inside get_* function call, maintaining results accumulated.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Keep track of queries in get_* functions — taxon_state","text":"initialized (time) time job started finalized (time) time job finished class (character) class name (e.g., \"gbif\") names (character) one taxon names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Keep track of queries in get_* functions — taxon_state","text":"count (integer) count number records exit record date/time function exited","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Keep track of queries in get_* functions — taxon_state","text":"taxon_state$new() taxon_state$print() taxon_state$add() taxon_state$get() taxon_state$remove() taxon_state$purge() taxon_state$taxa_remaining() taxon_state$taxa_completed() taxon_state$clone()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Keep track of queries in get_* functions — taxon_state","text":"Create new taxon_state object","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$new(class, names)"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep track of queries in get_* functions — taxon_state","text":"class (character) class name (e.g., \"gbif\") names (character) one taxon names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Keep track of queries in get_* functions — taxon_state","text":"new taxon_state object","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Keep track of queries in get_* functions — taxon_state","text":"print method taxon_state class","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$print(x, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep track of queries in get_* functions — taxon_state","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"Keep track of queries in get_* functions — taxon_state","text":"add record result; duplicates allowed","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$add(query, result)"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep track of queries in get_* functions — taxon_state","text":"query (character), taxon name result (list) named list","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Keep track of queries in get_* functions — taxon_state","text":"nothing returned; sets ","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Keep track of queries in get_* functions — taxon_state","text":"get records matching 'query'","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$get(query = NULL)"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep track of queries in get_* functions — taxon_state","text":"query (character), taxon name","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Keep track of queries in get_* functions — taxon_state","text":"named list, slots taxon id, attributes, named taxon name","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-remove-","dir":"Reference","previous_headings":"","what":"Method remove()","title":"Keep track of queries in get_* functions — taxon_state","text":"remove's records matching 'query'","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$remove(query)"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep track of queries in get_* functions — taxon_state","text":"query (character), taxon name","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Keep track of queries in get_* functions — taxon_state","text":"nothing, removes records matching query","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-purge-","dir":"Reference","previous_headings":"","what":"Method purge()","title":"Keep track of queries in get_* functions — taxon_state","text":"removes records","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$purge()"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Keep track of queries in get_* functions — taxon_state","text":"nothing returned; sets ","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-taxa-remaining-","dir":"Reference","previous_headings":"","what":"Method taxa_remaining()","title":"Keep track of queries in get_* functions — taxon_state","text":"get remaining taxa","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$taxa_remaining()"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Keep track of queries in get_* functions — taxon_state","text":"sorted taxon names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-taxa-completed-","dir":"Reference","previous_headings":"","what":"Method taxa_completed()","title":"Keep track of queries in get_* functions — taxon_state","text":"get completed taxa","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$taxa_completed()"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Keep track of queries in get_* functions — taxon_state","text":"sorted taxon names","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Keep track of queries in get_* functions — taxon_state","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"taxon_state$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep track of queries in get_* functions — taxon_state","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/taxon_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep track of queries in get_* functions — taxon_state","text":"","code":"if (FALSE) { if (interactive()) { ts <- taxon_state$new() taxon_last() ts res <- list(   id = 123456,   att = \"found\",   multiple = FALSE,   direct = FALSE,   class = \"tsn\" ) ts$add(query = \"Quercus robur\", result = res) ts ts$get(query = \"Quercus robur\") ts$count ts$remove(query = \"Quercus robur\") ts ts$count  res2 <- list(   id = 3430834535,   att = \"found\",   multiple = FALSE,   direct = FALSE,   class = \"gbifid\" ) ts$add(query = \"Poa annua\", result = res2) res3 <- list(   id = 1223424,   att = \"found\",   multiple = FALSE,   direct = FALSE,   class = \"uid\" ) ts$add(query = \"Puma concolor\", result = res3) ts ts$count ts$get(\"Puma concolor\") ts$get()  # cleanup ts$purge() ts$count } }"},{"path":"https://docs.ropensci.org/taxize/reference/theplantlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup-table for family, genus, and species names for ThePlantList — theplantlist","title":"Lookup-table for family, genus, and species names for ThePlantList — theplantlist","text":"names http://www.theplantlist.org, version 1.1 data. data used function names_list(). randomly selected subset ~350K accepted species names Theplantlist.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/theplantlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lookup-table for family, genus, and species names for ThePlantList — theplantlist","text":"data frame 10,000 rows 3 variables: family family name genus genus name species specific epithet name","code":""},{"path":"https://docs.ropensci.org/taxize/reference/theplantlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lookup-table for family, genus, and species names for ThePlantList — theplantlist","text":"http://www.theplantlist.org","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tnrs-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Phylotastic Taxonomic Name Resolution Service. — tnrs","title":"Phylotastic Taxonomic Name Resolution Service. — tnrs","text":"Defunct - service far much reliable","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tnrs-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phylotastic Taxonomic Name Resolution Service. — tnrs","text":"","code":"tnrs(...)"},{"path":"https://docs.ropensci.org/taxize/reference/tnrs-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phylotastic Taxonomic Name Resolution Service. — tnrs","text":"... ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tnrs_sources-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"TNRS sources — tnrs_sources","title":"TNRS sources — tnrs_sources","text":"Defunct - service far much reliable","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tnrs_sources-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TNRS sources — tnrs_sources","text":"","code":"tnrs_sources(...)"},{"path":"https://docs.ropensci.org/taxize/reference/tnrs_sources-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TNRS sources — tnrs_sources","text":"... ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tol_resolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve names using Open Tree of Life (OTL) resolver — tol_resolve","title":"Resolve names using Open Tree of Life (OTL) resolver — tol_resolve","text":"Resolve names using Open Tree Life (OTL) resolver","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tol_resolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve names using Open Tree of Life (OTL) resolver — tol_resolve","text":"","code":"tol_resolve(   names = NULL,   context_name = NULL,   do_approximate_matching = TRUE,   ids = NULL,   include_suppressed = FALSE,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/tol_resolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve names using Open Tree of Life (OTL) resolver — tol_resolve","text":"names (character) taxon names queried context_name name taxonomic context searched (length-one character vector). Must match (case sensitive) one values returned rotl::tnrs_contexts(). do_approximate_matching (logical) logical indicating whether perform approximate string (.k.. “fuzzy”) matching. Using FALSE greatly improve speed. Default: TRUE ids array OTL ids use identifying names. assigned name names array. ids provided, ids names must identical length. include_suppressed (logical) Ordinarily, quasi-taxa, incertae sedis buckets non-OTUs, suppressed TNRS results. parameter true, quasi-taxa allowed possible TNRS results. Default: FALSE ... Curl options passed httr::POST within rotl::tnrs_match_names()","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tol_resolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve names using Open Tree of Life (OTL) resolver — tol_resolve","text":"data frame summarizing results query. original query output appended attribute returned object (can obtained using attr(object, \"original_response\")).","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tol_resolve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Resolve names using Open Tree of Life (OTL) resolver — tol_resolve","text":"https://github.com/OpenTreeOfLife/germinator/wiki/TNRS-API-v3#match_names","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/tol_resolve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Resolve names using Open Tree of Life (OTL) resolver — tol_resolve","text":"Francois Michonneau francois.michonneau@gmail.com Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tol_resolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve names using Open Tree of Life (OTL) resolver — tol_resolve","text":"","code":"if (FALSE) { tol_resolve(names=c(\"echinodermata\", \"xenacoelomorpha\",   \"chordata\", \"hemichordata\")) tol_resolve(c(\"Hyla\", \"Salmo\", \"Diadema\", \"Nautilus\")) tol_resolve(c(\"Hyla\", \"Salmo\", \"Diadema\", \"Nautilus\"),   context_name = \"Animals\")  turducken_spp <- c(\"Meleagris gallopavo\", \"Anas platyrhynchos\",   \"Gallus gallus\") tol_resolve(turducken_spp, context_name=\"Animals\") }"},{"path":"https://docs.ropensci.org/taxize/reference/tp_acceptednames-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all accepted names for a taxon name with a given id. — tp_acceptednames","title":"Return all accepted names for a taxon name with a given id. — tp_acceptednames","text":"Function name changed tp_accnames.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_acceptednames-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all accepted names for a taxon name with a given id. — tp_acceptednames","text":"","code":"tp_acceptednames(...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_acceptednames-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all accepted names for a taxon name with a given id. — tp_acceptednames","text":"... ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_accnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all accepted names for a taxon name with a given id. — tp_accnames","title":"Return all accepted names for a taxon name with a given id. — tp_accnames","text":"Return accepted names taxon name given id.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_accnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all accepted names for a taxon name with a given id. — tp_accnames","text":"","code":"tp_accnames(id, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_accnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all accepted names for a taxon name with a given id. — tp_accnames","text":"id taxon identifier code key Tropicos API key; See taxize-authentication help authentication ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_accnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all accepted names for a taxon name with a given id. — tp_accnames","text":"List dataframe.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_accnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return all accepted names for a taxon name with a given id. — tp_accnames","text":"","code":"if (FALSE) { tp_accnames(id = 25503923) tp_accnames(id = 25538750)  # No accepted names found tp_accnames(id = 25509881) }"},{"path":"https://docs.ropensci.org/taxize/reference/tp_classification-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all synonyms for a taxon name with a given id. — tp_classification","title":"Return all synonyms for a taxon name with a given id. — tp_classification","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_classification-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all synonyms for a taxon name with a given id. — tp_classification","text":"","code":"tp_classification(...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all distribution records for for a taxon name with a given id. — tp_dist","title":"Return all distribution records for for a taxon name with a given id. — tp_dist","text":"Return distribution records taxon name given id.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all distribution records for for a taxon name with a given id. — tp_dist","text":"","code":"tp_dist(id, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all distribution records for for a taxon name with a given id. — tp_dist","text":"id taxon identifier code key Tropicos API key; See taxize-authentication help authentication ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all distribution records for for a taxon name with a given id. — tp_dist","text":"List two data.frame's, one named \"location\", one \"reference\".","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Return all distribution records for for a taxon name with a given id. — tp_dist","text":"http://services.tropicos.org/help?method=GetNameDistributionsXml","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return all distribution records for for a taxon name with a given id. — tp_dist","text":"","code":"if (FALSE) { # Query using a taxon name Id out <- tp_dist(id = 25509881) ## just location data head(out[['location']]) ## just reference data head(out[['reference']]) }"},{"path":"https://docs.ropensci.org/taxize/reference/tp_namedistributions-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all distribution records for for a taxon name with a given id. — tp_namedistributions","title":"Return all distribution records for for a taxon name with a given id. — tp_namedistributions","text":"Function name changed tp_dist.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_namedistributions-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all distribution records for for a taxon name with a given id. — tp_namedistributions","text":"","code":"tp_namedistributions(...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_namedistributions-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all distribution records for for a taxon name with a given id. — tp_namedistributions","text":"... ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_namereferences-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all reference records for for a taxon name with a given id. — tp_namereferences","title":"Return all reference records for for a taxon name with a given id. — tp_namereferences","text":"Function name changed tp_refs.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_namereferences-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all reference records for for a taxon name with a given id. — tp_namereferences","text":"","code":"tp_namereferences(...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_namereferences-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all reference records for for a taxon name with a given id. — tp_namereferences","text":"... ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_refs.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all reference records for for a taxon name with a given id. — tp_refs","title":"Return all reference records for for a taxon name with a given id. — tp_refs","text":"Return reference records taxon name given id.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_refs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all reference records for for a taxon name with a given id. — tp_refs","text":"","code":"tp_refs(id, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_refs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all reference records for for a taxon name with a given id. — tp_refs","text":"id taxon identifier code key Tropicos API key; See taxize-authentication help authentication ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_refs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all reference records for for a taxon name with a given id. — tp_refs","text":"List dataframe.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_refs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return all reference records for for a taxon name with a given id. — tp_refs","text":"","code":"if (FALSE) { tp_refs(id = 25509881) }"},{"path":"https://docs.ropensci.org/taxize/reference/tp_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Tropicos by scientific name, common name, or Tropicos ID. — tp_search","title":"Search Tropicos by scientific name, common name, or Tropicos ID. — tp_search","text":"Search Tropicos scientific name, common name, Tropicos ID.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Tropicos by scientific name, common name, or Tropicos ID. — tp_search","text":"","code":"tp_search(   sci = NULL,   com = NULL,   nameid = NULL,   orderby = NULL,   sortorder = NULL,   pagesize = NULL,   startrow = NULL,   type = NULL,   key = NULL,   name = NULL,   commonname = NULL,   ... )"},{"path":"https://docs.ropensci.org/taxize/reference/tp_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Tropicos by scientific name, common name, or Tropicos ID. — tp_search","text":"sci scientific name, e.g., \"poa annua\". See Details. com common name, e.g., \"annual blue grass\" nameid search string. e.g., \"25509881\" orderby search string. e.g., \"1\" sortorder search string. e.g., \"ascending\" pagesize search string. e.g., \"100\" startrow search string. e.g., \"1\" type Type search, \"wildcard\" (default) add wildcard end search string. \"exact\" use search string exactly. key Tropicos API key; See taxize-authentication help authentication name Deprecated, see sci commonname Deprecated, see com ... args passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Tropicos by scientific name, common name, or Tropicos ID. — tp_search","text":"List dataframe.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search Tropicos by scientific name, common name, or Tropicos ID. — tp_search","text":"details name parameter: Tropicos fail include period (.) name string, e.g., var., replace periods request made Tropicos web service. addition, Tropicos reason want see sub-specific rank names like var/subsp, remove query.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search Tropicos by scientific name, common name, or Tropicos ID. — tp_search","text":"http://services.tropicos.org/help?method=SearchNameXml","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Tropicos by scientific name, common name, or Tropicos ID. — tp_search","text":"","code":"if (FALSE) { tp_search(sci = 'Poa annua') tp_search(sci = 'Poa annua subsp. annua') tp_search(sci = 'Poa annua var. annua') tp_search(sci = 'Poa annua var annua') tp_search(sci = 'Poa annua annua') }"},{"path":"https://docs.ropensci.org/taxize/reference/tp_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Return summary data a taxon name with a given id. — tp_summary","title":"Return summary data a taxon name with a given id. — tp_summary","text":"Return summary data taxon name given id.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return summary data a taxon name with a given id. — tp_summary","text":"","code":"tp_summary(id, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return summary data a taxon name with a given id. — tp_summary","text":"id taxon identifier code key Tropicos API key; See taxize-authentication help authentication ... Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return summary data a taxon name with a given id. — tp_summary","text":"data.frame.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return summary data a taxon name with a given id. — tp_summary","text":"","code":"if (FALSE) { tp_summary(id = 25509881) tp_summary(id = 2700851) tp_summary(id = 24900183) }"},{"path":"https://docs.ropensci.org/taxize/reference/tp_synonyms.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all synonyms for a taxon name with a given id. — tp_synonyms","title":"Return all synonyms for a taxon name with a given id. — tp_synonyms","text":"Return synonyms taxon name given id.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_synonyms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all synonyms for a taxon name with a given id. — tp_synonyms","text":"","code":"tp_synonyms(id, key = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/tp_synonyms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all synonyms for a taxon name with a given id. — tp_synonyms","text":"id taxon identifier code key Tropicos API key; See taxize-authentication help authentication ... Curl options passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_synonyms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all synonyms for a taxon name with a given id. — tp_synonyms","text":"List dataframe.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tp_synonyms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return all synonyms for a taxon name with a given id. — tp_synonyms","text":"","code":"if (FALSE) { tp_synonyms(id = 25509881) }"},{"path":"https://docs.ropensci.org/taxize/reference/tpl_families.html","id":null,"dir":"Reference","previous_headings":"","what":"Get The Plant List families. — tpl_families","title":"Get The Plant List families. — tpl_families","text":"Get Plant List families.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_families.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get The Plant List families. — tpl_families","text":"","code":"tpl_families(...)"},{"path":"https://docs.ropensci.org/taxize/reference/tpl_families.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get The Plant List families. — tpl_families","text":"... (list) Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_families.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get The Plant List families. — tpl_families","text":"Returns data.frame including names families indexed Plant List, major groups fall (.e. Angiosperms, Gymnosperms, Bryophytes Pteridophytes).","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_families.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get The Plant List families. — tpl_families","text":"Requires internet connection order connect <www.theplantlist.org>.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/tpl_families.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get The Plant List families. — tpl_families","text":"John Baumgartner (johnbb@student.unimelb.edu.au)","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_families.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get The Plant List families. — tpl_families","text":"","code":"if (FALSE) { # Get a data.frame of plant families, with the group name  # (Angiosperms, etc.) head(tpl_families()) }"},{"path":"https://docs.ropensci.org/taxize/reference/tpl_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get The Plant List csv files. — tpl_get","title":"Get The Plant List csv files. — tpl_get","text":"Get Plant List csv files.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get The Plant List csv files. — tpl_get","text":"","code":"tpl_get(x, family = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/tpl_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get The Plant List csv files. — tpl_get","text":"x Directory write csv files . family want just one, >1 family, , list vector. ... (list) Curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get The Plant List csv files. — tpl_get","text":"Returns nothing console, except message progress bar. Writes csv files x.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get The Plant List csv files. — tpl_get","text":"Throws warning already directory one provided, still works. Writes home directory, change x needed.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_get.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get The Plant List csv files. — tpl_get","text":"Plant List http://www.theplantlist.org","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/reference/tpl_get.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get The Plant List csv files. — tpl_get","text":"John Baumgartner johnbb@student.unimelb.edu.au","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get The Plant List csv files. — tpl_get","text":"","code":"if (FALSE) { # Get a few families dir <- file.path(tempdir(), \"abc\") tpl_get(dir, family = c(\"Platanaceae\",\"Winteraceae\")) readLines(file.path(dir, \"Platanaceae.csv\"), n = 5)  # You can now get Gymnosperms as well dir1 <- file.path(tempdir(), \"def\") tpl_get(dir1, family = c(\"Pinaceae\",\"Taxaceae\"))  # You can get mosses too! dir2 <- file.path(tempdir(), \"ghi\") tpl_get(dir2, family = \"Echinodiaceae\")  # Get all families ## Beware, will take a while ## dir3 <- file.path(tempdir(), \"jkl\") ## tpl_get(\"dir3) }"},{"path":"https://docs.ropensci.org/taxize/reference/tpl_search-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"A light wrapper around the taxonstand fxn to call Theplantlist.org database. — tpl_search","title":"A light wrapper around the taxonstand fxn to call Theplantlist.org database. — tpl_search","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/tpl_search-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A light wrapper around the taxonstand fxn to call Theplantlist.org database. — tpl_search","text":"","code":"tpl_search()"},{"path":"https://docs.ropensci.org/taxize/reference/ubio_classification-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"uBio classification — ubio_classification","title":"uBio classification — ubio_classification","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_classification-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uBio classification — ubio_classification","text":"","code":"ubio_classification(...)"},{"path":"https://docs.ropensci.org/taxize/reference/ubio_classification-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"uBio classification — ubio_classification","text":"... Parameters, ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_classification_search-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will return ClassificationBankIDs (hierarchiesIDs) that refer to the\ngiven NamebankID — ubio_classification_search","title":"This function will return ClassificationBankIDs (hierarchiesIDs) that refer to the\ngiven NamebankID — ubio_classification_search","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_classification_search-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will return ClassificationBankIDs (hierarchiesIDs) that refer to the\ngiven NamebankID — ubio_classification_search","text":"","code":"ubio_classification_search(...)"},{"path":"https://docs.ropensci.org/taxize/reference/ubio_classification_search-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will return ClassificationBankIDs (hierarchiesIDs) that refer to the\ngiven NamebankID — ubio_classification_search","text":"... Parameters, ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_id-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Search uBio by namebank ID. — ubio_id","title":"Search uBio by namebank ID. — ubio_id","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_id-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search uBio by namebank ID. — ubio_id","text":"","code":"ubio_id(...)"},{"path":"https://docs.ropensci.org/taxize/reference/ubio_id-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search uBio by namebank ID. — ubio_id","text":"... Parameters, ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_ping-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"uBio ping — ubio_ping","title":"uBio ping — ubio_ping","text":"uBio ping","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_ping-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uBio ping — ubio_ping","text":"","code":"ubio_ping()"},{"path":"https://docs.ropensci.org/taxize/reference/ubio_search-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will return NameBankIDs that match given search terms — ubio_search","title":"This function will return NameBankIDs that match given search terms — ubio_search","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_search-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will return NameBankIDs that match given search terms — ubio_search","text":"","code":"ubio_search(...)"},{"path":"https://docs.ropensci.org/taxize/reference/ubio_search-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will return NameBankIDs that match given search terms — ubio_search","text":"... Parameters, ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_synonyms-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Search uBio for taxonomic synonyms by hierarchiesID. — ubio_synonyms","title":"Search uBio for taxonomic synonyms by hierarchiesID. — ubio_synonyms","text":"FUNCTION DEFUNCT.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/ubio_synonyms-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search uBio for taxonomic synonyms by hierarchiesID. — ubio_synonyms","text":"","code":"ubio_synonyms(...)"},{"path":"https://docs.ropensci.org/taxize/reference/ubio_synonyms-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search uBio for taxonomic synonyms by hierarchiesID. — ubio_synonyms","text":"... Parameters, ignored","code":""},{"path":"https://docs.ropensci.org/taxize/reference/upstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the upstream taxa for a given taxon name or ID. — upstream","title":"Retrieve the upstream taxa for a given taxon name or ID. — upstream","text":"function uses loop continually collect taxa taxonomic rank specify upto parameter. can get data ITIS (itis) currently. method exposed itis getting taxa specific taxonomic rank, inside function.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/upstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the upstream taxa for a given taxon name or ID. — upstream","text":"","code":"upstream(...)  # S3 method for default upstream(sci_id, db = NULL, upto = NULL, rows = NA, x = NULL, ...)  # S3 method for tsn upstream(sci_id, db = NULL, upto = NULL, ...)  # S3 method for ids upstream(sci_id, db = NULL, upto = NULL, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/upstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the upstream taxa for a given taxon name or ID. — upstream","text":"... args passed itis_downstream() sci_id Vector taxa names (character) IDs (character numeric) query. db character; database query. One itis. Note taxonomic data source identifiers, provide wrong db value identifier get result, likely wrong (expecting). upto taxonomic rank go . One : 'superkingdom', 'kingdom', 'subkingdom','infrakingdom','phylum','division','subphylum', 'subdivision','infradivision', 'superclass','class','subclass','infraclass', 'superorder','order','suborder','infraorder','superfamily','family', 'subfamily','tribe','subtribe','genus','subgenus', 'section','subsection', 'species','subspecies','variety','form','subvariety','race', 'stirp', 'morph','aberration','subform', 'unspecified' rows (numeric) number 1 infinity. default NA, rows considered. Note parameter ignored pass taxonomic id acceptable classes: tsn. x Deprecated, see sci_id","code":""},{"path":"https://docs.ropensci.org/taxize/reference/upstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the upstream taxa for a given taxon name or ID. — upstream","text":"named list data.frames upstream names every supplied taxa. get NA match database.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/upstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the upstream taxa for a given taxon name or ID. — upstream","text":"","code":"if (FALSE) { upstream('Pinus contorta', db = 'itis', upto = 'genus') }"},{"path":"https://docs.ropensci.org/taxize/reference/use_eol-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"use eol — use_eol-defunct","title":"use eol — use_eol-defunct","text":"use eol","code":""},{"path":"https://docs.ropensci.org/taxize/reference/use_eol-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use eol — use_eol-defunct","text":"","code":"use_eol()"},{"path":"https://docs.ropensci.org/taxize/reference/vascan_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the CANADENSYS Vascan API. — vascan_search","title":"Search the CANADENSYS Vascan API. — vascan_search","text":"Search CANADENSYS Vascan API.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/vascan_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the CANADENSYS Vascan API. — vascan_search","text":"","code":"vascan_search(q, format = \"json\", raw = FALSE, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/vascan_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the CANADENSYS Vascan API. — vascan_search","text":"q (character) Can scientific name, vernacular name VASCAN taxon identifier (e.g. 861) format (character) One json (default) xml. raw (logical) TRUE, raw json xml returned, FALSE, parsed data returned. ... (list) args passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/taxize/reference/vascan_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the CANADENSYS Vascan API. — vascan_search","text":"json, xml list.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/vascan_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the CANADENSYS Vascan API. — vascan_search","text":"Note lowercase outputs data.frame's, list given back, touch list names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/vascan_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search the CANADENSYS Vascan API. — vascan_search","text":"API docs https://data.canadensys.net/vascan/api","code":""},{"path":"https://docs.ropensci.org/taxize/reference/vascan_search.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search the CANADENSYS Vascan API. — vascan_search","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/taxize/reference/vascan_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the CANADENSYS Vascan API. — vascan_search","text":"","code":"if (FALSE) { vascan_search(q = \"Helianthus annuus\") vascan_search(q = \"Helianthus annuus\", raw=TRUE) vascan_search(q = c(\"Helianthus annuus\", \"Crataegus dodgei\"), raw=TRUE)  # format type ## json c <- vascan_search(q = \"Helianthus annuus\", format=\"json\", raw=TRUE) library(\"jsonlite\") fromJSON(c, FALSE)  ## xml d <- vascan_search(q = \"Helianthus annuus\", format=\"xml\", raw=TRUE) library(\"xml2\") xml2::read_xml(d)  # lots of names, in this case 50 splist <- names_list(rank='species', size=50) vascan_search(q = splist)  # Curl options invisible(vascan_search(q = \"Helianthus annuus\", verbose = TRUE)) }"},{"path":"https://docs.ropensci.org/taxize/reference/worms_downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all taxa names downstream in hierarchy for WORMS — worms_downstream","title":"Retrieve all taxa names downstream in hierarchy for WORMS — worms_downstream","text":"Retrieve taxa names downstream hierarchy WORMS","code":""},{"path":"https://docs.ropensci.org/taxize/reference/worms_downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all taxa names downstream in hierarchy for WORMS — worms_downstream","text":"","code":"worms_downstream(id, downto, intermediate = FALSE, start = 1, ...)"},{"path":"https://docs.ropensci.org/taxize/reference/worms_downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all taxa names downstream in hierarchy for WORMS — worms_downstream","text":"id (integer) One AphiaID's downto (character) taxonomic level want go . See examples . taxonomic level case sensitive, spell correctly. See rank_ref_zoo spelling. intermediate (logical) TRUE, return list length two target taxon rank names, additional list data.frame's intermediate taxonomic groups. Default: FALSE start (integer) Record number start ... crul options passed worrms::wm_children(), including parameters marine_only offset, see ?worrms::wm_children details","code":""},{"path":"https://docs.ropensci.org/taxize/reference/worms_downstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all taxa names downstream in hierarchy for WORMS — worms_downstream","text":"data.frame taxonomic information downstream family e.g., Order, Class, etc., intermediated=TRUE, list length two, target taxon rank names, intermediate names.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/worms_downstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all taxa names downstream in hierarchy for WORMS — worms_downstream","text":"","code":"if (FALSE) { ## the genus Gadus worms_downstream(id = 125732, downto=\"species\") worms_downstream(id = 125732, downto=\"species\", intermediate=TRUE)  worms_downstream(id = 51, downto=\"class\") worms_downstream(id = 51, downto=\"subclass\", intermediate=TRUE)  worms_downstream(id = 105, downto=\"subclass\")  # marine_only parameter worms_downstream(545470, downto = \"species\") worms_downstream(545470, downto = \"species\", marine_only = FALSE) }"},{"path":"https://docs.ropensci.org/taxize/reference/worrms_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"WORMS ranks — worrms_ranks","title":"WORMS ranks — worrms_ranks","text":"Created using worrms::wm_ranks_id(-1) 2020-02-11.","code":""},{"path":"https://docs.ropensci.org/taxize/reference/worrms_ranks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"WORMS ranks — worrms_ranks","text":"data frame 216 rows 2 variables: id: rank id rank: rank name","code":""},{"path":"https://docs.ropensci.org/taxize/reference/worrms_ranks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"WORMS ranks — worrms_ranks","text":"Present taxize case WORMS return rank names - dataset can fill rank information long rank ids returned","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-09100","dir":"Changelog","previous_headings":"","what":"taxize 0.9.100","title":"taxize 0.9.100","text":"CRAN release: 2022-04-22 Minor release fix failing tests CRAN. Zachary Foster now maintainer taxize.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0999","dir":"Changelog","previous_headings":"","what":"taxize 0.9.99","title":"taxize 0.9.99","text":"CRAN release: 2020-10-30","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"defunct-0-9-99","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"taxize 0.9.99","text":"tnrs() tnrs_sources() functions defunct. service unreliable years now, AFAICT good. Associated changes made throughout package, eg. resolve() longer option tnrs, etc. (#841) (#842)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-99","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.99","text":"new article/vignette added issues taxonomic ranks, e.g., “NCBI weird”, rank information maintained used within taxize (#852) vignettes longer cran - find docs site linked DESCRIPTION (#855) re-instate tol_resolve() test following new version rotl package cran (#816) improve class2tree() function documentation regarding function works detail (#849) (#851) improvements WORMS, applies functions worms_downstream(), children(..., db=\"worms\") downstream(..., db=\"worms\"): now paginate automatically user get results, allow parameter marine_only passed high level functions children()/downstream() worrms::wm_children() toggles whether marine results returned (#848) thanks @oharac !","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-99","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.99","text":"fix ncbi_downstream() (cascades downstream(..., db=\"ncbi\")): unneeded line code removed also throwing error cases (#850) fixes WORMS ranks, applies functions worms_downstream(), children(..., db=\"worms\") downstream(..., db=\"worms\"): added ranks epifamily infraphylum. addition, rank missing data returned WORMS, ’ll change missing rank “rank” (#847)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0998","dir":"Changelog","previous_headings":"","what":"taxize 0.9.98","title":"taxize 0.9.98","text":"CRAN release: 2020-09-18","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-98","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.98","text":"improve worms_downstream() docs: make clear users can use parameters passed worrms::wm_children() (#831) improve get_pow_() docs: add section rate limits, rate limits KEW POW user facing resolution (#836) add 8 new rank names (via NCBI) reference rank data.frame (rank_ref) package: biotype, forma specialis, isolate, pathogroup, series, serogroup, serotype, strain - queries downstream() functions rely relative rank information fail anymore contain 8 rank names (#830)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-98","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.98","text":"new rank_ref_zoo reference data.frame specfically zoological rank types - right now used WORMS. main difference section/subsection rank_ref_zoo nested order family, whereas rank_ref (used data sources) section/subsection genus rank level (#833) NCBI introduced new rank “clade”, least using lot often - often used instead “rank”. causing problems class2tree(). Problem sorted now (#835) (#838) (#839) (#840)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0997","dir":"Changelog","previous_headings":"","what":"taxize 0.9.97","title":"taxize 0.9.97","text":"CRAN release: 2020-06-09","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-97","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.97","text":"Many functions taxize share similar types inputs (e.g., scientific names, common names), many different parameter names used refer thing. ’ve standardized parameter names make user understanding easier user uses different functions. TLDR: sci always accept scientific name; com accdepts common name; id accepts taxonomic identifier; sci_com accepts scientific common name; sci_id accepts scientific name taxonomic identifier. cases retained old parameter name can still use get warning information. future package version replaced parameters removed completely. See https://github.com/ropensci/taxize/issues/723 tables covering functions affected, old new parameter names (#723) (#829)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-97","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.97","text":"upgraded APG datasets (apg_families apg_order) v14 (July 2017) (#827)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-97","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.97","text":"fix worrms_downstream(): three rank names accounted internal set ranks (suptertribe, subterclass, parvorder) (#824) classification.gbifid returning duplicate last taxon, .e., last two rows output data.frame . fixed. (#825) fixed issue lowest_common() due problem classification.uid() taxon UID merged another taxon (#828)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0996","dir":"Changelog","previous_headings":"","what":"taxize 0.9.96","title":"taxize 0.9.96","text":"CRAN release: 2020-05-19","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-96","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.96","text":"NatureServe new API version; package natserv (https://docs.ropensci.org/natserv/) complete overhaul new API - taxize interfaces NatureServe updated. user facing change ’ve moved using just final numeric part NatureServe taxonomic identifiers ELEMENT_GLOBAL.2. part redundant every identifier (#823)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-96","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.96","text":"rankagg() tax_agg() fixes: rankagg() examples now conditional availability vegan , now real abundance data used example. tax_agg() fixes species name ordering dune data (#822) work @jarioksa","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-96","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.96","text":"fixed bug class2tree() (#818) (#820) thx @adriangeerre report & fix @trvinh fix worms_downstream(): user encountered rank name (“phylum (division)”) hadn’t dealt yet worms (#821) thx @msweetlove report","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0995","dir":"Changelog","previous_headings":"","what":"taxize 0.9.95","title":"taxize 0.9.95","text":"CRAN release: 2020-04-27","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-95","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.95","text":"gains new functions: bold_children(), bold_downstream() new S3 methods boldid: children.boldid downstream.boldid. Beware new methods built top function scrapes BOLD’s website - API doesn’t provide access taxonomic children (parents) - ’ve taken liberty trying liberate data make easy access (#817)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-95","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.95","text":"fix failing tol_resolve() test - upstream package rotl bug; told maintainer ’ll submit new version soon; affected commented now (#814)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0994","dir":"Changelog","previous_headings":"","what":"taxize 0.9.94","title":"taxize 0.9.94","text":"CRAN release: 2020-04-01","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-94","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.94","text":"synonyms() gains method Plants World Online (synonyms.pow); new associated helper function pow_synonyms() used within synonyms.pow (#812)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-94","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.94","text":"change iucn_summary() allow get_iucn() failures function still proceed - make better experience passing 1 name (#810) fixed non-ASCII string species_plantarum_binomials dataset","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-94","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.94","text":"classification() data source GBIF wasn’t working queried taxon rank species (e.g., subspecies variety); GBIF didn’t return fields ranks species, tack information bit extra code (#809) fix sorting results classification() data source GBIF; point introduced bug results sorted (#811)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0993","dir":"Changelog","previous_headings":"","what":"taxize 0.9.93","title":"taxize 0.9.93","text":"CRAN release: 2020-03-20","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"defunct-0-9-93","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"taxize 0.9.93","text":"use_eol() now defunct; EOL longer requires API key (#749) (#803) thanks @padpadpadpad","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-93","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.93","text":"http https upgrades following functions: vascan_search(), taxize_cite(), *_ping() functions, get_wormsid(), get_pow(), get_eolid(), get_gbifid(), get_boldid(), gbif_name_usage(); various places documentation (#799)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-93","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.93","text":"classification.uid() now batch HTTP requests. NCBI Entrez web service allows requests 50 identifiers; @zachary-foster work make method now use batch queries much faster (#678) (#798) class2tree() improvement taxonomy rank indexing (#805) work @trvinh fix description taxon_state_messages parameter taxize_options help file (#806) taxize package datasets now loaded package environment (#792)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-93","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.93","text":"ncbi_children() now accepts numeric character class ids (#800) fix classification.gbifid(), failing GBIF changed order results (#802) class2tree() fix: problem due ultimately bug classification.gbifid() (see line ) (#801) tax_rank() fix - db=\"ncbi\" giving correct ranks queried names - due change classification.uid (#804) fix bug get_eolid() filtering data source lead results (#808) fix ncbi_downstream (thereby fix downstream() db=\"ncbi\"): taxa query NCBI resulted children well queried name , next query give results, leading endless loop - now remove taxon queried prevent (#807)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0992","dir":"Changelog","previous_headings":"","what":"taxize 0.9.92","title":"taxize 0.9.92","text":"CRAN release: 2020-02-12","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"defunct-0-9-92","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"taxize 0.9.92","text":"COL introduced rate limiting recently 2019 - made API essentially unusable - CoL+ coming soon ’ll incorporate ’s stable. see https://github.com/ropensci/colpluz development R client (#796)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-92","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.92","text":"gains new function gn_parse() access Global Names scientific name parser. ’s super fast parser. see section name parsers (https://docs.ropensci.org/taxize/reference/index.html#section-name-parsers) 3 functions name parsing (#794) dropped packages imports: reshape2, stringr, plyr (#795) get_wormsid() gains two new parameters: fuzzy marine_only; passed worrms::wm_records_name()/worrms::wm_records_name() (#790)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-92","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.92","text":"longer running taxon state examples check (#791) vignettes names now pkg docs site (#772) update docs new roxygen2 version suppoprts R6 (#793) gains dataset worrms_ranks apply rank names cases WORMS fails return rank names data remove get_tpsid() example passes names factors; get_* functions longer accept factors","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-92","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.92","text":"fix classification.tpsid(): change internal fxn changed output; fix (#797) fix get_boldid(): filtering (e.g., w/ rank, division, parent) returned match, get_boldid failing downstream parsing; return NA now fix get_wormsid_(): missing marine_only fuzzy parameters fix pow_search(): statement leading length > 1 booleans fix synonyms(): statement internal fxn process_syn_ids leading length > 1 booleans fix classification.gbifid: select columns exist instead failing plucking non-existtent columns","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-0991","dir":"Changelog","previous_headings":"","what":"taxize 0.9.91","title":"taxize 0.9.91","text":"CRAN release: 2019-11-15","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-91","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.91","text":"get_ids() gains new parameter suppress (default:FALSE) toggle pakage cli messages stating database worked (#719)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-91","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.91","text":"following datasets now available package loaded, functions use datasets can now called package namespace like taxize::downstream(): rank_ref, theplantlist, apg_families, apg_orders (#777) (#781) add new documentation site url (https://docs.ropensci.org/taxize/) DESCRITPION file (#774) (@jeroen) fix links README issues label new potential data sources (#782) (@katrinleinweber) less functions take input output get_* functions S3 methods dispatch get_* output classes. however, can still pass db parameter, IGNORED dispatching input class. db parameter used (ignored) passing taxon id character/numeric/etc. now functions (children, classification, comm2sci, sci2comm, downstream, id2name, synonyms, upstream) warn user passes db value ignored (#780) NCBI Entrez API often throws errors users packages related HTTP version used client; now hard code http version HTTP/1.1 via curl option http_version=2L across Entrez requests (#783)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-91","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.91","text":"fixes col_search(): COL now rate limiting (make many requests within time period stop allowing requests IP address/computer); documented rate limiting, know least; changed checklist parameter behavior: years 2014 back dont provide JSON, return xml_document objects now years user can parse (#786) tax_rank somehow (bad) two .default methods. previous behavior current behavior (version) (#784) fix ncbi_children(): fixed regex supposed flag ambiguous taxa , supposed flag sp. spp., including subsp., didn’t want included (#777) (#781) another fix ncbi_children(): ID passed rather name, need set id=NULL switching equivalent taxononmic name internally avoid getting duplicate data back (#777) (#781)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-099","dir":"Changelog","previous_headings":"","what":"taxize 0.9.9","title":"taxize 0.9.9","text":"CRAN release: 2019-10-17","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-9","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.9","text":"update EUBON functions use new API version; eubon_search() gains new params limit page; eubon functions pagination (#766) change base url ipni_search() http https, via (#773)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-9","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.9","text":"change synonyms() always return NA name found, always return zero row data.frame name found synonyms found; updated docs indicate better ’s returned (#763) (#765) COL sometimes returns control characters XML payload; can’t parsed xml2 package, remove using regex; throw message ’re user knows (#768) docs typos fixes (#770) update classification() docs new EOL section discussing EOL good failure behavior, expect (#775) following datasets now available package loaded, functions use datasets can now called package namespace like taxize::downstream(): rank_ref, theplantlist, apg_families, apg_orders (#777) sci2comm() comm2sci() improvements: db=\"ncbi\" longer stop error ’s results query; instead return character(0). addition, now data source options functions now return character(0) ’s results query (#778) id2name.uid() now actually passes ... internally curl options","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.9","text":"fix get_nbnid(): returning non-taxon entities, ot add idxtype:TAXON fq query (#761) fixes .eolid() .colid() - don’t run helper function raising error HTTP 404/etc., dont want fail (#762) fix class2tree(): set root node name NA exist, ITIS set root node (#767) (#769) work @gpli fix ipni_search(): IPNI changed parameter names, fixes ; now returning tibble’s instead data.frame’s (#773) thanks @joelnitta ! fix ncbi_children(): fixed regex supposed flag ambiguous taxa , supposed flag sp. spp., including subsp., didn’t want included (#777) another fix ncbi_children(): ID passed rather name, need set id=NULL switching equivalent taxononmic name internally avoid getting duplicate data back (#777)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-098","dir":"Changelog","previous_headings":"","what":"taxize 0.9.8","title":"taxize 0.9.8","text":"CRAN release: 2019-06-28","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.8","text":"get_* functions gain new features (associated new fxns taxon_last taxon_clear): ) nicer messages printed console iterating taxa, summary end done; b) state now saved running get_* functions. , object external get_* function call keep track happened, error encountered, can easily restart left ; especially useful dealing large number inputs get_* function. utilize, pass output taxon_last() get_* function call. Associated changes new package imports: R6, crayon cli (#736) (#757) gains new function taxize_options() set options using taxize. first reason function set two options item get_* functions: taxon_state_messages allow taxon state tracking messages get_* functions , quiet=TRUE quiets output taxize_options() function ","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-8","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.8","text":"id2name() worms_downstream() use worrms::wm_record instead worrms::wm_record_ newest version worrms (#760) many get_* functions col_downstream() parameter verbose changed messages conflict verbose curl options parameter passed crul","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.8","text":"fix http request processing COL - sometimes errors, gives message response body, give appropriate error HTTP status code - need always check COL responses (#755) (#756) thanks @dougwyu fix gbif_downstream() - GBIF cases returns rank “unranked”, hadn’t accounted internal rank processing code (#758) thanks @ocstringham","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-097","dir":"Changelog","previous_headings":"","what":"taxize 0.9.7","title":"taxize 0.9.7","text":"CRAN release: 2019-05-09","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-7","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.7","text":"class2tree() gains node labels present (#644) (#748) thanks @gpli change documentation use markdown (#658) (#746) thanks @Rekyt","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-096","dir":"Changelog","previous_headings":"","what":"taxize 0.9.6","title":"taxize 0.9.6","text":"CRAN release: 2019-02-24","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.6","text":"gains new functions Kew’s Plants World: get_pow(), get_pow_(), .pow(), classification.pow(), pow_search(), pow_lookup() (#598) (#739) now pass user agent string HTTP requests various data sources know coming taxize. string look something like r-curl/3.3 crul/0.7.0 rOpenSci(taxize/0.9.6), including versions curl R pkg, crul package, taxize package (#662) change get_colid functionality: weren’t paginating user 50 results query; now paginate user using async HTTP requests; means requests take longer 50 results; good change given get results query now (#743) change across get_* functions: get_* functions tried direct match (e.g., \"Poa\" == \"Poa\") one found, done returned record. however, didn’t deploy logic across get_* functions. Now get_* functions check direct match. course direct match 1 result, still get prompt asking name want. (#631) (#734)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.6","text":"Make separate taxize-authentication manual file covering authentication information across package (#681) new case study vignette added (#544) (#721) thanks @fozy81 add note gnr_resolve() docs age datasets used Global Names Resolver, access age datasets (#737) get_eolid() fixes: gains new attribute pageid; uri’s given updated EOL’s new URL format; rank datasource parameters documented, now ; longer use short names data sources within EOL, instead use full names (#702) (#742) col_search() now returns attributes output data.frame’s number results found returned, metadata search gnr_datasources() loses todf parameter; now always returns data.frame data.frame columns, whereas default call returned limited set columns previous versions","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.6","text":"fix bug get_wormsid(), failing direct match found 1 result (#740) fix across get_* functions: linting input rows parmeter failing vector values cases (#741) fix iucn_summary(); weren’t passing API key internally correctly (#735) thanks @PrincessPi314 report","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-095","dir":"Changelog","previous_headings":"","what":"taxize 0.9.5","title":"taxize 0.9.5","text":"CRAN release: 2019-01-30","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"defunct-0-9-5","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"taxize 0.9.5","text":"iucn_summary_id() defunct, use iucn_summary() instead","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.5","text":"col_downstream() gains parameter extant_only (logical) optionally keep extant taxa (#714) thanks @ArielGreiner inquiry downstream() gains another db options: Worms. can now set db=\"worms\" use Worms get taxa downstream target taxon. addition, taxize gains new function worms_downstream(), used hood downstream(..., db=\"worms\") (#713) (#715) gains new function id2name() db options tol, itis, ncbi, worms, gbif, col, bold. function converts taxonomid IDs names. ’s sort inverse get_*() family functions. (#712) (#716) tax_rank() gains new parameter rows one can pass rows get_*() functions","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-5","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.5","text":"synonyms() warning internal cbind() call now fixed (#704) (#705) thanks @vijaybarve namespace taxize function calls thrown notifying users API keys (e.g., taxize::use_tropicos()) make clear functions live (avoid confusion usethis) (#724) (#725) thanks @maelle changed iucn_summary() output structure match found match found output passed iucn_status() behavior (#708) thanks @Rekyt skip tax_name() tests CRAN (#728) httr replaced crul throughout (#590) unit tests make HTTP requests now cached vcr, making tests much faster prone errors remote services (#729) EOL: EOL API underwent major changes, ’ve attempted get things working order. eol_dataobjects() gains new parameter language. eol_pages() loses iucn, images, videos, sounds, maps, text parameters, gains images_per_page, videos_per_page, sounds_per_page, maps_per_page, texts_per_page, texts_page. Please let us know find problems EOL functions (#717) (#718) part EOL changes, default db value comm2sci() sci2comm() now ncbi instead eol EUBON base URL now https instead http number get_*() functions changed parameter verbose messages conflict verbose passed crul::HttpClient ping functions: ncbi_ping() reworked allow use api key parameter pulled environemnt; eol_ping() using https instead http, parsing JSON instead XML.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.5","text":"get_eolid() erroring results found query due assigning internal variable (#701) (#709) thanks fix @taddallas get_tolid() erroring values NULL - now replacing NULLL NA_character_ make data.table::rbindlist() happy (#710) (#711) thanks @gpli fix add additional rows rank_ref data.frame taxonomic ranks: species subgroup, forma, varietas, clade, megacohort, supercohort, cohort, subcohort, infracohort. ’s matched rank errors can result many downstream functions. data.frame now 43 rows. (#720) (#727) fix downstream() ncbi_get_taxon_summary(): change ncbi_get_taxon_summary break queries smaller chunks avoid HTTP 414 errors (“URI long”) (#727) (#730) thanks reporting @fischhoff @benjaminschwetz number fixes internally (user facing) comply upcoming R-devel changes checking length greater 1 logical statements (#731)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-094","dir":"Changelog","previous_headings":"","what":"taxize 0.9.4","title":"taxize 0.9.4","text":"CRAN release: 2018-07-24","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.4","text":"new contributor: Gaopeng Li gains new functions helping user get authentication keys/tokens: use_entrez(), use_eol(), use_iucn() (uses internally rredlist::rl_use_iucn()), use_tropicos() (#682) (#691) (#693) @maelle","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.4","text":"remove commented code","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.4","text":"fix tropicos_ping() fixed downstream() gbif_downstream(): results don’t canonicalName, now safely try get field (#673) fixed .uid(), erroring passing taxon ID (#674) (#675) @zachary-foster fix get_boldid() (extension classification(..., db = \"bold\")): failing parent taxon found, just fill NA now (#680) fix synonyms(): failing TSNs db=\"itis\" (#685) fix tax_name(): rows arg wasn’t passed internally (#686) fix gnr_resolve() gnr_datasources(): problems caused http scheme, switched use https instead http (#687) fix class2tree(): organisms unique rank lower non-unique ranks give extra wrong rows (#689) (#690) thanks @gpli fix ncbi_get_taxon_summary(): changes NCBI API likely lead HTTP 414 (URI Long) errors. now loop internally user. extension helps problems upsteam downstream()/ncbi_downstream()/ncbi_children() (#698) fix class2tree(): erroring name strings contained pound signs (e.g., #) (#699) (#700) thanks @gpli","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-093","dir":"Changelog","previous_headings":"","what":"taxize 0.9.3","title":"taxize 0.9.3","text":"CRAN release: 2018-03-20","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-3","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.3","text":"package gains three new authors: Bastian Greshake Tzovaras, Philippe Marchand, Vinh Tran Don’t enforce rate limiting via Sys.sleep NCBI requests user API key (#667) Fix functions NCBI requests work whether user NCBI API key (#668) Increased documentation authentication, see ?taxize-authentication conversion verbose messages across package supressing calls message() conflict curl options passed Converted genbank2uid() ncbi_get_taxon_summary() use crul instead httr HTTP requests","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.3","text":"Fix get_tolid(): missing assignment att attribute internally, causing failures cases (#663) (#672) Fix ncbi_children() (thus children() requesting NCBI data) fail empty result internal call classification() (#664) thanks @arendsee","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-092","dir":"Changelog","previous_headings":"","what":"taxize 0.9.2","title":"taxize 0.9.2","text":"CRAN release: 2018-03-01","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.2","text":"class2tree() gets major overhaul thanks @gedankenstuecke @trvinh (!!). function now takes unnamed ranks account clustering, fixes problem trees unresolved many splits named taxonomy levels shared . Now makes full use NCBI Taxonomy string, including unnamed ranks, leading higher resolution trees less multifurcations (#611) (#634) Added support throughout package use NCBI Entrez API keys - NCBI now strongly encourages use get higher rate limit use one. See ?taxize-authentication help. Importantly, note API key names (R options environment variables) changed. now R options env vars: TROPICOS_KEY, EOL_KEY, PLANTMINER_KEY, ENTREZ_KEY. longer need API key Plantminer. (#640) (#646) New author Zebulun Arendsee (@arendsee) New package dependencies: crul zoo","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.2","text":"downstream() now pass limit start parameters gbif_downstream(); weren’t ; two parameters control pagination (#638) genbank2uid() now returns correct ID multiple possibilities invalid IDs longer make whole batches fail (#642) thanks @zachary-foster children() outputs made consistent certain cases results found searches (#648) (#649) thanks @arendsee Improve downstream() passing ... (additional parameters) ncbi_children() used internally. allows e.g., use ambiguous parameter ncbi_children() allows remove ambiguousl named nodes (#653) (#654) thanks @arendsee swapped use httr crul EOL Tropics functions - note won’t affect unless ’re passing curl options. see package crul help curl options. Along change, parameter verbose changed messages (toggling printing information messages)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"documentation-0-9-2","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"taxize 0.9.2","text":"Added additional text CONTRIBUTING.md file contribute test suite (#635)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.2","text":"genbank2uid now returns correct ID multiple possibilities invalid IDs longer make whole batches fail. Fix downstream(): passing numeric taxon ids function using db=\"ncbi\" wasn’t working (#641) thanks @arendsee Fix children(): passing numeric taxon ids function using db=\"worms\" wasn’t working (#650) (#651) thanks @arendsee synonyms_df() - attemps combine many outputs synonyms() function - now removes NA/NULL/empy outputs attempting combination (#636) Fix gnr_resolve(): preferred_data_sources used, get preferred data columns response. now return fields; however, return preferred data part parameter used (#656) Fixes children(). returning unexpected results amgiguous taxonomic names (e.g., ’s insects returned searching within Bacteria). also failing one tried get children root taxon (e.g., children NCBI id 131567). (#639) (#647) fixed via PR (#659) thanks @arendsee @zachary-foster","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-090","dir":"Changelog","previous_headings":"","what":"taxize 0.9.0","title":"taxize 0.9.0","text":"CRAN release: 2017-09-27","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"changes-to-get_-functions-0-9-0","dir":"Changelog","previous_headings":"","what":"Changes to get_*() functions","title":"taxize 0.9.0","text":"Added separate documentation file get* functions describing attributes various exception behaviors get*() functions NaN default rows parameter value. changed NA Better failure behavior now non-acceptable rows parameter value given Added type checks parameters across get_*() functions Changed behavior across get_*() functions behave ask = FALSE, rows = 1 ask = TRUE, rows = 1 result outcome. (#627) thanks @zachary-foster ! Fixed direct match behavior ’s multiple results data provider, direct match, functions don’t give back just NA inication multiple matches. Please let know changes cause problems code package.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.9.0","text":"Change comm2sci() S3 setup methods character, uid, tsn (#621) iucn_status() now S3 setup single method handles output iucn_summary() function.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-9-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.9.0","text":"Add required key parameter fxn iucn_id() (#633) imrove docs sci2comm(): indicate get non-simplified output (includes language common name ) vs.  getting simplified output (#623) thanks @glaroc ! Fix sci2comm() case sensitive looking matches (#625) thanks @glaroc ! Two additional columns now returned eol_search(): link content Improve docs eol_search() describe returned data.frame Fix bold_bing() use new base URL API Improved description dataset rank_ref, see ?rank_ref","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.9.0","text":"Fix downstream() via fix rank_ref dataset include “infraspecies” make “unspecified” “rank” requivalent. Fix col_downstream() remove properly ranks lower allowed. (#620) thanks @cdeterman ! iucn_summary: changed using rredlist package internally. sciname param changed x. iucn_summary_id() now deprecated favor iucn_summary(). iucn_summary() now S3 setup, methods character iucn (#622) Added “cohort” rank_ref dataset rank sometimes used NCBI (bug reported ncbi_downstream()) (#626) Fix sci2comm(), add tryCatch() internals catch failed requests specific pageid’s (#624) thanks @glaroc ! Fix URL taxa NBN taxonomic ids retrieved via get_nbnid() (#632)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-089","dir":"Changelog","previous_headings":"","what":"taxize 0.8.9","title":"taxize 0.8.9","text":"CRAN release: 2017-07-11","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-8-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.8.9","text":"Remove ape::neworder_phylo object, used anymore taxize (#618) (#619) thanks @ashiklom","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-088","dir":"Changelog","previous_headings":"","what":"taxize 0.8.8","title":"taxize 0.8.8","text":"CRAN release: 2017-07-01","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-8-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.8.8","text":"New function ncbi_downstream() now NCBI option function downstream() (#583) thanks push @andzandz11 New data source: Wiki*, includes Wikipedia, Wikispecies, Wikidata - can choose ’d like search. Uses new package wikitaxa, contributions @ezwelty (#317) scrapenames() gains parameter return_content, boolean, optionally return OCR content text string results. (#614) thanks @fgabriel1891 New function get_iucn() - get IUCN Red List ids taxa. addition, new S3 methods synonyms.iucn sci2comm.iucn - methods made work IUCN Red List ids share taxonomic classification data (#578) thanks @diogoprov","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-8-8","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.8.8","text":"bold now option classification() function (#588) fix NBN use new base URL (#582) ($597) genbank2uid() can give back 1 taxon matched given Genbank accession number. Now function can return one match query, e.g., try genbank2uid(id = \"AM420293\") (#602) thanks @sariya modify cbind() usage incclude ... method consistency (#612) tax_rank() used able ncbi itis. Can now lot data sources: ncbi, itis, eol, col, tropicos, gbif, nbn, worms, natserv, bold (#587) Added classification() docs section Lots results note deal results LOT . (#596) thanks @ahhurlbert raising issue tnrs() now returns resulting data.frame oder names passed user (#613) thanks @wpetry Changes gnr_resolve() now strip taxonomic names submitted user NA, zero length strings, class character (#606) Added description columns data.frame output gnr_resolve() (#610) thanks @kamapu Added noted tnrs() docs service doesn’t provide information homonyms. (#610) thanks @kamapu Added parvorder taxize rank_ref dataset - used NCBI - tax returned rank, functions taxize failing due rank missing reference dataset rank_ref (#615)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-8-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.8.8","text":"Fix get_colid() via problem parsing within col_search() (#585) Fix gbif_downstream (thus fix downstream()): two rows form rank_ref reference dataset rank names, causing > 1 result cases, causing vapply fail ’s expecting length 1 result (#599) thanks @andzandz11 Fix genbank2uid(): failing getting 1 result back, works now (#603) fails better now, giving back warnings/error messages informative (see also #602) thanks @sariya Fix synonyms.tsn(): cases TSN > 1 accepted name. get accepted names first TSN, look synonyms, hadn’t accounted > 1 accepted name. Fixed now (#607) thanks @tdjames Fixed bug sci2comm() - dealing internally passing simplify parameter (#616)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-084","dir":"Changelog","previous_headings":"","what":"taxize 0.8.4","title":"taxize 0.8.4","text":"CRAN release: 2017-01-19","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-8-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.8.4","text":"Added WoRMS integration via new worrms package CRAN. Adds functions .wormsid(), get_wormsid(), get_wormsid_(), children.wormsid(), classification.wormsid(), sci2comm.wormsid(), comm2sci.wormsid(), synonyms.wormsid() (#574) (#579) New functions NatureServe data, including .natservid, get_natservid, get_natservid_, classification.natservid (#126)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-8-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.8.4","text":"EOL API keys passed internal functions. fixed now. thanks @dschlaep ! (#576) Fix rankagg() respect vegan package work older new version vegan - thank @jarioksa (#580) (#581)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-080","dir":"Changelog","previous_headings":"","what":"taxize 0.8.0","title":"taxize 0.8.0","text":"CRAN release: 2016-12-16","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.8.0","text":"New data source added: Open Tree Life. New functions data source added: get_tolid(), get_tolid_(), .tolid() (#517) related classification() gains new method TOL data related lowest_common() gains new method TOL data Now using ritis package, external dependency ITIS taxonomy data. Note large number ITIS functions removed, now available via package ritis. However, still many high level functions working ITIS data (see functions prefixed itis_), get_tsn(), classification.tsn(), similar high level functions remain unchanged. (#525) EUBON new API (v1.2). now interact new API version. addition, eubon() fxn now eubon_search(), although either still work - though eubon() made defunct next version package. Additional new functions added: eubon_capabilities(), eubon_children(), eubon_hierarchy() (#567) lowest_common() function gains two new data source options: COL (Catalogue Life) TOL (Tree Life) (#505) Addded new function synonyms_df() slim wrapper around data.table::rbindlist() make easy combine many outputs synonyms() single data source - lot heterogeneity among data sources report synonyms data, don’t attempt combine data across sources (#533)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-8-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.8.0","text":"Change NCBI URLs https http (#571)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.8.0","text":"Fixed bug tax_name() invalid taxon searched classification() returned data caused error. Fixed now. (#560) thanks @ljvillanueva reporting ! Fixed bug gnr_resolve() order input names function retained. fixed now. (#561) thanks @bomeara reporting ! Fixed bug gbif_parse() - data format changed coming back GBIF - needed replace NULL NA (#568) thanks @ChrKoenig reporting !","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-079","dir":"Changelog","previous_headings":"","what":"taxize 0.7.9","title":"taxize 0.7.9","text":"CRAN release: 2016-07-24","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-7-9","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.7.9","text":"New vignette: “Strategies programmatic name cleaning” (#549)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-7-9","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.7.9","text":"get_*() functions now new attributes help user: multiple_matches (logical) indicating whether multiple matches , pattern_match (logical) indicating whether pattern match made, . (#550) (#547) discussion, thanks @ahhurlbert ! see also (#551) Change xml2::xml_find_one() xml2::xml_find_first() new xml2 version (#546) gnr_resolve() now retains user supplied taxa matches - affect code, make sure check existing code (#558) gnr_resolve() - stop sorting output data.frame, order rows output data.frame now user input vector/list (#559)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-7-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.7.9","text":"Fixed internal fxn sub_rows() inside get_*() functions fail data.frame rows less requested user rows parameter (#556) Fixed get_gbifid(), sometimes calls failed now return numberic IDs used return character IDs (#555) Fix get_() functions call internal sub_rows() function later function flow interfere taxonomic based filtering (e.g., user filtering taxonomic rank) (#555) Fix gnr_resolve(), fail parsing data returned preferred data source specified (#557)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-078","dir":"Changelog","previous_headings":"","what":"taxize 0.7.8","title":"taxize 0.7.8","text":"CRAN release: 2016-06-17","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-7-8","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.7.8","text":"Fix iucn_summary() (#543) thanks @mcsiple Added message many Ids passed ncbi_get_taxon_summary() suggesting break ids chunks (#541) thanks @daattali Fix itis_acceptname() accept multiple names (#534) now gives back output regardless whether match found (#531)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-7-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.7.8","text":"Fix tax_name() queries return classification data via internal call classification() (#542) thanks @daattali Another fix tax_name() (#530) thanks @ibartomeus Fixed docs rankagg() function, use requireNamespace() examples make sure user vegan installed (#529)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-076","dir":"Changelog","previous_headings":"","what":"taxize 0.7.6","title":"taxize 0.7.6","text":"CRAN release: 2016-05-11","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-7-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.7.6","text":"Changed defunct messages eol_invasive() gisd_invasive() point new location originr package. Also, cleaned code functions avail. anymore (#494) Access IUCN taxonomy information now provided newish rredlist package. (Two issues dealing IUCN problems (#475) (#492))","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-7-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.7.6","text":"Fix get_gbifid() use new internal code provide two ways search GBIF taxonomy API, either via /species/match via /species/search, instead /species/suggest, used previously. suggest route coarse. get_gbifid() also gains parameter method toggle whether search names using /species/match /species/search. (#528) Fix col_search() handle COL can return value missapplied name, switch() statement didn’t handle yet (#511) thanks @JoStaerk ! Fixes get_colid() col_search() (#523) thanks @zachary-foster !","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-075","dir":"Changelog","previous_headings":"","what":"taxize 0.7.5","title":"taxize 0.7.5","text":"CRAN release: 2016-04-07","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-7-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.7.5","text":"Fixed bug package dependency bold, fixes taxize::bold_search(), actual changes taxize , take note (#521) Fixed problem gnr_resolve() indexed data incorrectly. added tests account problem. Thanks @raredd ! (#519) (#520) Fixed bug iucn_summary() introduced last version. iucn_summary() now uses package rredlist, requires API key, didn’t document use key. Function now allows user pass key parameter, documents get key save either .Renviron .Rprofile (#522)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-074","dir":"Changelog","previous_headings":"","what":"taxize 0.7.4","title":"taxize 0.7.4","text":"CRAN release: 2016-03-09","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-7-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.7.4","text":"New function lowest_common() obtaining lowest common taxon rank given taxon name ID. Methods far ITIS, NCBI, GBIF (#505) New contributor James O’Donnell (@jimmyodonnell) (via #505) Now importing rredlist rredlist New function iucn_summary_id() - iucn_summary(), except takes IUCN IDs input instead taxonomic names (#493) taxonomic rank columns data.frame’s now given back lower case. provides consistency, important, many functions use ranks determine next, using consistent case good.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-7-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.7.4","text":"iucn_summary() fixes, long story short: number bug fixes, uses new IUCN API via newish package rredlist IDs given input, uses old IUCN API taxonomic names given. Also: gains new parameter distr_details (#174) (#472) (#487) (#488) Replaced XML xml2 XML parsing (#499) Fixes internal use httr::content explicitly state encoding=\"UTF-8\" (#498) gnr_resolve() now outputs column (user_supplied_name) exact input taxon name - facilitates merging data back original data inputs (#486) thanks @Alectoria eol_dataobjects() gains new parameter taxonomy toggle whether return taxonomy details different data providers (#497) Catalogue Life URLs changed - updated appropriate COL functions use new URLs (#501) classification() giving back rank values mixed case different data providers (e.g., class vs. Class). rank values now lowercase (#504) Changed number results returned internal GBIF search get_gbfid 50 20. Gives back results, likely get thing searched (#513) Fix gni_search() make output columns character class iucn_id(), tpl_families(), tpl_get() gain new parameter ... pass curl options httr::GET()","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-7-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.7.4","text":"Fixes get_eolid(): URI returned now always pageid, goes right place; API key passed now actually used, woopsy (#484) Fixes get_uid(): taxon found, “match” attribute saying found sometimes anyway - now fixed; additionally, fixed docs correctly state give back 'NA due ask=FALSE' ask = FALSE (#489) Additionally, made doc fix get_*() function docs Fix apgOrders() function (#490) Fixes tp_search() fixes get_tpsid(): Tropicos doesn’t allow periods (.) query strings, URL encoded now; Tropicos doesn’t like sub-specific rank names name query strings, warn found, don’t alter user inputs; improved docs clear function fails (#491) thanks @scelmendorf ! Fix classification(db = \"itis\") fail better taxa found (#495) thanks @ashenkin ! eol_pages() fixes: EOL API route method gained new parameter taxonomy, function gains parameter. change caused fxn fail. Now fixed. Also, parameter subject changed subjects (#500) Fix col_search() due misapplied name come back data slot. previously parser type. Now , works (#512)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-070","dir":"Changelog","previous_headings":"","what":"taxize 0.7.0","title":"taxize 0.7.0","text":"CRAN release: 2015-11-30","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.7.0","text":"Now requires R >= 3.2.1. Good idea update R installation anyway (#476) New function ion() obtaining data Index Organism Names (#345) New function eubon() obtaining data EU (European Union) BON taxonomy (#466) Note may onloy get partial results requests paging isn’t implemented yet EU BON API (#481) New suite functions, prefix fg_*() obtaining data Index Fungorum. work done yet data source, initial functions allow Index Fungorum data access (#471) New function gbif_downstream() obtaining downstream names GBIF’s backbone taxonomy. Also available downstream(), can request downstream names GBIF, along data sources (#414)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-7-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.7.0","text":"Note added docs db parameters warn users provide wrong db value given taxon ID, can get data back, wrong. , taxonomic data sources available taxize use unique IDs, single ID value can multiple data sources, even though ID refers different taxa data source. way can think prevent happening, cautious. (#465) note added IUCN functions warn users sometimes incorrect data returned. beyond control, sometimes IUCN gives back incorrect data, sometimes EOL/Global Names (use IUCN functions) give back incorrect data. (#468) (#473) (#174) (472) (#475)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.7.0","text":"Fix gnr_resolve() default capitalize first name name string passed function. GNR case sensitive, case matters (#469)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"defunct-0-7-0","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"taxize 0.7.0","text":"phylomatic_tree() phylomatic_format() defunct. deprecated recent versions, now gone. See new package brranching Phylomatic data (#479)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-066","dir":"Changelog","previous_headings":"","what":"taxize 0.6.6","title":"taxize 0.6.6","text":"CRAN release: 2015-10-01","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-6-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.6.6","text":"stripauthority argument gnr_resolve() renamed canonical better match actually (#451) gnr_resolve() now returns single data.frame output, NULL data found. input taxa match returned attribute name not_known (#448) updated functions work R >3.2.x vascan_search() changed callopts parameter ... pass curl options request. ipni_search() changed callopts parameter ... pass curl options request. addition, better http error handling, added test suite function. (#458) stringsAsFactors=FALSE now used gibf_parse() (https://github.com/ropensci/taxize/commit/c0c4175d3a0b24d403f18c057258b67d3fbf17f0) Made nearly column headers list names lowercase simplify indexing elements, well combining outputs. (#462) Plantminer API updated use new API. Option search ThePlantList Brazilian Flora Checklist (#464) Added details documentation get_uid() make clear use varoious parameters get desired result, avoid certain pitfalls (#436) Removed parameter asdf function eol_dataobjects() - now returning data.frame’s . Added error catching get_eolid() via tryCatch() fail better names found. Dropped openssl package dependency. needed anymore uBio dropped.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-6-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.6.6","text":"gnr_resolve() failed canonical form found. Fixed gnr_resolve() results found best_match_only=TRUE (#432) Fixed bug internal function itisdf() give back empty data.frame results found, often subspecific taxa. Helps solve errors reported use downstream(), itis_downstream(), gethierarchydownfromtsn() (#459)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-6-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.6.6","text":"gnr_resolve() gains new parameter with_canonical_ranks (logical) choose whether infraspecific ranks returned . New function iucn_id() get IUCN ID taxon ’s name. (#431)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"defunct-0-6-6","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"taxize 0.6.6","text":"functions interacted taxonomy service uBio now defunct. course deprecate first, make defunct later, make transition easier, hands. functions defunct : ubio_classification(), ubio_classification_search(), ubio_id(), ubio_search(), ubio_synonyms(), get_ubioid(), ubio_ping(). addition, ubio removed option synonyms() function, references uBio removed taxize_cite() utility function. (#449)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-062","dir":"Changelog","previous_headings":"","what":"taxize 0.6.2","title":"taxize 0.6.2","text":"CRAN release: 2015-08-07","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-6-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.6.2","text":"rankagg() doesn’t depend data.table anymore (fixes issue CRAN checks) Replaced RCurl::base64Decode() openssl::base64_decode(), needed ubio_*() functions (#447) Importing functions (via importFrom) used across imports now (#446). addition, importFrom non-base R pkgs, including graphics, methods, stats utils packages (#441) Fixes prevent problems httr v1, can’t pass zero length list query parameter GET(), can pass NULL (#445) Fixes gni_*() functions, including code tidying, DRYing , ability pass curl options (#444)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-6-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.6.2","text":"Fixed typo taxize_cite() Fixed bug classification() numeric IDs input got converted itis ids just numeric. Fixed now. (#434) Catalogue Life (COL) changed using short numeric codes taxa long alphanumeric UUID type ids. required fixing functions using COL web services (#435)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-060","dir":"Changelog","previous_headings":"","what":"taxize 0.6.0","title":"taxize 0.6.0","text":"CRAN release: 2015-06-13","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.6.0","text":"Added method Catalogue Life synonyms function get name synonyms. (#430) Added datasets apgFamilies apgOrders. (#418) col_search() gains parameters response get terse full response, ... pass curl options. eol_dataobjects() gains parameter ... pass curl options, parameter returntype renamed asdf (“data.frame”). ncb_get_taxon_summary() gains parameter ... pass curl options. children() function gains rows parameter passed get_*() functions, supported data sources ITIS Catalogue Life, NCBI. upstream() function gains rows parameter passed get_*() functions, supported data sources ITIS Catalogue Life. classification() function gains rows parameter passed get_*() functions, sources used function. downstream() function gains rows parameter passed get_*() functions, sources used function. Nearly taxonomic ID retrieveal functions (.e., get_*()) gain new parameters help filter results (e.g., division, phylum, class, family, parent, rank, etc.). parameters allow direct matching regex filters (e.g., .match character followed ). (#410) (#385) Nearly taxonomic ID retrieveal functions (.e., get_*()) now give back information (mostly higher taxonomic data) help interactive decision process. (#327) New data source added synonyms() function: Catalogue Life. (#430)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-6-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.6.0","text":"vegan package, used class2tree() function, moved Imports Suggests. (#392) Improved taxize_cite() lot - get URLs sometimes citation information data sources available taxize. (#270) Fixed typo apg_lookup() function. (#422) Fixed documentation apg_families() function. (#418) Across many functions, fixed support passing curl options, added examples curl option use. callopts parameter eol_pages(), eol_search(), gnr_resolve(), tp_accnames(), tp_dist(), tp_search(), tp_summary(), tp_synonyms(), ubio_search() changed ... accepted parameter get_tsn() changed FALSE default. (#425) Default value db parameter resolve() changed gnr tnrs often quite slow. General code tidying across package make code easier read.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.6.0","text":"Fixed encoding issues tpl_families() tpl_get(). (#424)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"deprecated-and-defunct-0-6-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"taxize 0.6.0","text":"following functions deprecated now defunct (longer available): ncbi_getbyname(), ncbi_getbyid(), ncbi_search(), eol_invasive(), gisd_isinvasive(). functions available traits package. (#382) phylomatic_tree() deprecated, defunct upcoming version.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-052","dir":"Changelog","previous_headings":"","what":"taxize 0.5.2","title":"taxize 0.5.2","text":"CRAN release: 2014-12-19","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-5-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.5.2","text":"New set functions ping APIs used taxize. E.g., itis_ping() pings ITIS returns logical, indicating ITIS API working . can also basic test see whether content returned matches ’s expected. (#394) New function status_codes() get vector HTTP status codes. (#394)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-5-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.5.2","text":"Removed startup message. Now can pass curl options itis_ping(), *_ping() functions.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.5.2","text":"Moved examples \\donttest \\dontrun.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.5.0","text":"New function genbank2uid() get NCBI taxonomic id (.e., uid) either GenBank accession number GI number. (#375) New function get_nbnid() get UK National Biodiversity Network taxonomic id (.e., nbnid). (#332) New function nbn_classification() get taxonomic classification UK National Biodiversity Network taxonomic id. Using new function, generic method classification() gains method nbnid. (#332) New function nbn_synonyms() get taxonomic synonyms UK National Biodiversity Network taxonomic id. Using new function, generic method synonyms() gains method nbnid. (#332) New function nbn_search() search taxa UK National Biodiversity Network. (#332) New function ncbi_children() get direct taxonomic children NCBI taxonomic id. Using new function, generic method children() gains method ncbi. (#348) (#351) (#354) New function upstream() get taxa upstream taxon. E.g., getting families upstream genus gets families within one level higher taxonomic class family. (#343) New suite functions .*() coerce numeric/alphanumeric codes taxonomic identifiers various databases. methods function itis, ncbi, tropicos, gbif, nbn, bold, col, eol, ubio. default .*() funtions make quick check identifier real one making GET request identifier URI - can toggle setting check=FALSE. methods returning , character, numeric, list, data.frame. addition, .*.data.frame() function used, generic method exists coerce data.frame back identifier object. (#362) New suite functions named, example, get_tsn_() (underscore different previous function name). functions don’t normal interactive process prompts e.g., get_tsn() , instead returned list ids, subset via rows parameter. (#237) New function ncbi_get_taxon_summary() get taxonomic name rank 1 NCBI uid’s. (#348)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.5.0","text":"assertthat removed package imports, replaced stopifnot(), reduce dependency load. (#387) eol_hierarchy() now defunct (longer available) (#228) (#381) tp_classifcation() now defunct (longer available) (#228) (#381) col_classification() now defunct (longer available) (#228) (#381) New manual page listing low level ITIS functions manual pages shown package index, available ?fxn-name. get_*() functions gain new parameter rows allow selection particular rows. example, rows=1 select first row, rows=1:3 select rows 1 3. (#347) classification() now default returns taxonomic identifiers names. can toggled return_id=FALSE. (#359) (#360) Simplification many higher level functions use switch() db parameter, helps give better error message db value possible spelled incorrectly. (#379)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.5.0","text":"Lots reduction redundancy internal functions. (#378)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-040","dir":"Changelog","previous_headings":"","what":"taxize 0.4.0","title":"taxize 0.4.0","text":"CRAN release: 2014-09-09","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.4.0","text":"New data sources added taxize: BOLD (Biodiversity Life Database). Three data sources added (World Register Marine Species (WoRMS), Pan-European Species directories Infrastructure (PESI), Mycobank), available CRAN. three data sources provide data via SOAP web services protocol, hard support R. Thus, sources available Github. See https://github.com/ropensci/taxize#version--soap-data-sources New function children(), single interface various data sources get immediate children given taxonomic name. (#304) New functions added search BOLD data” bold_search() searches taxa BOLD database barcode data; get_boldid() search BOLD taxon identifier. (#301) New function get_ubioid() get uBio taxon identifier. (#318) New function started (complete yet) get suggested citations various data sources available taxize: taxize_cite(). (#270)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.4.0","text":"Using jsonlite instead RJSONIO throughout taxize. get_ids() gains new option search uBio ID, addition others, itis, ncbi, eol, col, tropicos, gbif. Fixed documentation stripauthority parameter gnr_resolve(). (#325) iplant_resolve() now outputs data.frame structure instead list. (#306) Clarified parameter seqrange ncbi_getbyname() ncbi_search() (#328) synonyms() gains new data source, can now get synonyms uBio data source (#319) vascan_search() giving back useful results now.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.4.0","text":"Added error catching URI long, .e., many names provided (#329) (#330) Various fixes tnrs() function, including meaningful error messages failures (#323) (#331) Fixed bug getpublicationsfromtsn() caused function fail data.frame’s data name assignment (#297) Fixed bug sci2comm() caused fxn fail using db=itis sometimes (#293) Fixes scrapenames(). Sending text blob via text parameter now works. Fixes resolve() function now works 3 data sources. (#337)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-030","dir":"Changelog","previous_headings":"","what":"taxize 0.3.0","title":"taxize 0.3.0","text":"CRAN release: 2014-05-20","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.3.0","text":"New function iplant_resolve() name resolution using iPlant name resolution service. Note, different http://taxosaurus.org/ wrapped tnrs() function. New function ipni_search() search names International Plant Names Index (IPNI). New function resolve() unifies name resolution services iPlant’s name resolution service (via iplant_resolve()), Taxosaurus’ TNRS (via tnrs()), GNR’s name resolution service (via gnr_resolve()). get_*() functions returning new uri attribute link taxon web. NA given back (e.g. nothing found), uri attribute blank. can go directly uri default browser , example: browseURL(attr(result, \"uri\")). get_eolid() now returns attribute provider EOL collates taxonomic data form lot sources, gives back IDs internal EOL ids, matching id source pull . help provenance, help confusion id givenb back function match original source. Within get_tsn() function, now using function itis_terms(), gives back accepted status taxa. allows new parameter function (accepted, logical) allows user say give back accepted status names (accepted=TRUE), give back names (accepted=FALSE). gnr_resolve() gains two new parameters best_match_only (logical, return best match ) preferred_data_sources (return preferred data sources) callopts pass curl options. tnrs(), tp_accnames(), tp_refs(), tp_summary(), tp_synonyms() gain new parameter callopts pass curl options.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.3.0","text":"class2tree() can now handle NA classification objects. classification.eolid() classification.colid() now return submitted name along classification. Changed CC0 MIT license. Updated citation taxize paper F1000 Research package citation. Sped functions removing internal use plyr functions, see #275. Removed dependency rgbif - copied package functions needed internally. avoids users install GDAL binary. Added verbose parameter many functions allow suppression help messages. functions using httr, now manually parsing JSON list another data format instead allowing internal httr parsing - addition added checks content type encoding many functions. Added match.arg iternally get_ids() db parameter ) unique short abbreviations possible values possible, b) gives meaningful warning unsupported values given. long-named ITIS functions (e.g., getexpertsfromtsn, getgeographicdivisionsfromtsn) gain parameter curlopts pass curl options. Added stringsAsFactors=FALSE data.frame creations eliminate factor variables.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.3.0","text":"classification.gbifid() return correct result taxon found. Fixed bugs many functions, see #245, #248, #254, #277. classification() used fail passed subset vector ids, case class information stripped . Now works (#284)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-022","dir":"Changelog","previous_headings":"","what":"taxize 0.2.2","title":"taxize 0.2.2","text":"CRAN release: 2014-03-02","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.2.2","text":"itis_downstream() col_downstream() functions accessible now single function downstream() (https://github.com/ropensci/taxize/issues/238)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-2-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.2.2","text":"Added extension function classification() gbif id class, classification.gbifid() (https://github.com/ropensci/taxize/issues/241)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.2.2","text":"Added error catching class2tree function. (https://github.com/ropensci/taxize/issues/240) Fixed problems cbind.classification() rbind.classification() first column ouput useless column name, column names now lower case consistency. (https://github.com/ropensci/taxize/issues/243) classification() giving back IDS instead taxon names list element names, fixed hopefully giving back names. (https://github.com/ropensci/taxize/issues/243) Fixed bugs col_*() functions give back data.frame’s now character class columns instead factors, damned stringsAsFactors! (https://github.com/ropensci/taxize/issues/246)","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-020","dir":"Changelog","previous_headings":"","what":"taxize 0.2.0","title":"taxize 0.2.0","text":"CRAN release: 2014-02-17","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.2.0","text":"New dataset: Lookup-table family, genus, species names ThePlantList dataset name “theplantlist”. get_ids() now accepts “gbif” option via use get_gbifid(). Changed function itis_phymat_format() phylomatic_format() - function gets typical Phylomatic format name string “family/genus/genus_epithet”","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.2.0","text":"Updated gbif_parse() base url new one (http://api.gbif.org/v1/parser/name). Fixes phylomatic_tree().","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.2.0","text":"New function class2tree() convert list classifications tree. example, go list classifications function classification() function get taxonomy tree ape phylo format. New function get_gbfid() get Global Biodiversity Information Facility identifier. ID GBIF uses backbone taxonomy. classification() outputs gain rbind() cbind() generic methods act various outputs classification() bind data width-wise, column-wise, respectively.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-1-9","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.1.9","text":"Updated ncbi_search() retrieve max 500, slightly changed column headers output data files, didn’t , now accepts vector/list taxonomic names instead just one name.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-018","dir":"Changelog","previous_headings":"","what":"taxize 0.1.8","title":"taxize 0.1.8","text":"CRAN release: 2013-12-27","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-1-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.1.8","text":"attempted make ouput column names lowercase, increase consistency across column names outputs similar functions. New function scrapenames() uses Global Names Recognition Discovery service extract taxonomic names web page, pdf, document. New function vascan_search() search CANADENSYS Vascan names database.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-1-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.1.8","text":"Fixed bugs get_tpsid(), get_eolid() eol_pages(). phylomatic_tree() bugs fixed.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-1-8","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.1.8","text":"classification() methods simplified. Now classification() workhorse every data-source. col_classification(), eol_hierarchy(), tp_classification() now deprecated removed next taxize version. classification() gains four new arguments: start, checklist, key, callopts. comm2sci() gains argument simplify optionally simplify output vector names (TRUE default). get_eolid() get_tpsid() gain new arguments key specify API key, … pass arguments eol_search(). Added ncbi data source (db=“ncbi”) sci2comm(). tax_agg() now accepts matrix addition data.frame. Thanks @tpoi tnrs() changes: Using httr instead RCurl; now forcing splitting name vector long. Still issues using POST requests (getpost=“POST”) wherein request sent 100 names returns 30 example. Investigating now.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"notes-0-1-8","dir":"Changelog","previous_headings":"","what":"NOTES","title":"taxize 0.1.8","text":"Function name change: tp_acceptednames() now tp_accnames(). Function name change: tp_namedistributions() now tp_dist(). Function name change: tp_namereferences() now tp_refs(). Internal ldfast() function changed name taxize_ldfast() avoid namespace conflicts similar function another package. Three functions now ncbi_* prefix: get_seqs() now ncbi_getbyname(); get_genes() now ncbi_getbyid(); get_genes_avail() now ncbi_search().","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-015","dir":"Changelog","previous_headings":"","what":"taxize 0.1.5","title":"taxize 0.1.5","text":"CRAN release: 2013-11-19","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-1-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.1.5","text":"classification() gains extension method classification.ids() accept output get_ids() - attempts get taxonomic hierarchy taxon identifiers output get_ids(). synonyms() gains extension method synonyms.ids() accept output get_ids() - attempts get synonyms taxon identifiers output get_ids().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-1-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.1.4","text":"Reworked functions interact ITIS API lower level functions grouped together higher level functions. approximately 50 lower level functions still exported included index help file (due @keywords internal fxn) - can still used normally, man files avaialable ?functionName. New function itis_ping() check ITIS API service , similar eol_ping() EOL API. New function itis_getrecord() get partial full record, using TSN lsid. New function itis_refs() get references associated TSN. New function itis_kingdomnames() get kingdom names, kingdom name TSN. New function itis_lsid() get TSN lsid, get partial full record lsid. New function itis_native() get status native, exotic, etc. various geographic regions. New function itis_hierarchy() get full hierarchy, immediate downstream hierarchy. New function itis_terms() get tsn’s, authors, common names, scientific names given query. New function sci2comm() get common (vernacular) names input scientific names various data sources. New function comm2sci() get scientific names input common (vernacular) names various data sources. New function get_ids() get taxonomic identifiers across sources.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-1-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.1.4","text":"itis_taxrank() now outputs character, factor; loses parameter verbose, gains …, passes arguments gettaxonomicranknamefromtsn. tp_synonyms(), tp_summary(), plantminer(), itis_downstream(), gisd_isinvasive(), get_genes_avail(), get_genes(), eol_invasive(), eol_dataobjects(), andn tnrs() gain parameter verbose optionally suppress messages. phylomatic_tree() format changed names passed normall (e.g., Poa annua) instead slashpath format (family/genus/genus_species). Also, taxaformat parameter dropped. itis_acceptname() gains … pass arguments getacceptednamesfromtsn() tp_namedistributions() loses parameter format. get_tsn() get_uid() return infomation match attribute. clarified iucn-documentation","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-1-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.1.4","text":"Fixed bug synonyms() arguments can passed get_tsn() suppress messages. Removed test ubio_classification_search(), function isn’t operational yet.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.1.1","text":"New functions added just like get_uid()/get_tsn() EOL, Catalogue Life, Tropicos, see get_eolid(), get_colid(), get_tpsid(), respectively. classification() methods added EOL, Catalogue Life, Tropicos, see functions classification.eolid(), classification.colid(), classification.tpsid() respectively. New function col_search() search names Catalogue Life. User can turn interactive mode get_* functions. get_* functions gain ask argument, TRUE (default) user prompt used user select row want, FALSE, NA returned many results available; added tests new argument. Affects downstream functions . New function eol_invasive() search EOL collections invasive species lists. New function tp_search() search taxonomic IDs Tropicos. New function tp_classification() get taxonomic hierarchy Tropicos. New function gbif_parse() parse scientific names components, using GBIF name parser API. New function itis_searchcommon() search common names across searchbycommonnamebeginswith, searchbycommonnameendswith.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.1.1","text":"tax_name() function broke, get_tsn() get_uid() returned wrong value taxon found. Fixed.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-1-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.1.1","text":"Added tests new classification() methods EOL, COL, Tropicos. Added tests new functions tp_search() tp_classification().","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"notes-0-1-1","dir":"Changelog","previous_headings":"","what":"NOTES","title":"taxize 0.1.1","text":"Moved tests inst/tests tests/testthat according new preferred location tests. Updated CITATION inst/ F1000Research paper info. Package repo name Github changed taxize_ taxize - remember use “taxize” install_github() calls now instead “taxize_”","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-010","dir":"Changelog","previous_headings":"","what":"taxize 0.1.0","title":"taxize 0.1.0","text":"CRAN release: 2013-10-27","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.1.0","text":"New function tpl_families() get data.frame families Plantlist.org site. New function names_list() get random vector species names using Added two new data sets, plantGenusNames.RData plantNames.RData, used names_list(). New function ldfast(), replacement function plyr::ldply faster cases. Changed API key names consistent, now tropicosApiKey, eolApiKey, ubioApiKey, pmApiKey - change .Rprofile store . Added startup message.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.1.0","text":"Across functions, removed dependencies plyr, using ldfast() instead, increased speed. Across functions, changed using RCurl using httr. Across functions, stop_for_status() now used directly Curl call check http status code, stoping function appropriate code found. Many functions changed parameter … callopts, passes additional Curl options, default empty list (list()), makes function testing easier. eol_search() gains parameters page, exact, filter_tid, filter_heid, filter_by_string, matching, cache_ttl, callopts. eol_hierarchy() gains parameter callopts, loses parameter usekey (always using API key now). eol_pages() gains parameters images, videos, sounds, maps, text, subject, licenses, details, common_names, synonyms, references, vetted, cache_ttl, callopts. gni_search(): parameter url lost, defined inside function now, .Rd file gains url references. phylomatic_tree() now checks make sure family names found input taxa. , function stops message informing . tpl_get() updated fixes/improvements John Baumgartner - now gets taxa groups, whereas retrieved Angiosperms . addition, csv files Plantlist.org downloaded directly rather read R written . tpl_search() now checks missing data errors, stops function error message.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.1.0","text":"capwords() fxn changed taxize_capwords() avoid namespace conflicts packages similar function. ubio_namebank() giving back base64 encoded data, now decoded appropriately.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"notes-0-1-0","dir":"Changelog","previous_headings":"","what":"NOTES","title":"taxize 0.1.0","text":"Added John Baumgartner author.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-006","dir":"Changelog","previous_headings":"","what":"taxize 0.0.6","title":"taxize 0.0.6","text":"CRAN release: 2013-08-01","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-0-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.0.6","text":"tax_name() accepts multiple ranks query. tax_name() accepts vectors input. tax_name() option query , NCBI ITIS, one call return union . new extractor function iucn_summary(): iucn_status(), extract status iucn-objects. tax_agg(): function aggregate species data given taxonomic rank. tax_rank(): Get taxonomic rank given taxon name. classification() accepts taxon names input returns named list. new function apg_lookup() looks APGIII taxonomy replaces family names new function gni_parse() parses scientific names using EOl’s name parser API new function iucn_getname() utility find IUCN names using EOL API new function rank_agg() aggregates data given taxonomic rank new data table apg_families new data table apg_orders gnr_resolve() gains new arguments gnr_resolvee_once, with_context, stripauthority, highestscore, http, loses returndf (, data.frame returned default) gni_search() gains parameter parse_names","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"minor-improvements-0-0-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"taxize 0.0.6","text":"tnrs() parameter getpost changed default ‘GET’ ‘POST’ Across functions, url parameter specifying API endpoint moved inside functions (.e., available parameter function call) gnr_datasources() parameter todf=TRUE default now, returning data.frame col_classification() minor formatting improvements","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-0-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.0.6","text":"iucn_summary() returns information population estimates. get_tsn() raised warning specific situations. tax_name() work multiple ranks ITIS. fixed errors getfullhierarchyfromtsn() fixed errors gethierarchydownfromtsn() fixed errors getsynonymnamesfromtsn() fixed errors searchforanymatch() fixed errors searchforanymatchedpage()","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"notes-0-0-6","dir":"Changelog","previous_headings":"","what":"NOTES","title":"taxize 0.0.6","text":"Removed dependency NCBI2R Improvements documentation Citation added","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-005","dir":"Changelog","previous_headings":"","what":"taxize 0.0.5","title":"taxize 0.0.5","text":"CRAN release: 2013-02-19","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-0-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.0.5","text":"removed tests now longer term fix made web APIs temporarily don’t cause tests fail.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-004","dir":"Changelog","previous_headings":"","what":"taxize 0.0.4","title":"taxize 0.0.4","text":"CRAN release: 2013-01-31","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-0-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.0.4","text":"added R (>= 2.15.0) package tests don’t fail systems due paste0() remove test ubio_namebank() function sometimes fails","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-003","dir":"Changelog","previous_headings":"","what":"taxize 0.0.3","title":"taxize 0.0.3","text":"CRAN release: 2013-01-30","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-0-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.0.3","text":"iucn_summary() break API returns information. tax_name() returns NA taxon found API. get_uid() asks user input one UID found taxon. changed base URL phylomatic_tree(), associated parameter changes","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-0-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.0.3","text":"added check invasive species status set species GISD database via gisd_isinvasive(). development EOL-API: eol_dataobjects(). added Catalogue Life: col_classification(), col_children(), col_downstream(). new fxn get_genes(), retrieve gene sequences NCBI accession number. new functions interact Phylotastic name resolution service: tnrs_sources() tnrs() Added unit tests","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"deprecated-and-defunct-0-0-3","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"taxize 0.0.3","text":"itis_name() fxn deprecated - use tax_name() instead","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-002","dir":"Changelog","previous_headings":"","what":"taxize 0.0.2","title":"taxize 0.0.2","text":"CRAN release: 2012-12-07","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"bug-fixes-0-0-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"taxize 0.0.2","text":"changed paste0 paste avoid problems certain platforms. removed tests next version tests fail platforms. plyr missing import iucn_summary fxn.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.0.2","text":"added NEWS file.","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"taxize-001","dir":"Changelog","previous_headings":"","what":"taxize 0.0.1","title":"taxize 0.0.1","text":"CRAN release: 2012-12-04","code":""},{"path":"https://docs.ropensci.org/taxize/news/index.html","id":"new-features-0-0-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"taxize 0.0.1","text":"released CRAN","code":""}]
